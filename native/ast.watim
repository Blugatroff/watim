import "../std/alloc.watim" as A
import "../std/str.watim" as STR
import "../std/io.watim" as IO
import "../std/core.watim" as CORE
import "../std/util.watim" as U
import "../std/str-map.watim" as StrMap
import "../std/fmt.watim" as FMT
import "../std/arena.watim" as Arena
import "../std/array.watim" as Array

import "./lexer.watim" as L
import "./util.watim" as CU
import "./module.watim" as M

fn INTRINSIC_ADD() -> i32 { 1 }
fn INTRINSIC_STORE() -> i32 { 2 }
fn INTRINSIC_STORE8() -> i32 { 3 }
fn INTRINSIC_LOAD8() -> i32 { 5 }
fn INTRINSIC_DROP() -> i32 { 6 }
fn INTRINSIC_SUB() -> i32 { 7 }
fn INTRINSIC_EQ() -> i32 { 8 }
fn INTRINSIC_NOT_EQ() -> i32 { 9 }
fn INTRINSIC_MOD() -> i32 { 10 }
fn INTRINSIC_DIV() -> i32 { 11 }
fn INTRINSIC_AND() -> i32 { 12 }
fn INTRINSIC_NOT() -> i32 { 13 }
fn INTRINSIC_OR() -> i32 { 14 }
fn INTRINSIC_LESS() -> i32 { 15 }
fn INTRINSIC_GREATER() -> i32 { 16 }
fn INTRINSIC_LESS_EQ() -> i32 { 17 }
fn INTRINSIC_GREATER_EQ() -> i32 { 18 }
fn INTRINSIC_MUL() -> i32 { 19 }
fn INTRINSIC_ROTR() -> i32 { 20 }
fn INTRINSIC_ROTL() -> i32 { 21 }
fn INTRINSIC_MEM_GROW() -> i32 { 22 }
fn INTRINSIC_MEM_COPY() -> i32 { 23 }
fn INTRINSIC_FLIP() -> i32 { 24 }

fn intrinsic-name(intrinsic: i32) -> .i32, i32 {
    loop {
        $intrinsic INTRINSIC_ADD = if { "INTRINSIC_ADD" break }
        $intrinsic INTRINSIC_STORE = if { "INTRINSIC_STORE" break }
        $intrinsic INTRINSIC_STORE8 = if { "INTRINSIC_STORE8" break }
        $intrinsic INTRINSIC_LOAD8 = if { "INTRINSIC_LOAD8" break }
        $intrinsic INTRINSIC_DROP = if { "INTRINSIC_DROP" break }
        $intrinsic INTRINSIC_SUB = if { "INTRINSIC_SUB" break }
        $intrinsic INTRINSIC_EQ = if { "INTRINSIC_EQ" break }
        $intrinsic INTRINSIC_NOT_EQ = if { "INTRINSIC_NOT_EQ" break }
        $intrinsic INTRINSIC_MOD = if { "INTRINSIC_MOD" break }
        $intrinsic INTRINSIC_DIV = if { "INTRINSIC_DIV" break }
        $intrinsic INTRINSIC_AND = if { "INTRINSIC_AND" break }
        $intrinsic INTRINSIC_NOT = if { "INTRINSIC_NOT" break }
        $intrinsic INTRINSIC_OR = if { "INTRINSIC_OR" break }
        $intrinsic INTRINSIC_LESS = if { "INTRINSIC_LESS" break }
        $intrinsic INTRINSIC_GREATER = if { "INTRINSIC_GREATER" break }
        $intrinsic INTRINSIC_LESS_EQ = if { "INTRINSIC_LESS_EQ" break }
        $intrinsic INTRINSIC_GREATER_EQ = if { "INTRINSIC_GREATER_EQ" break }
        $intrinsic INTRINSIC_MUL = if { "INTRINSIC_MUL" break }
        $intrinsic INTRINSIC_ROTR = if { "INTRINSIC_ROTR" break }
        $intrinsic INTRINSIC_ROTL = if { "INTRINSIC_ROTL" break }
        $intrinsic INTRINSIC_MEM_GROW = if { "INTRINSIC_MEM_GROW" break }
        $intrinsic INTRINSIC_MEM_COPY = if { "INTRINSIC_MEM_COPY" break }
        $intrinsic INTRINSIC_FLIP = if { "INTRINSIC_FLIP" break }

        2 "INVALID INTRINSIC " IO:write-all IO:check
        $intrinsic IO:print
        1 CORE:exit
    }
}

fn WORD_CALL() -> i32 { 1 }
fn WORD_NUMBER() -> i32 { 5 }
fn WORD_INTRINSIC() -> i32 { 6 }
fn WORD_IF() -> i32 { 7 }
fn WORD_LOOP() -> i32 { 8 }
fn WORD_BREAK() -> i32 { 9 }
fn WORD_STRING() -> i32 { 10 }
fn WORD_FIELD() -> i32 { 11 }
fn WORD_CAST() -> i32 { 12 }
fn WORD_DEREF() -> i32 { 13 }
fn WORD_GET_GLOBAL() -> i32 { 14 }
fn WORD_SET() -> i32 { 15 }
fn WORD_GET_REF() -> i32 { 16 }
fn WORD_GET_LOCAL() -> i32 { 17 }
fn WORD_LOAD() -> i32 { 18 }
fn WORD_SIZEOF() -> i32 { 19 }
fn WORD_STORE() -> i32 { 20 }
fn WORD_STORE_GLOBAL() -> i32 { 21 }
fn WORD_INIT_LOCAL() -> i32 { 22 }
fn WORD_ANNOTATION() -> i32 { 23 }
fn WORD_ARRAY_WRITE() -> i32 { 24 }
fn WORD_ARRAY_READ() -> i32 { 25 }
fn WORD_ARRAY_REF() -> i32 { 26 }
fn WORD_BLOCK() -> i32 { 27 }
fn WORD_ARRAY_INIT() -> i32 { 28 }
fn WORD_ARRAY_INIT_ZERO() -> i32 { 29 }
fn WORD_CALL_INDIRECT() -> i32 { 30 }
fn WORD_REF_FUNCTION() -> i32 { 31 }

fn word-ty-name(ty: i32) -> .i32, i32 {
    loop {
        $ty WORD_CALL = if { "WORD_CALL" break }
        $ty WORD_NUMBER = if { "WORD_NUMBER" break }
        $ty WORD_INTRINSIC = if { "WORD_INTRINSIC" break }
        $ty WORD_IF = if { "WORD_IF" break }
        $ty WORD_LOOP = if { "WORD_LOOP" break }
        $ty WORD_BREAK = if { "WORD_BREAK" break }
        $ty WORD_STRING = if { "WORD_STRING" break }
        $ty WORD_FIELD = if { "WORD_FIELD" break }
        $ty WORD_CAST = if { "WORD_CAST" break }
        $ty WORD_DEREF = if { "WORD_DEREF" break }
        $ty WORD_GET_GLOBAL = if { "WORD_GET_GLOBAL" break }
        $ty WORD_SET = if { "WORD_SET" break }
        $ty WORD_GET_REF = if { "WORD_GET_REF" break }
        $ty WORD_GET_LOCAL = if { "WORD_GET_LOCAL" break }
        $ty WORD_LOAD = if { "WORD_LOAD" break }
        $ty WORD_SIZEOF = if { "WORD_SIZEOF" break }
        $ty WORD_STORE = if { "WORD_STORE" break }
        $ty WORD_STORE_GLOBAL = if { "WORD_STORE_GLOBAL" break }
        $ty WORD_INIT_LOCAL = if { "WORD_INIT_LOCAL" break }
        $ty WORD_ANNOTATION = if { "WORD_ANNOTATION" break }
        $ty WORD_ARRAY_WRITE = if { "WORD_ARRAY_WRITE" break }
        $ty WORD_ARRAY_READ = if { "WORD_ARRAY_READ" break }
        $ty WORD_ARRAY_REF = if { "WORD_ARRAY_REF" break }
        $ty WORD_BLOCK = if { "WORD_BLOCK" break }
        $ty WORD_ARRAY_INIT = if { "WORD_ARRAY_INIT" break }
        $ty WORD_ARRAY_INIT_ZERO = if { "WORD_ARRAY_INIT_ZERO" break }
        $ty WORD_CALL_INDIRECT = if { "WORD_CALL_INDIRECT" break }
        $ty WORD_REF_FUNCTION = if { "WORD_REF_FUNCTION" break }
        "INVALID WORD TY" break
    }
}

fn TYPE_I32() -> i32 { 1 }
fn TYPE_I64() -> i32 { 2 }
fn TYPE_BOOL() -> i32 { 3 }
fn TYPE_PTR() -> i32 { 4 }
fn TYPE_STRUCT() -> i32 { 5 }
fn TYPE_ARRAY() -> i32 { 6 }
fn TYPE_GENERIC() -> i32 { 7 }
fn TYPE_FUNCTION() -> i32 { 8 }

fn type-ty-name(ty: i32) -> .i32, i32 {
    loop {
        $ty TYPE_I32 = if { "TYPE_I32" break }
        $ty TYPE_I64 = if { "TYPE_I64" break }
        $ty TYPE_BOOL = if { "TYPE_BOOL" break }
        $ty TYPE_PTR = if { "TYPE_PTR" break }
        $ty TYPE_STRUCT = if { "TYPE_STRUCT" break }
        $ty TYPE_ARRAY = if { "TYPE_ARRAY" break }
        $ty TYPE_GENERIC = if { "TYPE_GENERIC" break }
        $ty TYPE_FUNCTION = if { "TYPE_FUNCTION" break }
        "invalid TYPE TY" break
    }
}

struct Type {
    ty: i32
    // for TYPE_PTR, TYPE_ARRAY
    child: .Type
    // for TYPE_STRUCT
    ident: .L:Token
    module: .L:Token
    struc: .Struct
    generics: .Types
    // FOR TYPE_ARRAY
    length: i32
    // FOR TYPE_GENERIC, index into the generics of the function
    generic: i32
    // FOR TYPE_FUNCTION. 
    function: FunctionPtr
}
fn Type-size(self: .Type, generics: .Types) -> i32 {
    loop {
        $self.ty TYPE_STRUCT = if { 
            $self.struc $self.generics Struct-size break
        }
        $self.ty TYPE_ARRAY = if {
            $self.child $generics Type-size $self.length * break
        }
        $self.ty TYPE_GENERIC = if {
            $generics $self.generic Types-get @concrete-type
            $concrete-type.ty TYPE_GENERIC = if {
                2 "Type-size generics must all be concrete types!\n" IO:write-all IO:check
                2 $generics Types-print
                2 IO:newline
                0 0 / drop
            }
            $generics $self.generic Types-get $generics Type-size break
        }
        4 break
    }
}
fn Type-eq(a: .Type, b: .Type) -> bool {
    block {
        $a $b = if { 0 0 = break }
        $a.ty $b.ty /= if { 0 1 = break }
        $a.ty TYPE_PTR = if {
            $a Type-child $b Type-child Type-eq break
        }
        $a.ty TYPE_STRUCT = if {
            $a.struc $b.struc Struct-eq break
        }
        $a.ty TYPE_ARRAY = if {
            $a Type-child $b Type-child Type-eq 
            $a.length $b.length = and
            break
        }
        $a.ty TYPE_FUNCTION = if {
            $a.function.args $b.function.args Types-eq
            $a.function.rets $b.function.rets Types-eq 
            and break
        }
        0 0 =
    }
}

fn Type-new(arena: .Arena:Arena, ty: i32) -> .Type {
    $arena Arena:alloc<Type> @self
    $ty #self.ty
    0 !.Type #self.child
    0 !.Types #self.generics
    $self
}
fn Type-clone(arena: .Arena:Arena, self: .Type) -> .Type {
    $arena Arena:alloc<Type> @new
    $self $new 1 CORE:copy<Type>
    $self.ty TYPE_STRUCT = if {
        $arena $self.generics Types-clone #new.generics
    }
    $new
}
fn Type-new-int32(arena: .Arena:Arena) -> .Type {
    $arena TYPE_I32 Type-new
}
fn Type-new-int64(arena: .Arena:Arena) -> .Type {
    $arena TYPE_I64 Type-new
}
fn Type-new-boolean(arena: .Arena:Arena) -> .Type {
    $arena TYPE_BOOL Type-new
}
fn Type-new-ptr(arena: .Arena:Arena, child: .Type) -> .Type {
    $arena TYPE_PTR Type-new @self
    $child !.Type #self.child
    0 !.Types #self.generics
    $self
}
fn Type-new-struc(arena: .Arena:Arena, module: .L:Token, ident: .L:Token, generics: .Types) -> .Type {
    $arena TYPE_STRUCT Type-new @self
    $module #self.module
    $ident #self.ident
    $generics #self.generics
    0 !.Struct #self.struc
    $self
}
fn Type-new-array(arena: .Arena:Arena, type: .Type, length: i32) -> .Type {
    $arena TYPE_ARRAY Type-new @self
    $type #self.child
    $length #self.length
    0 !.Types #self.generics
    $self
}
fn Type-new-function(arena: .Arena:Arena, args: .Types, rets: .Types) -> .Type {
    $arena TYPE_FUNCTION Type-new @self
    $args #self.function.args
    $rets #self.function.rets
    $self
}
fn Type-set-struc(self: .Type, struc: .Struct) {
    $struc #self.struc
}
fn Type-module(self: .Type) -> .L:Token {
    $self.module
}
fn Type-ident(self: .Type) -> .L:Token {
    $self.ident
}
fn Type-struc(self: .Type) -> .Struct {
    $self.struc
}
fn Type-ty(self: .Type) -> i32 {
    $self.ty
}
fn Type-child(self: .Type) -> .Type {
    $self.child
}

fn Type-apply-generics(arena: .Arena:Arena, self: .Type, generics: .Types, module: .M:Module) -> .Type, bool { block {
    $self.ty TYPE_PTR = if {
        $arena $self Type-child $generics $module Type-apply-generics if {
            $arena flip Type-new-ptr $arena flip &module.types flip CU:push-temp-type 1 1 = break
        } else {
            drop $self 0 1 = break
        }
    }
    $self.ty TYPE_ARRAY = if {
        $arena $self Type-child $generics $module Type-apply-generics if {
            $arena flip $self.length Type-new-array $arena flip &module.types flip CU:push-temp-type 1 1 = break 
        } else {
            drop $self 0 1 = break
        }
    }
    $self.ty TYPE_STRUCT = if {
        $arena $self.generics $generics $module Types-apply-generics if { 
            $arena $self.module $self.ident $self.generics Type-new-struc $arena flip &module.types flip CU:push-temp-type @new
            #new.generics
            $arena $self.struc $new.generics $module Struct-apply-generics if { #new.struc } else { drop }
            $new 1 1 = break
        } else {
            drop
            $arena $self.struc $self.generics $module Struct-apply-generics if {
                $arena $self.module $self.ident $self.generics Type-new-struc $arena flip &module.types flip CU:push-temp-type @new
                #new.struc
                $new 1 1 = break
            } else {
                drop $self 0 1 = break
            }
        } 
    }
    $self.ty TYPE_FUNCTION = if {
        $arena
        $arena $self.function.args $generics $module Types-apply-generics @new-args
        $arena $self.function.rets $generics $module Types-apply-generics @new-rets 
        $new-args $new-rets or if {
            $new-rets if { } else { drop $self.function.rets }
            flip
            $new-args if { } else { drop $self.function.args }
            flip
            Type-new-function $arena flip &module.types flip CU:push-temp-type
            1 1 = break
        } else { drop drop drop $self 0 1 = break }
    }
    $self.ty TYPE_GENERIC = if {
        $generics $self.generic Types-get 1 1 = break
    }
    $self 0 1 = break
} }

// argument `generics` is optional/null
fn Type-format(formatter: .FMT:Formatter, self: .Type) { block {
    $self Type-ty TYPE_I32 = if { $formatter "i32" FMT:Formatter-write break }
    $self Type-ty TYPE_I64 = if { $formatter "i64" FMT:Formatter-write break }
    $self Type-ty TYPE_BOOL = if { $formatter "bool" FMT:Formatter-write break }
    $self Type-ty TYPE_PTR = if { 
        $formatter "." FMT:Formatter-write
        $formatter $self Type-child Type-format
        break
    }
    $self Type-ty TYPE_STRUCT = if {
        $self.module !i32 0 /= if {
            $formatter $self.module L:Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
            $formatter ":" FMT:Formatter-write
        }
        $self Type-struc 0 !.Struct /= if {
            $formatter $self Type-struc Struct-ident L:Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
        } else {
            $formatter $self.ident L:Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
        }
        $self.generics 0 !.Types /= if {
            $self.generics Types-len 0 /= if {
                $formatter "<" FMT:Formatter-write
                0 @i
                loop {
                    $self.generics Types-len $i = if { break }
                    $formatter $self.generics $i Types-get Type-format
                    $i 1 + #i
                    $self.generics Types-len $i /= if {
                        $formatter ", " FMT:Formatter-write
                    }
                }
                $formatter ">" FMT:Formatter-write
            }
        }
        break
    }
    $self Type-ty TYPE_ARRAY = if {
        $formatter "[" FMT:Formatter-write
        $formatter $self.child Type-format
        $formatter ": " FMT:Formatter-write
        $self.length $formatter U:i32-format
        $formatter "]" FMT:Formatter-write
        break
    }
    $self Type-ty TYPE_GENERIC = if {
        $formatter $self.ident L:Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
        break
    }
    $self Type-ty TYPE_FUNCTION = if {
        0 @i
        $formatter "(" FMT:Formatter-write
        loop {
            $self.function.args Types-len $i = if { break } 
            $i 0 /= if {
                $formatter ", " FMT:Formatter-write
            }
            $formatter $self.function.args $i Types-get Type-format
            $i 1 + #i
        }

        $formatter " -> " FMT:Formatter-write

        0 #i
        loop {
            $self.function.rets Types-len $i = if { break } 
            $i 0 /= if {
                $formatter ", " FMT:Formatter-write
            }
            $formatter $self.function.rets $i Types-get Type-format
            $i 1 + #i
        }
        $formatter ")" FMT:Formatter-write
        break
    }
    2 "Type-format unhandled Type-ty: " IO:write-all IO:check
    2 $self Type-ty type-ty-name IO:write-all IO:check
    2 IO:newline
    0 0 / drop
    1 CORE:exit
} }
fn Type-print(fd: i32, self: .Type) {
    $fd \Type-format $self FMT:print-it<Type>
}
fn Type-is-generic(self: .Type) -> bool { block {
    $self Type-ty TYPE_I32 = if { 0 1 = break }
    $self Type-ty TYPE_I64 = if { 0 1 = break }
    $self Type-ty TYPE_BOOL = if { 0 1 = break }
    $self Type-ty TYPE_PTR = if { $self.child Type-is-generic break }
    $self Type-ty TYPE_STRUCT = if { $self.generics Types-is-generic break }
    $self Type-ty TYPE_ARRAY = if { $self.child Type-is-generic break }
    $self Type-ty TYPE_GENERIC = if { 1 1 = break }
    $self Type-ty TYPE_FUNCTION = if { $self.function.args Types-is-generic $self.function.rets Types-is-generic or break }
    2 "Type-is-generic unhandled Type-ty: " IO:write-all IO:check
    2 $self Type-ty type-ty-name IO:write-all IO:check
    2 IO:newline
    0 0 / drop
    1 CORE:exit
    0 1 = break
} }

struct Types {
    inner: Array:Array<.Type>
    min-size: i32
}
fn Types-new(arena: .Arena:Arena) -> .Types {
    $arena Arena:alloc<Types> @self
    Array:new<.Type> #self.inner
    $self
}
fn Types-reset-min(self: .Types) {
    $self Types-len #self.min-size
}
fn Types-min(self: .Types) -> i32 {
    $self.min-size
}
fn Types-clone-container(arena: .Arena:Arena, self: .Types) -> .Types {
    $arena Arena:alloc<Types> @new
    $arena &self.inner Array:clone<.Type> #new.inner
    $self Types-min #new.min-size
    $new
}
fn Types-push(arena: .Arena:Arena, self: .Types, f: .Type) {
    $arena &self.inner $f Array:push<.Type>
}
fn Types-pop(self: .Types) -> .Type {
    &self.inner Array:pop<.Type>
    $self Types-min $self Types-len CORE:min #self.min-size
}
fn Types-clone(arena: .Arena:Arena, self: .Types) -> .Types {
    $arena $self 0 0 Types-clone-slice
}
fn Types-clone-slice(arena: .Arena:Arena, self: .Types, start: i32, end: i32) -> .Types {
    $arena Types-new @new
    loop {
        $start $end = if { break }
        $arena $new $arena $self $start Types-get Type-clone Types-push
        $start 1 + #start
    }
    $new
}
fn Types-len(self: .Types) -> i32 {
    $self.inner.len
}
fn Types-get(self: .Types, index: i32) -> .Type {
    &self.inner $index Array:get<.Type> ~
}
fn Types-get-ref(self: .Types, index: i32) -> ..Type {
    &self.inner $index Array:get<.Type>
}
// argument `generics` is optional/null
fn Types-format(formatter: .FMT:Formatter, self: .Types) {
    local i: i32
    0 $self Types-len = if {
        $formatter "[]" FMT:Formatter-write
    } else {
        $formatter "[" FMT:Formatter-write
        loop {
            $i $self Types-len = if { break }
            $formatter $self $i Types-get Type-format
            $i 1 + $self Types-len lt if {
                $formatter ", " FMT:Formatter-write
            }
            $i 1 + #i
        }
        $formatter "]" FMT:Formatter-write
    }
}
fn Types-apply-generics(arena: .Arena:Arena, self: .Types, generics: .Types, module: .M:Module) -> .Types, bool {
    $self Types-len 0 = if { $self 0 1 = } else {
        $arena Types-new @new
        0 1 = @use-new
        0 @i
        loop {
            $i $self Types-len = if { break }
            $self $i Types-get @type
            $arena $arena $type $generics $module Type-apply-generics if {
                1 1 = #use-new
                $new flip Types-push
            } else {
                drop
                $new $type Types-push
            }
            $i 1 + #i
        }
        $use-new if {
            $arena &module.types-types $new Array:push<.Types>
            $new
        } else { $self }
        $use-new
    }
}
fn Types-is-generic(self: .Types) -> bool {
    0 @i
    loop {
        $i $self Types-len = if { 0 1 = break }
        $self $i Types-get Type-is-generic if { 1 1 = break }
        $i 1 + #i
    }
}

fn Types-print(fd: i32, self: .Types) {
    $fd FMT:Formatter-to-fd @formatter
    &formatter $self Types-format
}
fn Types-last(self: .Types) -> .Type {
    $self $self Types-len 1 - Types-get
}
fn Types-eq(self: .Types, other: .Types) -> bool { block {
    0 @i
    $self Types-len $other Types-len /= if { 0 1 = break }
    loop {
        $i $self Types-len =
        $i $other Types-len = or if { 
            0 0 = break 
        }
        $self $i Types-get $other $i Types-get Type-eq not if {
            0 1 = break
        }
        $i 1 + #i
    }
} }
fn Types-eq-by-size(self: .Types, other: .Types) -> bool {
    0 @i
    loop {
        $i $self Types-len = 
        $i $other Types-len = or if { 0 0 = break }
        $self $i Types-get 0 !.Types Type-size 
        $other $i Types-get 0 !.Types Type-size /= if {
            0 1 = break
        }
        $i 1 + #i
    }
}

struct FunctionPtr {
    args: .Types
    rets: .Types
}

struct If {
    token: .L:Token
    body: Array:Array<Word>
    has-el: bool
    el: Array:Array<Word>
    params: .Types
    rets: .Types
    locals: Locals
}
fn If-new(token: .L:Token, body: Array:Array<Word>) -> If {
    local self: If
    $token #self.token
    $body #self.body
    0 1 = #self.has-el
    0 !.Types #self.params
    0 !.Types #self.rets
    Locals-new #self.locals
    $self
}
fn If-new-with-el(token: .L:Token, body: Array:Array<Word>, el: Array:Array<Word>) -> If {
    local self: If
    $token #self.token
    $body #self.body
    0 0 = #self.has-el
    $el #self.el
    0 !.Types #self.params
    0 !.Types #self.rets
    Locals-new #self.locals
    $self
}
fn If-body(self: .If) -> .Array:Array<Word> {
    &self.body
}
fn If-el(self: .If) -> .Array:Array<Word> {
    &self.el
}
fn If-params(self: .If) -> .Types {
    $self.params
}
fn If-set-params(self: .If, params: .Types) {
    $params #self.params
}

struct Loop {
    token: .L:Token
    body: Array:Array<Word>
    rets: .Types
    locals: Locals
}
fn Loop-new(token: .L:Token, body: Array:Array<Word>) -> Loop {
    local self: Loop
    $token #self.token
    $body #self.body
    Locals-new #self.locals
    $self
}

struct Block {
    token: .L:Token
    body: Array:Array<Word>
    rets: .Types
    locals: Locals
}
fn Block-new(token: .L:Token, body: Array:Array<Word>) -> Block {
    local self: Block
    $token #self.token
    $body #self.body
    Locals-new #self.locals
    $self
}

struct Word {
    ty: i32
    token: .L:Token
    ident: .STR:Str
    qualifier: .STR:Str
    number: i32
    intrinsic: i32
    addr: i32
    size: i32
    module: i32
    fields: Array:Array<.L:Token>
    lop: Loop
    blok: Block
    rets: .Types
    args: .Types
    generics: .Types
    instance-index: i32
    iff: If
    type: .Type
    src-type: .Type
    string: STR:Str
    function: .Function
    ext: .Extern
    checked: bool
    shadow-id: i32
    scope-id: i32
    recursive-call: bool
}
fn Word-new-uninit() -> Word {
    local self: Word
    $self
}
fn Word-new(ty: i32, token: .L:Token) -> Word {
    local self: Word
    $ty #self.ty
    $token #self.token
    0 1 = #self.checked
    0 !.STR:Str #self.qualifier
    0 #self.shadow-id
    0 #self.scope-id
    0 !.Types #self.generics
    0 !.Function #self.function
    0 !.Extern #self.ext
    0 1 = #self.recursive-call
    0 #self.instance-index
    0 !.Types #self.rets
    0 !.Types #self.args
    $self
}
fn Word-new-annotation(token: .L:Token, type: .Type) -> Word {
    WORD_ANNOTATION $token Word-new @word
    $type #word.type
    $word
}
fn Word-mark-checked(self: .Word) {
    1 1 = #self.checked
}
fn Word-location(self: .Word) -> .i32, i32, i32, i32 {
    $self.token L:Token-location
}
fn Word-ty(self: .Word) -> i32 {
    $self.ty
}
fn Word-type(self: .Word) -> .Type {
    $self.type
}
fn Word-iff(self: .Word) -> .If {
    &self.iff
}
fn Word-ident(self: .Word) -> .STR:Str {
    $self.ident
}
fn Word-rets(self: .Word) -> .Types {
    $self.rets
}
fn Word-intrinsic(self: .Word) -> i32 {
    $self.intrinsic
}
fn Word-module(self: .Word) -> i32 {
    $self.module
}

fn LOCAL_ARGUMENT() -> i32 { 1 }
fn LOCAL_LOCAL() -> i32 { 2 }
fn LOCAL_MEMORY() -> i32 { 3 }

fn locl-ty-name(ty: i32) -> .i32, i32 {
    loop {
        $ty LOCAL_ARGUMENT = if { "LOCAL_ARGUMENT" break }
        $ty LOCAL_LOCAL = if { "LOCAL_LOCAL" break }
        $ty LOCAL_MEMORY = if { "LOCAL_MEMORY" break }
        "invalid local ty" break
    }
}

struct Local {
    ident: .L:Token
    type: .Type
    ty: i32
    size: i32
    address: i32
    shadow-id: i32
    scope-id: i32
}
fn Local-new(ty: i32, ident: .L:Token, type: .Type, scope-id: i32, shadow-id: i32) -> .Local {
    sizeof(Local) A:alloc !.Local @self
    $ty #self.ty
    $ident #self.ident
    $type #self.type
    $shadow-id #self.shadow-id
    $scope-id #self.scope-id
    $self
}
fn Local-new-mem(arena: .Arena:Arena, types: .Array:Array<.Type>, ident: .L:Token, type: .Type, size: i32) -> .Local {
    LOCAL_MEMORY $ident $arena $arena $type Type-new-ptr $types flip CU:push-temp-type 0 0 Local-new @self
    $size #self.size
    $self
}
fn Local-ty(self: .Local) -> i32 {
    $self.ty
}
fn Local-ident(self: .Local) -> .L:Token {
    $self.ident
}
fn Local-type(self: .Local) -> .Type {
    $self.type
}
fn Local-free(self: .Local) {
    $self !.i32 A:free
}

struct Locals {
    inner: Array:Array<.Local>
    parent: .Locals
    id: i32
}
fn Locals-new() -> Locals {
    local self: Locals
    Array:new<.Local> #self.inner
    0 !.Locals #self.parent
    0 #self.id
    $self
}
fn Locals-len(self: .Locals) -> i32 {
    $self.inner.len
}
fn Locals-get(self: .Locals, index: i32) -> .Local {
    &self.inner $index Array:get<.Local> ~
}
fn Locals-find(self: .Locals, ident-ptr: .i32, ident-len: i32, search-parents: bool) -> .Local, bool {
    local i: i32
    $self Locals-len 0 /= if {
        $self Locals-len 1 - #i
        loop {
            $self $i Locals-get @locl
            $locl.ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
                $self $i Locals-get 1 1 = break
            }
            // TODO: figure out why this isn't properly type checked
            0 $i = if { 
                $self.parent 0 !.Locals /= $search-parents and if {
                    $self.parent $ident-ptr $ident-len $search-parents Locals-find break
                } else {
                    0 !.Local 0 1 = break 
                }
            }
            $i 1 - #i
        }
    } else { 
        $self.parent 0 !.Locals /= $search-parents and if {
            $self.parent $ident-ptr $ident-len $search-parents Locals-find
        } else {
            0 !.Local 0 1 = 
        }
    }
}
fn Locals-push(arena: .Arena:Arena, self: .Locals, locl: .Local) {
    $arena &self.inner $locl Array:push<.Local>
}
fn Locals-contains-mem-or-struc(self: .Locals) -> bool {
    local i: i32
    loop {
        $i $self Locals-len = if { 0 1 = break }
        $self $i Locals-get Local-ty LOCAL_MEMORY =
        $self $i Locals-get Local-type Type-ty TYPE_STRUCT = or if {
            0 0 = break 
        }
        $i 1 + #i
    }
}

struct Generic {
    ident: .L:Token
}
fn Generic-new(ident: .L:Token) -> Generic {
    local self: Generic
    $ident #self.ident
    $self
}
fn Generic-format(formatter: .FMT:Formatter, self: Generic) {
    $formatter $self.ident L:Token-format
}

struct Generics {
    ptr: .Generic
    cap: i32
    len: i32
}

fn Generics-new() -> Generics {
    local self: Generics
    0 !.Generic #self.ptr
    0 #self.len
    0 #self.cap
    $self
}
fn Generics-len(self: .Generics) -> i32 {
    $self.len
}
fn Generics-get(self: .Generics, index: i32) -> .Generic {
    $index $self.len ge if {
        2 "Generics: Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index sizeof(Generic) * +
}
fn Generics-push(self: .Generics, word: Generic) {
    local new-buf: .Generic
    local size: i32
    local dst-ptr: .Generic
    $self.len 1 + $self.cap le if {
        $self.ptr $self.len sizeof(Generic) * + #dst-ptr
        $word =>dst-ptr
        $self.len 1 + #self.len
    } else {
        $self.cap 2 CORE:max 2 * #size
        $size sizeof(Generic) * A:alloc !.Generic #new-buf
        $self.ptr
        $new-buf
        $self.len
        CORE:copy<Generic>
        $size #self.cap
        $self.len 0 gt if {
            $self.ptr !.i32 A:free
        }
        $new-buf #self.ptr
        $self $word Generics-push
    }
}
fn Generics-pop(self: .Generics) -> Generic {
    $self.len 0 = if {
        2 "Cannot pop from empty Generics" IO:write-all IO:check
        1 CORE:exit
    }
    $self $self.len 1 - Generics-get ~
    $self.len 1 - #self.len
}
fn Generics-contains(self: .Generics, ident: .STR:Str) -> i32, bool {
    0 @i
    loop {
        $i $self Generics-len = if { 0 0 1 = break }
        $self $i Generics-get @generic
        $generic.ident L:Token-lexeme $ident STR:Str-eq if {
            $i 0 0 = break
        }
        $i 1 + #i
    }
}
fn Generics-format(formatter: .FMT:Formatter, self: .Generics) {
    local i: i32
    0 $self Generics-len = if {
        $formatter "[]" FMT:Formatter-write
    } else {
        $formatter "[" FMT:Formatter-write
        loop {
            $i $self Generics-len = if { break }
            $formatter $self $i Generics-get ~ Generic-format
            $i 1 + $self Generics-len lt if {
                $formatter ", " FMT:Formatter-write
            }
            $i 1 + #i
        }
        $formatter "]" FMT:Formatter-write
    }
}
fn Generics-print(fd: i32, self: .Generics) {
    $fd \Generics-format $self FMT:print-it<Generics>
}

struct Instance {
    generics: .Types
    body: Array:Array<Word>
}
fn Instance-new(generics: .Types, body: Array:Array<Word>) -> Instance {
    local self: Instance
    $generics #self.generics
    $body #self.body
    $self
}

struct Instances {
    ptr: .Instance
    len: i32
    cap: i32
}
fn Instances-new() -> .Instances {
    sizeof(Instances) A:alloc !.Instances @self
    0 #self.len
    0 #self.cap
    $self
}
fn Instances-len(self: .Instances) -> i32 {
    $self.len
}
fn Instances-get(self: .Instances, index: i32) -> .Instance {
    $index $self.len ge if {
        2 "Instances: Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index sizeof(Instance) * +
}
fn Instances-push(self: .Instances, instance: Instance) {
    local new-buf: .Instance
    local size: i32
    local dst-ptr: .Instance
    $self.len 1 + $self.cap le if {
        $self.ptr $self.len sizeof(Instance) * + #dst-ptr
        $instance =>dst-ptr
        $self.len 1 + #self.len
    } else {
        $self.cap 2 CORE:max 2 * #size
        $size sizeof(Instance) * A:alloc !.Instance #new-buf
        $self.ptr
        $new-buf
        $self.len
        CORE:copy<Instance>
        $size #self.cap
        $self.len 0 gt if {
            $self.ptr !.i32 A:free
        }
        $new-buf #self.ptr
        $self $instance Instances-push
    }
}
fn Instances-free(self: .Instances) {
    $self.cap 0 gt if { $self.ptr !.i32 A:free }
    $self !.i32 A:free
}
fn Instances-contains-types-by-size(self: .Instances, types: .Types) -> i32, bool {
    0 @i
    loop {
        $self Instances-len $i = if { 0 0 1 = break }
        $self $i Instances-get .generics ~ $types Types-eq-by-size if {
            $i 0 0 = break
        }
        $i 1 + #i
    }
}

struct Function {
    ident: .L:Token
    export: .L:Token
    ret: .Types
    locals: Locals
    body: Array:Array<Word>
    diverges: bool
    reachable: bool
    generics: Generics
    generics-types: .Types
    instances: .Instances
    table-index: i32
}
fn Function-new(
    arena: .Arena:Arena,
    ident: .L:Token, 
    export: .L:Token, 
    generics: Generics,
    ret: .Types,
    locals: Locals,
    body: Array:Array<Word>
) -> .Function {
    local self: .Function
    sizeof(Function) A:alloc !.Function #self
    $ident #self.ident
    $export #self.export
    $generics #self.generics
    $ret #self.ret
    $locals #self.locals
    $body #self.body
    0 1 = #self.diverges
    0 #self.table-index
    Instances-new #self.instances
    $arena Types-new #self.generics-types 
    $self
}
fn Function-free(self: .Function) {
    $self.instances Instances-free
    $self !.i32 A:free
}
fn Function-gather-generics-types(arena: .Arena:Arena, self: .Function) { // should be called after resolving
    0 @i
    loop {
        $i &self.locals Locals-len = if { break }
        &self.locals $i Locals-get @locl
        $locl.type.ty TYPE_GENERIC = if {
            $arena $self.generics-types $locl.type Types-push
        }
        $i 1 + #i
    }
}
fn Function-rets(self: .Function) -> .Types {
    $self.ret
}
fn Function-locals(self: .Function) -> .Locals {
    &self.locals
}
fn Function-body(self: .Function) -> .Array:Array<Word> {
    &self.body
}
fn Function-ident(self: .Function) -> .L:Token {
    $self.ident
}
fn Function-diverges(self: .Function) -> bool {
    $self.diverges
}
fn Function-has-mem-or-struc-locl(self: .Function) -> bool {
    $self Function-locals Locals-contains-mem-or-struc
}
fn Function-mark-reachable(self: .Function) {
    1 1 = #self.reachable
}

struct Extern {
    module: .L:Token
    name: .L:Token
    ident: .L:Token
    params: Locals
    rets: .Types
    reachable: bool
    table-index: i32
}
fn Extern-new(
    module: .L:Token,
    name: .L:Token,
    ident: .L:Token,
    params: Locals,
    rets: .Types
) -> .Extern {
    local self: .Extern
    sizeof(Extern) A:alloc !.Extern #self
    $module #self.module
    $name #self.name
    $ident #self.ident
    $params #self.params
    $rets #self.rets
    0 1 = #self.reachable
    0 #self.table-index
    $self
}
fn Extern-module(self: .Extern) -> .L:Token {
    $self.module
}
fn Extern-name(self: .Extern) -> .L:Token {
    $self.name
}
fn Extern-rets(self: .Extern) -> .Types {
    $self.rets
}
fn Extern-parameters(self: .Extern) -> .Locals {
    &self.params
}
fn Extern-ident(self: .Extern) -> .L:Token {
    $self.ident
}
fn Extern-free(self: .Extern) {
    $self !.i32 A:free
}

struct Import {
    path: .L:Token
    ident: .L:Token
}
fn Import-new(path: .L:Token, ident: .L:Token) -> .Import {
    local self: .Import
    sizeof(Import) A:alloc !.Import #self
    $path #self.path
    $ident #self.ident
    $self
}
fn Import-free(self: .Import) {
    $self !.i32 A:free
}
fn Import-path(self: .Import) -> .L:Token {
    $self.path
}
fn Import-ident(self: .Import) -> .L:Token {
    $self.ident
}
fn Import-path-content(self: .Import) -> .i32, i32 {
    $self Import-path L:Token-lexeme ~ 1 STR:Str-drop 1 STR:Str-drop-end STR:Str-unpack 
}

struct Field {
    ident: .L:Token
    type: .Type
}
fn Field-new(ident: .L:Token, type: .Type) -> Field {
    local self: Field
    $ident #self.ident
    $type #self.type
    $self
}
fn Field-ident(self: .Field) -> .L:Token {
    $self.ident
}
fn Field-type(self: .Field) -> .Type {
    $self.type
}
fn Field-apply-generics(arena: .Arena:Arena, self: .Field, generics: .Types, module: .M:Module) -> Field, bool {
    $arena $self.type $generics $module Type-apply-generics if {
        $self.ident flip Field-new 1 1 =
    } else { drop $self ~ 0 1 = }
}
fn Field-eq(self: .Field, other: .Field) -> bool { block {
    $self $other = if { 1 1 = break }
    $self.ident $other.ident /= if { 0 1 = break }
    $self.type $other.type Type-eq
} }
fn Field-format(formatter: .FMT:Formatter, self: .Field) {
    $formatter $self.ident L:Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
    $formatter ": " FMT:Formatter-write
    $formatter $self.type Type-format
}
fn Field-print(fd: i32, self: .Field) {
    $fd \Field-format $self FMT:print-it<Field>
}

fn Fields-eq(self: .Array:Array<Field>, other: .Array:Array<Field>) -> bool { block {
    $self $other = if { 1 1 = break }
    $self.len $other.len /= if { 0 1 = break }
    0 @i
    loop {
        $i $self.len = if { 1 1 = break }
        $self $i Array:get<Field>
        $other $i Array:get<Field> Field-eq not if { 0 1 = break }
        $i 1 + #i
    }
} }
fn Fields-apply-generics(arena: .Arena:Arena, self: .Array:Array<Field>, generics: .Types, module: .M:Module) -> Array:Array<Field>, bool {
    Array:new<Field> @new
    0 1 = @use-new
    0 @i
    loop {
        $i $self.len = if { break }
        $self $i Array:get<Field> @field
        $arena $arena $field $generics $module Field-apply-generics if {
            1 1 = #use-new
            &new flip Array:push<Field>
        } else {
            drop &new $field ~ Array:push<Field>
        }
        $i 1 + #i
    }
    $use-new if { $new 1 1 = } else { $self ~ 1 0 = }
}

struct Struct {
    ident: .L:Token
    fields: Array:Array<Field>
    generics: Generics
    owns-generics: bool
    generics-being-applied: bool
}
fn Struct-new(ident: .L:Token, fields: Array:Array<Field>, generics: Generics, owns-generics: bool) -> .Struct {
    sizeof(Struct) A:alloc !.Struct @self
    $ident #self.ident
    $fields #self.fields
    $generics #self.generics
    $owns-generics #self.owns-generics
    0 1 = #self.generics-being-applied
    $self
}
fn Struct-free(self: .Struct) {
    $self !.i32 A:free
}
fn Struct-ident(self: .Struct) -> .L:Token {
    $self.ident
}
fn Struct-fields(self: .Struct) -> .Array:Array<Field> {
    &self.fields
}
fn Struct-find-field(self: .Struct, ident-ptr: .i32, ident-len: i32) -> .Field, bool {
    $self Struct-fields @fields
    0 @i
    loop {
        $i $fields.len = if { 0 !.Field 0 1 = break }
        $fields $i Array:get<Field> Field-ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
            $fields $i Array:get<Field>
            0 0 = break
        }
        $i 1 + #i
    }
}
fn Struct-find-field-with-offset(self: .Struct, ident-ptr: .i32, ident-len: i32, generics: .Types) -> .Field, i32, bool {
    $self Struct-fields @fields
    0 @offset
    0 @i
    loop {
        $i $fields.len = if { 0 !.Field 0 0 1 = break }
        $fields $i Array:get<Field> Field-ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
            $fields $i Array:get<Field>
            $offset 0 0 = break
        }
        $offset $fields $i Array:get<Field> Field-type $generics Type-size + #offset
        $i 1 + #i
    }
}
fn Struct-size(self: .Struct, generics: .Types) -> i32 {
    0 @size
    0 @i
    loop {
        $i $self Struct-fields .len ~ = if { break }
        $size 
        $self Struct-fields $i Array:get<Field> Field-type $generics Type-size
        + #size
        $i 1 + #i
    }
    $size
}
fn Struct-eq(self: .Struct, other: .Struct) -> bool { 
    block {
        $self $other = if { 1 1 = break }
        $self.ident $other.ident /= if { 0 1 = break }
        &self.fields &other.fields Fields-eq
    }
}
fn Struct-apply-generics(arena: .Arena:Arena, self: .Struct, generics: .Types, module: .M:Module) -> .Struct, bool {
    $self.generics-being-applied not &self.generics Generics-len 0 /= and if {
        1 1 = #self.generics-being-applied
        $arena &self.fields $generics $module Fields-apply-generics if {
            $self.ident flip $self.generics 0 1 = Struct-new @new
            $arena &module.structs $new Array:push<.Struct>
            $new 1 1 =
        } else {
            drop
            $self 0 1 =
        }
        1 0 = #self.generics-being-applied
    } else {
        $self 0 1 =
    }
}

fn TOP_ITEM_FN() -> i32 { 1 }
fn TOP_ITEM_MEM() -> i32 { 2 }
fn TOP_ITEM_IMPORT() -> i32 { 3 }
fn TOP_ITEM_STRUCT() -> i32 { 4 }
fn TOP_ITEM_EXT() -> i32 { 5 }

fn top-item-ty-name(ty: i32) -> .i32, i32 {
    loop {
        $ty TOP_ITEM_FN = if { "TOP_ITEM_FN" break }
        $ty TOP_ITEM_MEM = if { "TOP_ITEM_MEM" break }
        $ty TOP_ITEM_IMPORT = if { "TOP_ITEM_IMPORT" break }
        $ty TOP_ITEM_STRUCT = if { "TOP_ITEM_STRUCT" break }
        $ty TOP_ITEM_EXT = if { "TOP_ITEM_EXT" break }
        "UNVALID TOP_ITEM TY" break
    }
}

struct TopItem {
    ty: i32
    function: .Function
    mem: .Local
    ext: .Extern
    imp: .Import
    struc: .Struct
}
fn TopItem-new(ty: i32) -> .TopItem {
    local self: .TopItem
    sizeof(TopItem) A:alloc !.TopItem #self
    $ty #self.ty
    $self
}
fn TopItem-new-function(f: .Function) -> .TopItem {
    local self: .TopItem
    TOP_ITEM_FN TopItem-new #self
    $f #self.function
    $self
}
fn TopItem-new-mem(mem: .Local) -> .TopItem {
    local self: .TopItem
    TOP_ITEM_MEM TopItem-new #self
    $mem #self.mem
    $self
}
fn TopItem-new-ext(ext: .Extern) -> .TopItem {
    local self: .TopItem
    TOP_ITEM_EXT TopItem-new #self
    $ext #self.ext
    $self
}
fn TopItem-new-imp(imp: .Import) -> .TopItem {
    local self: .TopItem
    TOP_ITEM_IMPORT TopItem-new #self
    $imp  #self.imp
    $self
}
fn TopItem-new-struc(struc: .Struct) -> .TopItem {
    local self: .TopItem
    TOP_ITEM_STRUCT TopItem-new #self
    $struc #self.struc
    $self
}
fn TopItem-ty(self: .TopItem) -> i32 {
    $self.ty
}
fn TopItem-struc(self: .TopItem) -> .Struct {
    $self.struc
}
fn TopItem-function(self: .TopItem) -> .Function {
    $self.function
}
fn TopItem-ext(self: .TopItem) -> .Extern {
    $self.ext
}
fn TopItem-free(self: .TopItem) {
    $self TopItem-ty TOP_ITEM_FN = if {
        $self.function Function-free
    }
    $self TopItem-ty TOP_ITEM_MEM = if {
        $self.mem Local-free
    }
    $self TopItem-ty TOP_ITEM_EXT = if {
        $self.ext Extern-free
    }
    $self TopItem-ty TOP_ITEM_IMPORT = if {
        $self.imp Import-free
    }
    $self TopItem-ty TOP_ITEM_STRUCT = if {
        $self.struc Struct-free
    }
    $self !.i32 A:free
}

struct ModuleImport {
    path: STR:Str
    // used: bool TODO: report unused module imports
}
fn ModuleImport-new(path: STR:Str) -> ModuleImport {
    local self: ModuleImport
    $path #self.path
    // 0 1 = #self.used
    $self
}

struct Imports {
    map: StrMap:StrMap<ModuleImport>
}
fn Imports-new() -> Imports {
    local self: Imports
    StrMap:new<ModuleImport> #self.map
    $self
}
fn Imports-insert(arena: .Arena:Arena, self: .Imports, ident: STR:Str, path-ptr: .i32, path-len: i32) {
    $path-ptr $path-len STR:Str-new @path
    $arena &self.map $ident $path ModuleImport-new StrMap:insert<ModuleImport>
}
fn Imports-get-value(self: .Imports, index: i32) -> .ModuleImport {
    &self.map $index StrMap:get-value<ModuleImport>
}
fn Imports-get(self: .Imports, ident-ptr: .i32, ident-len: i32) -> .ModuleImport, bool {
    &self.map $ident-ptr $ident-len StrMap:get<ModuleImport>
}
fn Imports-len(self: .Imports) -> i32 {
    &self.map StrMap:len<ModuleImport>
}

