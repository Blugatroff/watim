import "../../std/maybe.watim" as Maybe (Maybe(Some, None))
import "../../std/array.watim" as Array (Array)
import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/util.watim" as Util (i32-format)

import "../resolving/type.watim" as Checked (
    ModuleId, ModuleId-format,
    CustomTypeHandle, CustomTypeHandle-eq, CustomTypeHandle-format
)

import "../lexer.watim" as Lexer (Token, Token-format)

struct TypeId {
    index: i32
}
fn TypeId-eq(a: .TypeId, b: .TypeId) -> bool {
    $a.index $b.index =
}
fn TypeId-format(fmt: .Formatter, self: .TypeId) {
    $fmt "(TypeId " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}
fn TypeIds-eq(a: .Array<TypeId>, b: .Array<TypeId>) -> bool {
    \TypeId-eq $a $b Array:eq<TypeId>
}
fn TypeIds-format(fmt: .Formatter, self: .Array<TypeId>) {
    $fmt \TypeId-format $self Array:format<TypeId>
}

struct NamedTypeId {
    name: Token
    type: TypeId
}
fn NamedTypeId-eq(a: .NamedTypeId, b: .NamedTypeId) -> bool {
    &a.type &b.type TypeId-eq
}
fn NamedTypeId-format(fmt: .Formatter, self: .NamedTypeId) {
    $fmt "(NamedTypeId " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type TypeId-format
    $fmt ")" Fmt:write
}

variant Type {
    case Bool
    case I8
    case I32
    case I64
    case Ptr -> TypeId
    case Custom -> CustomTypeHandle
    case Fun -> FunType
    case Tuple -> Array<TypeId>
}
fn Type-eq(a: .Type, b: .Type) -> bool { block {
    $a !.i32 ~ $b !.i32 ~ /= if { // compare tags
        0 1 = break
    }
    $a match {
        case Ptr -> { $b match {
            case Ptr -> { flip TypeId-eq }
            case _ -> { drop drop 0 1 = }
        } }
        case Custom -> { $b match {
            case Custom -> { flip CustomTypeHandle-eq }
            case _ -> { drop drop 0 1 = }
        } }
        case Fun -> { @a $b match {
            case Fun -> {
                @b
                \TypeId-eq &a.parameters &b.parameters Array:eq<TypeId>
                \TypeId-eq &a.returns    &b.returns    Array:eq<TypeId> and
            }
            case _ -> { drop 0 1 = }
        } }
        case Tuple -> { \TypeId-eq flip $b match {
            case Tuple -> { Array:eq<TypeId> }
            case _ -> { drop drop drop 0 1 = }
        } }
        case _ -> { drop 1 1 = }
    }
} }
fn Type-format(fmt: .Formatter, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "Bool" }
        case I8 -> { "I8" }
        case I32 -> { "I32" }
        case I64 -> { "I64" }
        case Ptr -> { $fmt "(Ptr " Fmt:write TypeId-format $fmt ")" Fmt:write break }
        case Custom -> {
            @handle
            "(CustomType " Fmt:write
            $fmt $handle.module.index i32-format
            $fmt " " Fmt:write
            $fmt $handle.index i32-format
            $fmt ")" Fmt:write break
        }
        case Fun -> { FunType-format break }
        case Tuple -> { \TypeId-format flip Array:format<TypeId> break }
    } Fmt:write
} }

variant CustomType {
    case Struct -> Struct
    case Variant -> Variant
}
fn CustomType-eq(a: .CustomType, b: .CustomType) -> bool {
    $a match {
        case Struct -> { $b match {
            case Struct -> { Struct-eq }
            case _ -> { drop drop 0 1 = }
        } }
        case Variant -> { $b match {
            case Variant -> { Variant-eq }
            case _ -> { drop drop 0 1 = }
        } }
    }
}
fn CustomType-format(fmt: .Formatter, self: .CustomType) {
    $fmt $self match {
        case Struct -> { Struct-format }
        case Variant -> { Variant-format }
    }
}
fn CustomType-name(self: .CustomType) -> .Token {
    $self match {
        case Struct -> { .name }
        case Variant -> { .name }
    }
}

struct Struct {
    name: Token
    fields: Array<NamedTypeId>
    sizes-used-for-offset-cache: .[]
    field-offsets: Array<i32>
}
fn Struct-eq(a: .Struct, b: .Struct) -> bool {
    \NamedTypeId-eq &a.fields &b.fields Array:eq<NamedTypeId>
}
fn Struct-format(fmt: .Formatter, self: .Struct) {
    $fmt "(Struct\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "fields=" Fmt:write
    $fmt \NamedTypeId-format &self.fields Array:format-multi-line<NamedTypeId>
    $fmt Fmt:dedent
}

struct VariantCase {
    name: Token
    type: Maybe<TypeId>
}
fn VariantCase-eq(a: .VariantCase, b: .VariantCase) -> bool {
    &a.type match {
        case None -> { &b.type match {
            case None -> { 1 1 = }
            case Some -> { drop 0 1 = }
        } }
        case Some -> { &b.type match {
            case Some -> { TypeId-eq }
            case None -> { drop 0 1 = }
        } }
    }
}
fn VariantCase-format(fmt: .Formatter, self: .VariantCase) {
    $fmt "(VariantCase " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt \TypeId-format &self.type Maybe:format<TypeId>
    $fmt ")" Fmt:write
}

struct Variant {
    name: Token
    cases: Array<VariantCase>
}
fn Variant-eq(a: .Variant, b: .Variant) -> bool {
    \VariantCase-eq &a.cases &b.cases Array:eq<VariantCase>
}
fn Variant-format(fmt: .Formatter, self: .Variant) {
    $fmt "(Variant\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "cases=" Fmt:write
    $fmt \VariantCase-format &self.cases Array:format-multi-line<VariantCase>
    $fmt Fmt:dedent
}

struct FunType {
    parameters: Array<TypeId>
    returns: Array<TypeId>
}
fn FunType-format(fmt: .Formatter, self: .FunType) {
    $fmt "(FunType " Fmt:write
    $fmt \TypeId-format &self.parameters Array:format<TypeId>
    $fmt " " Fmt:write
    $fmt \TypeId-format &self.returns Array:format<TypeId>
    $fmt ")" Fmt:write
}
