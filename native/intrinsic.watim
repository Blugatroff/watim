import "../std/string.watim" as S
import "../std/io.watim" as IO
import "../std/fmt.watim" as FMT
import "../std/dyn-array.watim" as DynArray
import "../std/arena.watim" as Arena

import "./ast.watim" as AST
import "./util.watim" as U

fn check-intrinsic(arena: .Arena:Arena, temp-types: .DynArray:DynArray<.AST:Type>, stack: .AST:Types, word: .AST:Word) -> bool {
    loop {
        $word AST:Word-intrinsic AST:INTRINSIC_EQ = 
        $word AST:Word-intrinsic AST:INTRINSIC_NOT_EQ = or
        if { 
            $arena $temp-types $stack $word check-intrinsic-eq break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_DROP = if {
            $stack $word check-intrinsic-drop break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_NOT = if {
            $stack $word check-intrinsic-not break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_MEM_GROW = if {
            $stack $word check-intrinsic-mem-grow break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_STORE =
        $word AST:Word-intrinsic AST:INTRINSIC_STORE8 = or
        if {
            $stack $word check-intrinsic-store break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_LOAD8 = if {
            $arena $stack $word check-intrinsic-load break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_ADD = 
        $word AST:Word-intrinsic AST:INTRINSIC_SUB = or 
        if {
            $arena $temp-types $stack $word check-intrinsic-add-or-sub break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_GREATER_EQ = 
        $word AST:Word-intrinsic AST:INTRINSIC_GREATER = or
        $word AST:Word-intrinsic AST:INTRINSIC_LESS = or
        $word AST:Word-intrinsic AST:INTRINSIC_LESS_EQ = or
        if {
            $arena $temp-types $stack $word check-compare-intrinsics break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_AND = 
        $word AST:Word-intrinsic AST:INTRINSIC_OR = or
        if {
            $stack $word check-intrinsic-and-or-or break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_FLIP = if {
            $arena $stack $word check-intrinsic-flip break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_MOD = if {
            $stack $word check-intrinsic-mod break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_DIV =
        $word AST:Word-intrinsic AST:INTRINSIC_MUL = or
        if {
            $stack $word check-intrinsic-mod break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_MEM_COPY = if {
            $stack $word check-intrinsic-mem-copy break
        }
        $word AST:Word-intrinsic AST:INTRINSIC_ROTL =
        $word AST:Word-intrinsic AST:INTRINSIC_ROTR = or
        if {
            $stack $word check-intrinsic-rotl break
        }
        1 $word AST:Word-intrinsic AST:intrinsic-name IO:write-all IO:check
        1 "\n" IO:write-all IO:check
        $word AST:Word-location "unhandled intrinsic in check\n" U:abort-with-location
        break
    }
    0 1 =
}
fn report-error(stack: .AST:Types, word: .AST:Word, msg-ptr: .i32, msg-len: i32) {
    S:String-empty @msg
    &msg FMT:Formatter-into-string @formatter
    $word AST:Word-location
    &formatter $msg-ptr $msg-len FMT:Formatter-write
    &formatter 0 !.AST:Types $stack AST:Types-format
    &formatter " " FMT:Formatter-write
    &msg S:String-unpack 
    U:abort-with-location
    $msg S:String-free
}
fn check-intrinsic-rotl(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [i32 | i64, i32] got: " report-error
    }
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I32 = 
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I64 = or
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I32 = and
    not if {
        $stack $word "expected [i32 | i64, i32] got: " report-error
    }
    $stack $stack AST:Types-len 2 - AST:Types-get #word.type
    $stack AST:Types-pop drop
}
fn check-intrinsic-mem-copy(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 3 lt if {
        $stack $word "expected [.i32, .i32, i32] got: " report-error
    }
    // TODO: actually check the types :D
    $stack AST:Types-pop drop
    $stack AST:Types-pop drop
    $stack AST:Types-pop drop
}
fn check-intrinsic-mod(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [i32, i32] got: " report-error
    }
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I32 = 
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I32 = and
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I64 = 
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I64 = and
    or not if {
        $stack $word "expected [i32, i32] got: " report-error
    }
    $stack AST:Types-pop drop
}
fn check-intrinsic-flip(arena: .Arena:Arena, stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 2 lt if {
        $stack $word "expected 2 values on stack got: " report-error
    }
    $arena
    $stack AST:Types-pop
    $stack AST:Types-pop
    flip
    $arena
    flip
    $stack flip AST:Types-push
    $stack flip AST:Types-push
}
fn check-intrinsic-and-or-or(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [bool, bool] or [i32, i32] or [i64, i64] got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_BOOL /= 
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_BOOL /= and
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I32 /= 
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I32 /= and or
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I64 /= 
    $stack $stack AST:Types-len 2 - AST:Types-get AST:Type-ty AST:TYPE_I64 /= and or
    not
    if {
        $stack $word "expected [bool, bool] or [i32, i32] or [i64, i64] got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get #word.type
    $stack AST:Types-pop drop
}
fn check-compare-intrinsics(arena: .Arena:Arena, temp-types: .DynArray:DynArray<.AST:Type>, stack: .AST:Types, word: .AST:Word) {
    local left: .AST:Type
    local right: .AST:Type
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [i32, i32] got: " report-error
    }
    $stack AST:Types-pop #left
    $stack AST:Types-pop #right
    $left AST:Type-ty AST:TYPE_I32 /= 
    $right AST:Type-ty AST:TYPE_I32 /= or if {
        $stack $word "expected a => [a, a] got: " report-error
    }
    $arena $stack $temp-types $arena AST:Type-new-boolean U:push-temp-type2 AST:Types-push
}
fn check-intrinsic-load(arena: .Arena:Arena, stack: .AST:Types, word: .AST:Word) {
    local type: .AST:Type
    $stack AST:Types-len 0 = if {
        $stack $word "expected pointer got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get #type
    $type AST:Type-ty AST:TYPE_PTR /= if {
        $stack $word "expected pointer got: " report-error
    }
    $stack AST:Types-pop drop
    $arena $stack $type AST:Type-child AST:Types-push
}
fn check-intrinsic-store(stack: .AST:Types, word: .AST:Word) {
    local right: .AST:Type
    local left: .AST:Type
    $stack AST:Types-len 2 lt if {
        $stack $word "expected a => [.a, a] got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get #right
    $stack $stack AST:Types-len 2 - AST:Types-get #left
    $left AST:Type-ty AST:TYPE_PTR /= if {
        $stack $word "expected a => [.a, a] got: " report-error
    }
    $left AST:Type-child $right AST:Type-eq not if {
        $stack $word "expected a => [.a, a] got: " report-error
    }
    $stack AST:Types-pop #word.type
    $stack AST:Types-pop drop
}
fn check-intrinsic-mem-grow(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 0 = if { 
        $word AST:Word-location "expected [i32] got []\n" U:abort-with-location
    }
    $stack $stack AST:Types-len 1 - AST:Types-get AST:Type-ty AST:TYPE_I32 /= if {
        $stack $word "expected [i32] got: " report-error
    }
}
fn check-intrinsic-not(stack: .AST:Types, word: .AST:Word) {
    local type: .AST:Type
    local ty: i32
    $stack AST:Types-len 0 = if {
        $stack $word "expected [bool] or [i32] got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get #type
    $type AST:Type-ty #ty
    $ty AST:TYPE_BOOL /= 
    $ty AST:TYPE_I32 /= and
    if {
        $stack $word "expected [bool] or [i32] got: " report-error
    }
    $type #word.type
}
fn check-intrinsic-add-or-sub(arena: .Arena:Arena, temp-types: .DynArray:DynArray<.AST:Type>, stack: .AST:Types, word: .AST:Word) {
    local right: .AST:Type
    local left: .AST:Type
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [a, a] got: " report-error
    }
    $stack AST:Types-pop #right
    $stack AST:Types-pop #left

    block {
        $left AST:Type-ty AST:TYPE_I32 = $right AST:Type-ty AST:TYPE_I32 = and if {
            $arena $stack $left AST:Types-push break
        }
        $left AST:Type-ty AST:TYPE_PTR = $right AST:Type-ty AST:TYPE_I32 = and if {
            $arena $stack $left AST:Types-push break
        }
        $left AST:Type-ty AST:TYPE_PTR = $right AST:Type-ty AST:TYPE_PTR = and if {
            $arena $stack $temp-types $arena AST:Type-new-int32 U:push-temp-type2 AST:Types-push break
        }
        $stack $word "expected [i32, i32] or [.T, i32] or [.T, .T] got: " report-error
    }
}
fn check-intrinsic-eq(arena: .Arena:Arena, temp-types: .DynArray:DynArray<.AST:Type>, stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 2 lt if {
        $stack $word "expected [a, a] got: " report-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get
    $stack $stack AST:Types-len 2 - AST:Types-get
    AST:Type-eq not if {
        $stack $word "expected [a, a] got: " report-error
    } else {
        $stack AST:Types-pop drop
        $stack AST:Types-pop drop
    }
    $arena $stack $temp-types $arena AST:Type-new-boolean U:push-temp-type2 AST:Types-push
}
fn check-intrinsic-drop(stack: .AST:Types, word: .AST:Word) {
    $stack AST:Types-len 0 = if { 
        $word AST:Word-location 
        "expected a value on the stack got: []"
        U:abort-with-location
    }
    $stack AST:Types-pop drop
}
