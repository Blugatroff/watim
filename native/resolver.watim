import "../std/io.watim" as IO
import "../std/string.watim" as S
import "../std/str.watim" as STR
import "../std/alloc.watim" as A
import "../std/dyn-array.watim" as DynArray
import "../std/arena.watim" as Arena

import "./ast.watim" as AST
import "./module.watim" as M
import "./lexer.watim" as L
import "./parser.watim" as P
import "./util.watim" as U

fn resolve(arena: .Arena:Arena, modules: .M:Modules) {
    0 @phase
    loop {
        0 @i
        loop {
            $i $modules M:Modules-len = if { break }
            $arena $modules $modules $i M:Modules-get-value $phase resolve-module
            $i 1 + #i
        }
        1 $phase = if { break }
        1 #phase
    } 
}
fn resolve-module(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, phase: i32) {
    $module M:Module-items @items
    0 @i
    loop {
        $i $items.len = if { break }
        $items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_STRUCT = if {
            $arena $modules $module $item AST:TopItem-struc $phase resolve-struc
        }
        $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
            $arena $modules $module $item AST:TopItem-function $phase resolve-function
        }
        $item AST:TopItem-ty AST:TOP_ITEM_EXT = if {
            $arena $modules $module $item AST:TopItem-ext $phase resolve-extern
        }
        $item AST:TopItem-ty AST:TOP_ITEM_MEM = if {
            $arena $modules $module $item.mem $phase resolve-memory
        }
        $i 1 + #i
    }
}
fn resolve-extern(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, ext: .AST:Extern, phase: i32) {
    $arena $modules $module 0 !.AST:Generics $ext AST:Extern-parameters $phase resolve-parameters
    $arena $modules $module 0 !.AST:Generics $ext AST:Extern-rets $phase resolve-types
}
fn resolve-struc(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, struc: .AST:Struct, phase: i32) {
    $struc AST:Struct-fields @fields
    0 @i
    loop {
        $i $fields.len = if { break }
        $fields $i DynArray:get<AST:Field> @field
        $arena $modules $module &struc.generics $field $phase resolve-field
        $i 1 + #i
    }
}
fn resolve-function(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, function: .AST:Function, phase: i32) {
    $arena $modules $module &function.generics $function AST:Function-rets $phase resolve-types
    $arena $modules $module &function.generics $function AST:Function-locals $phase resolve-locals
    $arena $modules $module &function.generics $function AST:Function-body $phase resolve-words
    $arena $function AST:Function-gather-generics-types
}
fn resolve-words(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, words: .AST:Words, phase: i32) {
    local i: i32
    loop {
        $i $words AST:Words-len = if { break }
        $arena $modules $module $generics $words $i AST:Words-get $phase resolve-word
        $i 1 + #i
    }
}
fn resolve-word(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, word: .AST:Word, phase: i32) {
    $word AST:Word-ty AST:WORD_CAST = if {
        $arena $modules $module $generics &word.type $phase resolve-type
    }
    $word AST:Word-ty AST:WORD_IF = if {
        $arena $modules $module $generics $word AST:Word-iff $phase resolve-iff
    }
    $word AST:Word-ty AST:WORD_LOOP = if {
        $arena $modules $module $generics $word.lop.body $phase resolve-words
    }
    $word AST:Word-ty AST:WORD_BLOCK = if {
        $arena $modules $module $generics $word.blok.body $phase resolve-words
    }
    $word AST:Word-ty AST:WORD_CALL = if {
        $arena $modules $module $generics $word $phase resolve-call
    }
    $word AST:Word-ty AST:WORD_SIZEOF = if {
        $arena $modules $module $generics &word.type $phase resolve-type
    }
}
fn resolve-call(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, word: .AST:Word, phase: i32) { block {
    // FIXME: this causes a segfault: 
    // $word.generics 0 !.AST:Types = if {
    $word.generics !i32 0 = if {
        break
    }
    0 @i
    loop {
        $word.generics AST:Types-len $i = if { break }
        $arena $modules $module $generics $word.generics $i AST:Types-get-ref $phase resolve-type
        $i 1 + #i
    }
} }
fn resolve-iff(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, iff: .AST:If, phase: i32) {
    $arena $modules $module $generics $iff AST:If-body $phase resolve-words
    $iff.has-el if { 
        $arena $modules $module $generics $iff AST:If-el $phase resolve-words
    }
}
fn resolve-field(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, field: .AST:Field, phase: i32) {
    $arena $modules $module $generics &field.type $phase resolve-type
}
fn resolve-types(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, types: .AST:Types, phase: i32) {
    local i: i32
    loop {
        $i $types AST:Types-len = if { break }
        $arena $modules $module $generics $types $i AST:Types-get-ref $phase resolve-type
        $i 1 + #i
    }
}
fn resolve-memory(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, mem: .AST:Local, phase: i32) {
    $arena $modules $module 0 !.AST:Generics &mem.type $phase resolve-type
}
fn resolve-locals(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, locals: .AST:Locals, phase: i32) {
    local i: i32
    loop {
        $i $locals AST:Locals-len = if { break }
        $arena $modules $module $generics $locals $i AST:Locals-get $phase resolve-local
        $i 1 + #i
    }
}
fn resolve-local(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, locl: .AST:Local, phase: i32) {
    $arena $modules $module $generics &locl.type $phase resolve-type
}
fn resolve-parameters(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, parameters: .AST:Locals, phase: i32) {
    local i: i32
    loop {
        $parameters AST:Locals-len $i = if { break }
        $arena $modules $module $generics $parameters $i AST:Locals-get $phase resolve-parameter
        $i 1 + #i
    }
}
fn resolve-parameter(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, parameter: .AST:Local, phase: i32) {
    $arena $modules $module $generics &parameter.type $phase resolve-type
}
fn resolve-type(arena: .Arena:Arena, modules: .M:Modules, module: .M:Module, generics: .AST:Generics, type: ..AST:Type, phase: i32) {
    local path: STR:Str
    block {
        $type ~ AST:Type-ty AST:TYPE_STRUCT = if {
            $phase 0 = if {
                $type ~ AST:Type-ident L:Token-lexeme @ident 
                $type ~ AST:Type-module @module-token
                0 $generics !i32 /= if {
                    $generics $ident AST:Generics-contains if {
                        $type ~ .generic flip store
                        AST:TYPE_GENERIC $type ~ .ty flip store
                        break
                    } else { drop }
                } else { }

                $module-token !i32 0 /= if {
                    $module M:Module-imports @imports
                    $imports $module-token L:Token-lexeme ~ STR:Str-unpack AST:Imports-get if {
                        .path ~ #path
                    } else {
                        drop
                        $module-token L:Token-location "module not found\n" U:abort-with-location
                    }
                } else {
                    &module.path S:String-unpack STR:Str-new #path
                }

                $modules $path STR:Str-unpack $ident ~ STR:Str-unpack M:Modules-find-struc if {
                    $type ~ flip AST:Type-set-struc
                } else {
                    drop $type ~ AST:Type-ident L:Token-location "struct not found\n" U:abort-with-location
                }
            }

            $type ~ .generics ~ AST:Types-len $type ~ AST:Type-struc .generics AST:Generics-len /= if {
                $type ~ .ident ~ L:Token-location "mismatched number of generics\n" U:abort-with-location
            }

            0 @i
            loop {
                $type ~ .generics ~ AST:Types-len $i = if { break }
                $arena $modules $module $generics $type ~ .generics ~ $i AST:Types-get-ref $phase resolve-type
                $i 1 + #i
            }
            $phase 1 = if {
                $arena $type ~ $type ~ .generics ~ $module AST:Type-apply-generics drop =>type
            }
            break
        }
        $type ~ AST:Type-ty AST:TYPE_PTR = if {
            $arena $modules $module $generics $type ~ .child $phase resolve-type
        }
        $type ~ AST:Type-ty AST:TYPE_FUNCTION = if {
            $arena $modules $module $generics $type ~ .function.args ~ $phase resolve-types
            $arena $modules $module $generics $type ~ .function.rets ~ $phase resolve-types
        }
    }
}

