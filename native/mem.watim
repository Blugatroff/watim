import "../std/core.watim" as CORE
import "../std/io.watim" as IO
import "../std/dyn-array.watim" as DynArray

import "./module.watim" as M
import "./ast.watim" as AST
import "./util.watim" as U
import "./lexer.watim" as L

fn process(global-mem-start: i32, modules: .M:Modules) -> i32 {
    memory mem-start: i32 4
    local i: i32
    $global-mem-start =>mem-start
    loop {
        $i $modules M:Modules-len = if { break }
        $mem-start $modules $i M:Modules-get-value process-module
        $i 1 + #i
    }
    $mem-start ~
}

fn process-module(global-mem-address: .i32, module: .M:Module) {
    $module M:Module-items @items
    0 @i
    loop {
        $i $items.len = if { break }
        $module M:Module-types $global-mem-address $items $i DynArray:get<.AST:TopItem> ~ process-item
        $i 1 + #i
    }
}

fn process-item(temp-types: .AST:Types, global-mem-address: .i32, item: .AST:TopItem) {
    $item AST:TopItem-ty AST:TOP_ITEM_MEM = if {
        $temp-types $global-mem-address $item.mem process-mem
    }
}

fn process-mem(temp-types: .AST:Types, global-mem-address: .i32, mem: .AST:Local) {
    local address: i32
    $global-mem-address ~ #address
    $address 4 CORE:align-to #address
    $address $mem.size + =>global-mem-address 
    $address #mem.address
}

