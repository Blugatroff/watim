import "../std/core.watim" as CORE
import "../std/io.watim" as IO
import "../std/str.watim" as STR
import "../std/array.watim" as Array
import "../std/arena.watim" as Arena

import "./ast.watim" as AST
import "./lexer.watim" as L
import "./module.watim" as M

fn gather-instances(arena: .Arena:Arena, modules: .M:Modules) {
    0 @i
    loop {
        $i $modules M:Modules-len = if { break }
        $arena $modules $i M:Modules-get-value gather-instances-module
        $i 1 + #i
    }
}

fn gather-instances-module(arena: .Arena:Arena, module: .M:Module) {
    $module M:Module-items @items
    0 @i
    loop {
        $i $items.len = if { break }
        $items $i Array:get<.AST:TopItem> ~ @item
        $arena $module $item gather-instances-item
        $i 1 + #i
    }
}

fn gather-instances-item(arena: .Arena:Arena, module: .M:Module, item: .AST:TopItem) {
    $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
        $item AST:TopItem-function @function
        &function.generics AST:Generics-len 0 = if { // only start gathering at non-generic functions
            $arena AST:Types-new @generics
            $arena &module.types-types $generics Array:push<.AST:Types>
            $arena $module $generics $function gather-instances-function @new-words
            $arena &module.words-words $new-words Array:push<Array:Array<AST:Word>>
            $generics $new-words AST:Instance-new @instance
            $function.instances $instance AST:Instances-push
        }
    }
}

fn gather-instances-function(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, function: .AST:Function) -> Array:Array<AST:Word> {
    $arena $module $generics &function.body gather-instances-words
}

fn gather-instances-words(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, words: .Array:Array<AST:Word>) -> Array:Array<AST:Word> {
    Array:new<AST:Word> @new-words
    0 @i
    loop {
        $i $words.len = if { break }
        $words $i Array:get<AST:Word> @word
        $arena
        $arena $module $generics $word gather-instances-word
        &new-words flip Array:push<AST:Word>
        $i 1 + #i
    }
    $new-words
}

fn gather-instances-word(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, word: .AST:Word) -> AST:Word { block {
    $word.ty $word.token AST:Word-new @new-word
    $word.ty AST:WORD_CALL = if {
        $word.ident #new-word.ident
        $word.module #new-word.module
        $word.function 0 !.AST:Function /= $word.generics 0 !.AST:Types /= and if {
            $word.generics AST:Types-len 0 /= if {
                $arena AST:Types-new @new-generics
                0 @i
                loop {
                    $i $word.generics AST:Types-len = if { break }
                    $word.generics $i AST:Types-get @type
                    $arena $type $generics $module AST:Type-apply-generics drop #type
                    $arena $new-generics $type AST:Types-push
                    $i 1 + #i
                }
                $word.function.instances $new-generics AST:Instances-contains-types-by-size not if {
                    drop
                    $word.function.instances AST:Instances-len @instance-index
                    $new-generics #new-word.generics

                    $arena $word.rets $new-generics $module AST:Types-apply-generics drop #new-word.rets
                    $arena $word.args $new-generics $module AST:Types-apply-generics drop #new-word.args

                    $new-generics Array:new<AST:Word> AST:Instance-new @new-instance
                    $word.function.instances $new-instance AST:Instances-push

                    $arena $module $new-generics $word.function gather-instances-function @new-words
                    $word.function.instances $instance-index AST:Instances-get .body $new-words store
                    $instance-index
                } else {
                    @instance-index

                    $word.function.instances $instance-index AST:Instances-get .generics ~ @generics
                    $arena $word.rets $generics $module AST:Types-apply-generics drop #new-word.rets
                    $arena $word.args $generics $module AST:Types-apply-generics drop #new-word.args

                    $instance-index
                } @instance-index
                $instance-index #new-word.instance-index
                $new-word break
            }
        }
        $arena $word.rets AST:Types-clone-container #new-word.rets
        $arena $word.args AST:Types-clone-container #new-word.args
        0 #new-word.instance-index
        $new-word break
    }
    $word.ty AST:WORD_NUMBER = if {
        $word.number #new-word.number
        $new-word break
    }
    $word.ty AST:WORD_STRING = if {
        $word.addr #new-word.addr
        $word.size #new-word.size
        $word.string #new-word.string
        $new-word break
    }
    $word.ty AST:WORD_SET = 
    $word.ty AST:WORD_GET_LOCAL = or
    $word.ty AST:WORD_GET_REF = or
    if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $word.ident #new-word.ident
        $word.shadow-id #new-word.shadow-id
        $word.scope-id #new-word.scope-id
        $arena $word.src-type $generics $module AST:Type-apply-generics drop #new-word.src-type
        $word.fields #new-word.fields
        $new-word break
    }
    $word.ty AST:WORD_INIT_LOCAL = if {
        $word.ident #new-word.ident
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $word.ident #new-word.ident
        $word.shadow-id #new-word.shadow-id
        $word.scope-id #new-word.scope-id
        $new-word break
    }
    $word.ty AST:WORD_STORE = if {
        $word.ident #new-word.ident
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $arena $word.src-type $generics $module AST:Type-apply-generics drop #new-word.src-type
        $word.shadow-id #new-word.shadow-id
        $word.scope-id #new-word.scope-id
        $word.fields #new-word.fields
        $new-word break
    }
    $word.ty AST:WORD_GET_GLOBAL = 
    $word.ty AST:WORD_STORE_GLOBAL = or if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $word.ident #new-word.ident
        $word.module #new-word.module
        $word.fields #new-word.fields
        $new-word break
    }
    $word.ty AST:WORD_IF = if {
        $arena $module $generics &word.iff gather-instances-iff #new-word.iff
        $new-word break
    }
    $word.ty AST:WORD_LOOP = if {
        $arena $module $generics &word.lop gather-instances-lop #new-word.lop
        $new-word break
    }
    $word.ty AST:WORD_BLOCK = if {
        $arena $module $generics &word.blok gather-instances-blok #new-word.blok
        $new-word break
    }
    $word.ty AST:WORD_INTRINSIC = if {
        $arena $module $generics $word &new-word gather-instances-intrinsic
        $new-word break
    }
    $word.ty AST:WORD_BREAK = if { $new-word break }
    $word.ty AST:WORD_DEREF = if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $arena $word.src-type $generics $module AST:Type-apply-generics drop #new-word.src-type
        $word.fields #new-word.fields
        $new-word break
    }
    $word.ty AST:WORD_CAST = if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $arena $word.src-type $generics $module AST:Type-apply-generics drop #new-word.src-type
        $new-word break
    }
    $word.ty AST:WORD_LOAD = 
    $word.ty AST:WORD_SIZEOF = or 
    if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $new-word break
    }
    $word.ty AST:WORD_REF_FUNCTION = if {
        $word.function #new-word.function
        $new-word break
    }
    $word.ty AST:WORD_CALL_INDIRECT = if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $new-word break
    }
    $word.ty AST:WORD_ARRAY_WRITE = 
    $word.ty AST:WORD_ARRAY_READ = or
    $word.ty AST:WORD_ARRAY_REF = or if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $new-word break
    }
    $word.ty AST:WORD_ARRAY_INIT = if {
        $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type
        $word.size #new-word.size
        $new-word break
    }
    2 "gather-instances-word: unhandled word type: " IO:write-all IO:check
    2 $word.ty AST:word-ty-name IO:write-all IO:check
    2 IO:newline
    CORE:unreachable<AST:Word>
} }
fn gather-instances-iff(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, iff: .AST:If) -> AST:If {
    $iff.token $arena $module $generics &iff.body gather-instances-words AST:If-new @new-if
    $iff.has-el #new-if.has-el
    $arena $module $generics &iff.locals gather-instances-locals #new-if.locals
    $iff.has-el if {
        $arena $module $generics &iff.el gather-instances-words #new-if.el
    }
    $iff.params 0 !.AST:Types = if { 0 !.AST:Types #new-if.params } else { $arena $iff.params $generics $module AST:Types-apply-generics drop #new-if.params }
    $iff.rets 0 !.AST:Types = if { 0 !.AST:Types #new-if.rets } else { $arena $iff.rets $generics $module AST:Types-apply-generics drop #new-if.rets }
    $new-if
}
fn gather-instances-lop(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, lop: .AST:Loop) -> AST:Loop {
    $lop.token $arena $module $generics &lop.body gather-instances-words AST:Loop-new @new-lop
    $arena $module $generics &lop.locals gather-instances-locals #new-lop.locals
    $lop.rets 0 !.AST:Types = if { 0 !.AST:Types #new-lop.rets } else { $arena $lop.rets $generics $module AST:Types-apply-generics drop #new-lop.rets }
    $new-lop
}
fn gather-instances-blok(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, blok: .AST:Block) -> AST:Block {
    $blok.token $arena $module $generics &blok.body gather-instances-words AST:Block-new @new-blok
    $arena $module $generics &blok.locals gather-instances-locals #new-blok.locals
    $blok.rets 0 !.AST:Types = if { 0 !.AST:Types #new-blok.rets } else { $arena $blok.rets $generics $module AST:Types-apply-generics drop #new-blok.rets }
    $new-blok
}
fn gather-instances-locals(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, locals: .AST:Locals) -> AST:Locals {
    AST:Locals-new @new-locals
    0 @i
    loop {
        $i $locals AST:Locals-len = if { break }
        $locals $i AST:Locals-get @locl
        $arena &new-locals $arena $module $generics $locl gather-instances-locl AST:Locals-push
        $i 1 + #i
    }
    $new-locals
}

fn gather-instances-locl(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, locl: .AST:Local) -> AST:Local {
    $arena $locl.type $generics $module AST:Type-apply-generics drop @new-type
    $locl.ty $locl.ident $new-type $locl.scope-id $locl.shadow-id AST:Local-new
}

fn gather-instances-intrinsic(arena: .Arena:Arena, module: .M:Module, generics: .AST:Types, word: .AST:Word, new-word: .AST:Word) { block {
    $word.intrinsic #new-word.intrinsic
    $word.intrinsic AST:INTRINSIC_FLIP = if { break }
    $word.intrinsic AST:INTRINSIC_EQ = if { break }
    $word.intrinsic AST:INTRINSIC_DROP = if { break }
    $word.intrinsic AST:INTRINSIC_LESS_EQ = if { break }
    $word.intrinsic AST:INTRINSIC_ADD = if { break }
    $word.intrinsic AST:INTRINSIC_SUB = if { break }
    $word.intrinsic AST:INTRINSIC_STORE8 = if { break }
    $word.intrinsic AST:INTRINSIC_MOD = if { break }
    $word.intrinsic AST:INTRINSIC_DIV = if { break }
    $word.intrinsic AST:INTRINSIC_LOAD8 = if { break }
    $word.intrinsic AST:INTRINSIC_GREATER_EQ = if { break }
    $word.intrinsic AST:INTRINSIC_GREATER = if { break }
    $word.intrinsic AST:INTRINSIC_LESS = if { break }
    $word.intrinsic AST:INTRINSIC_AND = if { break }
    $word.intrinsic AST:INTRINSIC_MUL = if { break }
    $word.intrinsic AST:INTRINSIC_MEM_COPY = if { break }
    $word.intrinsic AST:INTRINSIC_ROTR = if { break }
    $word.intrinsic AST:INTRINSIC_ROTL = if { $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type break }
    $word.intrinsic AST:INTRINSIC_OR = if { $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type break }
    $word.intrinsic AST:INTRINSIC_NOT_EQ = if { break }
    $word.intrinsic AST:INTRINSIC_NOT = if { $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type break }
    $word.intrinsic AST:INTRINSIC_MEM_GROW = if { break }
    $word.intrinsic AST:INTRINSIC_STORE = if { $arena $word.type $generics $module AST:Type-apply-generics drop #new-word.type break }
    2 "gather-instances-intrinsic: unhandled intrinsic-type: " IO:write-all IO:check
    2 $word.intrinsic AST:intrinsic-name IO:write-all IO:check
    2 IO:newline
    0 0 / drop
} }

