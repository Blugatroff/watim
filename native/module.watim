import "../std/string.watim" as S
import "../std/io.watim" as IO
import "../std/map.watim" as MAP
import "../std/fs.watim" as FS
import "../std/alloc.watim" as A
import "../std/format.watim" as FMT
import "../std/core.watim" as CORE

import "./ast.watim" as AST
import "./lexer.watim" as L
import "./parser.watim" as P

struct Module {
    items: .AST:TopItems
    imports: .AST:Imports
    file: .S:String
    tokens: .L:Tokens
    types: .AST:Types
    path: .S:String
}
// mem is borrowed
fn Module-load(path-ptr: .i32, path-len: i32, mem: .S:String) -> .Module {
    local str: .S:String
    local tokens: .L:Tokens
    local items: .AST:TopItems
    local types: .AST:Types
    local path: .S:String

    $path-ptr $path-len S:String-new #path
    $path S:String-unpack FS:read-file IO:check #str
    $str $path L:lex #tokens
    $mem $tokens P:parse #types #items 
    
    $items $path $str $tokens $types Module-new
}
fn Module-new(items: .AST:TopItems, path: .S:String, file: .S:String, tokens: .L:Tokens, types: .AST:Types) -> .Module {
    local self: .Module
    24 A:alloc !.Module #self
    $self.items $items store32
    $self.file $file store32
    $self.tokens $tokens store32
    $self.types $types store32
    $self.path $path store32
    $self $self.path load32 Module-extract-imports
    $self
}

// module-path is borrowed
fn Module-extract-imports(self: .Module, module-path: .S:String) {
    local i: i32
    local item: .AST:TopItem
    local imp: .AST:Import
    local path: .S:String
    $self.imports AST:Imports-new store32
    loop {
        $i $self.items load32 AST:TopItems-len = if { break }
        $self.items load32 $i AST:TopItems-get #item
        $item AST:TopItem-ty AST:TOP_ITEM_IMPORT = if {
            $item.imp load32 #imp
            $module-path S:String-unpack FS:path-dir S:String-new #path
            $path $imp AST:Import-path-content S:String-append
            $self.imports load32 
            $item.imp load32 AST:Import-ident L:Token-lexeme S:Str-unpack S:String-new
            $path S:String-unpack FS:normalize $path S:String-free
            AST:Imports-insert
        }
        $i 1 + #i
    }
}
fn Module-imports(self: .Module) -> .AST:Imports {
    $self.imports load32
}
fn Module-free(self: .Module) {
    $self.items load32 AST:TopItems-free
    $self.file load32 S:String-free
    $self.tokens load32 L:Tokens-free
    $self.types load32 AST:Types-free
    $self.path load32 S:String-free
    $self.imports load32 AST:Imports-free
    $self !.i32 A:free
}
fn Module-format(self: .Module, formatter: .FMT:Formatter) {
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent
    $formatter FMT:Formatter-write-indent
    $formatter "items: " FMT:Formatter-write
    $self.items load32 $formatter AST:TopItems-format
    $formatter ",\n" FMT:Formatter-write
    $formatter FMT:Formatter-write-indent
    $formatter "imports: " FMT:Formatter-write
    $self.imports load32 $formatter AST:Imports-format
    $formatter "\n" FMT:Formatter-write
    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}
fn Module-items(self: .Module) -> .AST:TopItems {
    $self.items load32
}
fn Module-find-struc(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Struct, bool {
    local items: .AST:TopItems
    local item: .AST:TopItem
    local struc: .AST:Struct
    local i: i32
    $self Module-items #items
    loop {
        $i $items AST:TopItems-len = if { 0 !.AST:Struct 0 1 = break }
        $items $i AST:TopItems-get #item
        $item AST:TopItem-ty AST:TOP_ITEM_STRUCT = if {
            $item AST:TopItem-struc #struc
            $struc AST:Struct-ident L:Token-lexeme S:Str-unpack $ident-ptr $ident-len S:str-eq if {
                $struc 0 0 = break
            }
        }
        $i 1 + #i
    }
}
fn Module-find-function(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Extern, .AST:Function, bool {
    local items: .AST:TopItems
    local item: .AST:TopItem
    local fun: .AST:Function
    local ext: .AST:Extern
    local i: i32
    $self Module-items #items
    loop {
        $i $items AST:TopItems-len = if { 0 !.AST:Extern 0 !.AST:Function 0 1 = break }
        $items $i AST:TopItems-get #item
        $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
            $item AST:TopItem-function #fun
            $fun AST:Function-ident L:Token-lexeme S:Str-unpack $ident-ptr $ident-len S:str-eq if {
                0 !.AST:Extern $fun 0 0 = break
            }
        }
        $item AST:TopItem-ty AST:TOP_ITEM_EXT = if {
            $item AST:TopItem-ext #ext
            $ext AST:Extern-ident L:Token-lexeme S:Str-unpack $ident-ptr $ident-len S:str-eq if {
                $ext 0 !.AST:Function 0 0 = break
            }
        }
        $i 1 + #i
    }
}
fn Module-find-mem(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Memory, bool {
    local items: .AST:TopItems
    local item: .AST:TopItem
    local mem: .AST:Memory
    local i: i32
    $self Module-items #items
    loop {
        $i $items AST:TopItems-len = if { 0 !.AST:Memory 0 1 = break }
        $items $i AST:TopItems-get #item
        $item AST:TopItem-ty AST:TOP_ITEM_MEM = if {
            $item AST:TopItem-mem #mem
            $mem AST:Memory-ident L:Token-lexeme S:Str-unpack $ident-ptr $ident-len S:str-eq if {
                $mem 0 0 = break 
            }
        }
        $i 1 + #i
    }
}
fn Module-types(self: .Module) -> .AST:Types {
    $self.types load32
}
fn Module-path(self: .Module) -> .S:String {
    $self.path load32
}

struct Modules {
    inner: .MAP:StringMap
}
fn Modules-new() -> .Modules {
    local self: .Modules
    4 A:alloc !.Modules #self
    $self.inner MAP:StringMap-new store32
    $self
}
fn Modules-free(self: .Modules) {
    local i: i32
    loop {
        $i $self.inner load32 MAP:StringMap-len = if { break }
        $self.inner load32 $i MAP:StringMap-get-value !.Module Module-free
        $i 1 + #i
    }
    $self.inner load32 MAP:StringMap-free
    $self !.i32 A:free
}
fn Modules-insert(self: .Modules, path: .S:String, module: .Module) {
    $self.inner load32 $path $module !i32 MAP:StringMap-insert if {
        1 "WARNING: overwrote module: " IO:write-all IO:check 1 $path S:String-unpack IO:write-all IO:check
        1 "\n" IO:write-all IO:check
        !.Module Module-free
    } else {
        drop
    }
}
fn Modules-get(self: .Modules, path-ptr: .i32, path-len: i32) -> .Module, bool {
    $self.inner load32 $path-ptr $path-len MAP:StringMap-get if {
        !.Module 0 0 =
    } else {
        !.Module 0 1 =
    }
}
fn Modules-get-key(self: .Modules, index: i32) -> .S:String {
    $self.inner load32 $index MAP:StringMap-get-key
}
fn Modules-get-value(self: .Modules, index: i32) -> .Module {
    $self.inner load32 $index MAP:StringMap-get-value !.Module
}
fn Modules-len(self: .Modules) -> i32 {
    $self.inner load32 MAP:StringMap-len
}
fn Modules-format(self: .Modules, formatter: .FMT:Formatter) {
    local i: i32
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent
    loop {
        $i $self Modules-len = if { break }
        $formatter FMT:Formatter-write-indent
        $formatter "\"" FMT:Formatter-write
        $formatter $self $i Modules-get-key S:String-unpack FMT:Formatter-write
        $formatter "\": " FMT:Formatter-write
        $self $i Modules-get-value $formatter Module-format
        $formatter ",\n" FMT:Formatter-write
        $i 1 + #i
    }
    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}
fn Modules-find-struc(self: .Modules, path-ptr: .i32, path-len: i32, ident-ptr: .i32, ident-len: i32) -> .AST:Struct, bool {
    local i: i32
    local module: .Module
    $self $path-ptr $path-len Modules-get if {
        #module $module $ident-ptr $ident-len Module-find-struc
    } else {
        drop 0 !.AST:Struct 0 1 = 
    }
}
fn Modules-find-index(self: .Modules, module: .Module) -> i32 {
    local i: i32
    loop {
        $i $self Modules-len = if { 
            2 "Modules-find-index: NOT FOUND" IO:write-all IO:check
            1 CORE:exit
        }
        $module $self $i Modules-get-value = if { 
            $i break 
        }
        $i 1 + #i
    }
}

