import "../std/str.watim" as STR
import "../std/io.watim" as IO
import "../std/str-map.watim" as StrMap
import "../std/fs.watim" as FS
import "../std/alloc.watim" as A
import "../std/fmt.watim" as FMT
import "../std/core.watim" as CORE
import "../std/dyn-array.watim" as DynArray
import "../std/array.watim" as Array
import "../std/arena.watim" as Arena
import "../std/byte-array.watim" as ByteArray

import "./ast.watim" as AST
import "./lexer.watim" as L
import "./parser.watim" as P

struct Module {
    items: DynArray:DynArray<.AST:TopItem>
    imports: AST:Imports
    file: STR:Str
    tokens: Array:Array<L:Token>
    types: Array:Array<.AST:Type>
    path: STR:Str
    structs: DynArray:DynArray<.AST:Struct>
    fields: DynArray:DynArray<AST:Field>
    types-types: DynArray:DynArray<.AST:Types>
    words-words: Array:Array<Array:Array<AST:Word>>
}

fn Module-load(arena: .Arena:Arena, fs: .FS:FileSystem, path: STR:Str, mem: .ByteArray:T) -> Module {
    $arena $fs $path STR:Str-unpack FS:read-file @code @str
    $code 0 /= if {
        2 "Failed to read file: \"" IO:write-all IO:check
        2 $path STR:Str-unpack IO:write-all IO:check
        2 "\" Error Code: " IO:write-all IO:check
        2 $code IO:print-to-fd
        2 IO:newline
        1 CORE:exit
    }
    $arena $str $path L:lex @tokens
    $arena $mem &tokens P:parse @fields @types @items
    
    $arena $items $path $str $tokens $types $fields Module-new
}

fn Module-new(
    arena: .Arena:Arena,
    items: DynArray:DynArray<.AST:TopItem>, 
    path: STR:Str,
    file: STR:Str, 
    tokens: Array:Array<L:Token>, 
    types: Array:Array<.AST:Type>, 
    fields: DynArray:DynArray<AST:Field>
) -> Module {
    local self: Module
    $items #self.items
    $file #self.file
    $tokens #self.tokens
    $types #self.types
    $path #self.path
    \AST:Struct-free DynArray:new<.AST:Struct> #self.structs
    $fields #self.fields
    $arena &self $self.path Module-extract-imports
    &self Module-check-for-duplicate-functions
    0!(.AST:Types ->) DynArray:new<.AST:Types> #self.types-types
    Array:new<Array:Array<AST:Word>> #self.words-words
    // TODO: check for duplicate structs and memories
    $self
}

fn Module-check-for-duplicate-functions(self: .Module) {
    $self.items.len @len
    0 @i
    loop {
        $i $len = if { break }
        
        &self.items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
            0 @j
            loop {
                $j $i = if { break }
                &self.items $j DynArray:get<.AST:TopItem> ~ @item2
                
                $item2 AST:TopItem-ty AST:TOP_ITEM_FN = if {
                    $item AST:TopItem-function AST:Function-ident L:Token-lexeme
                    $item2 AST:TopItem-function AST:Function-ident @ident
                    $ident L:Token-lexeme
                    STR:Str-eq if {
                        2 $ident L:Token-location L:print-location
                        2 "duplicate function: " IO:write-all IO:check
                        2 $ident L:Token-lexeme ~ STR:Str-unpack IO:write-all IO:check
                        2 IO:newline
                        1 CORE:exit
                    }
                }
                $j 1 + #j
            }
        }
        $i 1 + #i
    }
}

fn Module-extract-imports(arena: .Arena:Arena, self: .Module, module-path: STR:Str) {
    AST:Imports-new #self.imports
    0 @i
    loop {
        $i $self.items.len = if { break }
        &self.items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_IMPORT = if {
            $item.imp @imp
            $arena Arena:temp @temp @save
            $temp $module-path STR:Str-unpack FS:path-dir Arena:push-bytes @path
            $temp $imp AST:Import-path-content Arena:push-bytes drop

            $arena &self.imports
            $item.imp AST:Import-ident L:Token-lexeme ~
            $arena $path $temp $save Arena:usage-since-save FS:normalize @path-len @path-ptr
            $path-ptr $path-len AST:Imports-insert

            $temp $save Arena:restore
        }
        $i 1 + #i
    }
}

fn Module-imports(self: .Module) -> .AST:Imports {
    &self.imports
}

fn Module-free(self: Module) {
    $self.types-types DynArray:free<.AST:Types>
    $self.items DynArray:free<.AST:TopItem>
    $self.structs DynArray:free<.AST:Struct>
    $self.fields DynArray:free<AST:Field>
}

fn Module-items(self: .Module) -> .DynArray:DynArray<.AST:TopItem> {
    &self.items
}

fn Module-find-struc(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Struct, bool {
    $self Module-items @items
    0 @i
    loop {
        $i $items.len = if { 0 !.AST:Struct 0 1 = break }
        $items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_STRUCT = if {
            $item AST:TopItem-struc @struc
            $struc AST:Struct-ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
                $struc 0 0 = break
            }
        }
        $i 1 + #i
    }
}

fn Module-find-function(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Extern, .AST:Function, bool {
    $self Module-items @items
    0 @i
    loop {
        $i $items.len = if { 0 !.AST:Extern 0 !.AST:Function 0 1 = break }
        $items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
            $item AST:TopItem-function @fun
            $fun AST:Function-ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
                0 !.AST:Extern $fun 0 0 = break
            }
        }
        $item AST:TopItem-ty AST:TOP_ITEM_EXT = if {
            $item AST:TopItem-ext @ext
            $ext AST:Extern-ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
                $ext 0 !.AST:Function 0 0 = break
            }
        }
        $i 1 + #i
    }
}

fn Module-find-mem(self: .Module, ident-ptr: .i32, ident-len: i32) -> .AST:Local, bool {
    $self Module-items @items
    0 @i 
    loop {
        $i $items.len = if { 0 !.AST:Local 0 1 = break }
        $items $i DynArray:get<.AST:TopItem> ~ @item
        $item AST:TopItem-ty AST:TOP_ITEM_MEM = if {
            $item.mem @mem
            $mem.ident L:Token-lexeme ~ STR:Str-unpack $ident-ptr $ident-len STR:str-eq if {
                $mem 0 0 = break 
            }
        }
        $i 1 + #i
    }
}

struct Modules {
    inner: StrMap:StrMap<Module>
}

fn Modules-new() -> Modules {
    local self: Modules
    StrMap:new<Module> #self.inner
    $self
}

fn Modules-free(self: .Modules) {
    0 @i
    loop {
        $i &self.inner StrMap:len<Module> = if { break }
        &self.inner $i StrMap:get-value<Module> ~ Module-free
        $i 1 + #i
    }
}

fn Modules-insert(arena: .Arena:Arena, self: .Modules, path: STR:Str, module: Module) {
    $arena &self.inner $path $module StrMap:insert<Module>
}

fn Modules-get(self: .Modules, path-ptr: .i32, path-len: i32) -> .Module, bool {
    &self.inner $path-ptr $path-len StrMap:get<Module>
}

fn Modules-get-value(self: .Modules, index: i32) -> .Module {
    &self.inner $index StrMap:get-value<Module>
}

fn Modules-len(self: .Modules) -> i32 {
    &self.inner StrMap:len<Module>
}

fn Modules-find-struc(self: .Modules, path-ptr: .i32, path-len: i32, ident-ptr: .i32, ident-len: i32) -> .AST:Struct, bool {
    local i: i32
    local module: .Module
    $self $path-ptr $path-len Modules-get if {
        #module $module $ident-ptr $ident-len Module-find-struc
    } else {
        drop 0 !.AST:Struct 0 1 = 
    }
}

fn Modules-find-index(self: .Modules, module: .Module) -> i32 {
    local i: i32
    loop {
        $i $self Modules-len = if { 
            2 "Modules-find-index: NOT FOUND" IO:write-all IO:check
            1 CORE:exit
        }
        $module $self $i Modules-get-value = if { 
            $i break 
        }
        $i 1 + #i
    }
}

fn Modules-mark-reachable(self: .Modules) {
    0 @i
    loop {
        $i $self Modules-len = if { break }
        $self $i Modules-get-value @module

        $module Module-items @items

        0 @j
        loop {
            $items.len $j = if { break }

            $items $j DynArray:get<.AST:TopItem> ~ @item

            $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
                $item AST:TopItem-function @function
                $function.export 0 !.L:Token /= if {
                    $self $module $function mark-reachable-function
                }
            }

            $j 1 + #j
        }

        $i 1 + #i
    }
}

fn mark-reachable-function(modules: .Modules, module: .Module, function: .AST:Function) {
    $function.reachable not if {
        $function AST:Function-mark-reachable
        $modules $module $function AST:Function-body mark-reachable-words
    }
}

fn mark-reachable-words(modules: .Modules, module: .Module, words: .Array:Array<AST:Word>) {
    local word: .AST:Word
    local i: i32

    loop {
        $words.len $i = if { break }
        $words $i Array:get<AST:Word> #word

        $word AST:Word-ty AST:WORD_REF_FUNCTION = 
        $word AST:Word-ty AST:WORD_CALL = or if {
            $word.function 0 !.AST:Function /= if {
                $modules $module $word.function mark-reachable-function
            }
            $word.ext 0 !.AST:Extern /= if {
                1 1 = #word.ext.reachable
            }
        }

        $word AST:Word-ty AST:WORD_IF = if {
            $modules $module $word AST:Word-iff mark-reachable-iff
        }

        $word AST:Word-ty AST:WORD_LOOP = if {
            $modules $module &word.lop.body mark-reachable-words
        }

        $word AST:Word-ty AST:WORD_BLOCK = if {
            $modules $module &word.blok.body mark-reachable-words
        }

        $i 1 + #i
    }
}

fn mark-reachable-iff(modules: .Modules, module: .Module, iff: .AST:If) {
    $modules $module &iff.body mark-reachable-words
    $iff.has-el if {
        $modules $module &iff.el mark-reachable-words
    }
}

