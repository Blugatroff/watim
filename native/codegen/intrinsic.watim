import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/io.watim" as IO

import "../monomizer.watim" as Monomized (
    Monomized, Module, ExternOrInstances,
    Extern, Function, FunctionHandle, Signature, Local, Global,
    Type(I32, I64, I8, Bool),
    Key, Key-type, NamedTypeId, TypeId, TypeId-format,
    CustomType, CustomType-name, FunType,
    Variant, VariantCase, Struct,
    Word, Intrinsic, FieldAccess, MatchCase,
    I32-id, I64-id, type-size, field-offset, can-live-in-reg
)

import "./ctx.watim" as Ctx (Ctx, lookup-type)
import "./common.watim" as Common (generate-store)

fn generate-intrinsic(ctx: .Ctx, intrinsic: .Intrinsic) { block (->) {
    $ctx.fmt $intrinsic match {
        case Intrinsic.Drop -> { drop "drop" }
        case Intrinsic.Add -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.add" }
            case _ -> { drop "i32.add" }
        } }
        case Intrinsic.Sub -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.sub" }
            case _ -> { drop "i32.sub" }
        } }
        case Intrinsic.Eq -> {
            ~ @type
            &ctx.program.sizes $type type-size 4 gt if {
                0 &ctx.program.sizes $type can-live-in-reg !i32 / drop // assert
                "i64.eq"
            } else {
                "i32.eq"
            }
        }
        case Intrinsic.NotEq -> {
            ~ @type
            $ctx.program $type lookup-type match {
                case I64 -> { "i64.ne" }
                case _ -> {
                    0 &ctx.program.sizes $type can-live-in-reg !i32 / drop // assert
                    drop "i32.ne"
                }
            }
        }
        case Intrinsic.Mod -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.rem_u" }
            case I32 -> { "i32.rem_u" }
            case I64 -> { "i64.rem_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Mul -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.mul" }
            case I32 -> { "i32.mul" }
            case I64 -> { "i64.mul" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Div -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.div_u" }
            case I32 -> { "i32.div_u" }
            case I64 -> { "i64.div_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Lt -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.lt_u" }
            case I32 -> { "i32.lt_u" }
            case I64 -> { "i64.lt_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Gt -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.gt_u" }
            case I32 -> { "i32.gt_u" }
            case I64 -> { "i64.gt_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Le -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.le_u" }
            case I32 -> { "i32.le_u" }
            case I64 -> { "i64.le_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Ge -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.ge_u" }
            case I32 -> { "i32.ge_u" }
            case I64 -> { "i64.ge_u" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.And -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.and" }
            case I64 -> { "i64.and" }
            case I32 -> { "i32.and" }
            case Bool -> { "i32.and" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Or -> { $ctx.program flip ~ lookup-type match {
            case I8 -> { "i32.or" }
            case I64 -> { "i64.or" }
            case I32 -> { "i32.or" }
            case Bool -> { "i32.or" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Not -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.const -1 i64.xor" }
            case I32 -> { "i32.const -1 i32.xor" }
            case I8 -> { "i32.const -1 i32.xor i32.const 0xFF i32.and" }
            case Bool -> { "i32.const 1 i32.and i32.const 1 i32.xor i32.const 1 i32.and" }
            case _ -> { !.i8 0 0 / }
        } }
        case Intrinsic.Shl -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.shl" }
            case _ -> { drop "i32.shl" }
        } }
        case Intrinsic.Shr -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.shr_u" }
            case _ -> { drop "i32.shr_u" }
        } }
        case Intrinsic.Rotl -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.rotl" }
            case _ -> { drop "i32.rotl" }
        } }
        case Intrinsic.Rotr -> { $ctx.program flip ~ lookup-type match {
            case I64 -> { "i64.rotr" }
            case _ -> { drop "i32.rotr" }
        } }
        case Intrinsic.MemCopy -> { "memory.copy" }
        case Intrinsic.MemFill -> { "memory.fill" }
        case Intrinsic.MemGrow -> { "memory.grow" }
        case Intrinsic.Store -> { $ctx flip ~ generate-store break }
        case Intrinsic.SetStackSize -> {
            $ctx.guard-stack if { "global.set $stack-siz:e" } else { "drop" }
        }
    } Fmt:write
} }
