import "../std/core.watim" as CORE
import "../std/fmt.watim" as FMT
import "../std/util.watim" as U
import "../std/str.watim" as STR
import "../std/io.watim" as IO
import "../std/array.watim" as Array

import "./ast.watim" as AST
import "./lexer.watim" as L

fn TopItems-json(formatter: .FMT:Formatter, items: .Array:Array<AST:TopItem>) {
    $formatter "[\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent
    0 @i
    loop {
        $items.len $i = if { break }
        $formatter FMT:Formatter-write-indent
        $formatter $items $i Array:get<AST:TopItem> TopItem-json
        
        $i 1 + $items.len /= if {
            $formatter "," FMT:Formatter-write
        }
        $formatter "\n" FMT:Formatter-write

        $i 1 + #i
    }
    $formatter FMT:Formatter-dedent
    $formatter "]" FMT:Formatter-write
}

fn TopItem-json(formatter: .FMT:Formatter, item: .AST:TopItem) { block {
    $item AST:TopItem-ty AST:TOP_ITEM_FN = if {
        $formatter $item AST:TopItem-function Function-json break
    }
    $item AST:TopItem-ty AST:TOP_ITEM_MEM = if {
        $formatter &item.mem Local-json break
    }
    $item AST:TopItem-ty AST:TOP_ITEM_IMPORT = if {
        $formatter &item.imp Import-json break
    }
    2 "TopItem-json TopItem-ty: " IO:write-all IO:check
    2 $item AST:TopItem-ty AST:top-item-ty-name IO:write-all IO:check
    2 IO:newline
    1 CORE:exit
} }

fn write-escaped(formatter: .FMT:Formatter, ptr: .i32, len: i32) {
    memory buf: i32 1
    local i: i32
    loop {
        $i $len = if { break }
        $formatter $buf $ptr $i + load8 $buf CORE:escape FMT:Formatter-write
        $i 1 + #i
    }
}

fn Import-json(formatter: .FMT:Formatter, imp: .AST:Import) {
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent

    $formatter FMT:Formatter-write-indent
    $formatter "\"ty\": \"import\",\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"path\": \"" FMT:Formatter-write
    $formatter $imp.path L:Token-lexeme ~ 1 STR:Str-drop 1 STR:Str-drop-end STR:Str-unpack write-escaped
    $formatter "\",\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"ident\": \"" FMT:Formatter-write
    $formatter $imp.ident L:Token-lexeme ~ STR:Str-unpack write-escaped
    $formatter "\"\n" FMT:Formatter-write


    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}

fn Function-json(formatter: .FMT:Formatter, fun: .AST:Function) {
    local i: i32
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent

    $formatter FMT:Formatter-write-indent
    $formatter "\"ty\": \"function\",\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"ident\": \"" FMT:Formatter-write
    $formatter $fun AST:Function-ident L:Token-lexeme ~ STR:Str-unpack write-escaped
    $formatter "\",\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"export\": " FMT:Formatter-write
    $fun.export !i32 0 = if {
        $formatter "null" FMT:Formatter-write
    } else {
        $formatter "\"" FMT:Formatter-write
        $formatter $fun.export L:Token-lexeme ~ 1 STR:Str-drop 1 STR:Str-drop-end STR:Str-unpack write-escaped
        $formatter "\"" FMT:Formatter-write
    }
    $formatter ",\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"body\": [\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent
    
    loop {
        $i $fun.body.len = if { break }
        
        $formatter &fun.body $i Array:get<AST:Word> Word-json
        $i 1 + $fun.body.len /= if {
            $formatter "," FMT:Formatter-write
        }
        $formatter "\n" FMT:Formatter-write

        $i 1 + #i
    }

    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "],\n" FMT:Formatter-write

    $formatter FMT:Formatter-write-indent
    $formatter "\"locals\": [\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent
    
    0 #i
    loop {
        $i &fun.locals AST:Locals-len = if { break }
        
        $formatter FMT:Formatter-write-indent
        $formatter &fun.locals $i AST:Locals-get Local-json
        $i 1 + &fun.locals AST:Locals-len /= if {
            $formatter "," FMT:Formatter-write
        }
        $formatter "\n" FMT:Formatter-write

        $i 1 + #i
    }

    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "]\n" FMT:Formatter-write

    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}

fn Word-json(formatter: .FMT:Formatter, word: .AST:Word) {
    $formatter FMT:Formatter-write-indent
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent

    $formatter FMT:Formatter-write-indent
    $formatter "\"ty\": \"" FMT:Formatter-write

    loop {
        $word.ty AST:WORD_NUMBER = if {
            $formatter "number\",\n" FMT:Formatter-write

            $formatter FMT:Formatter-write-indent
            $formatter "\"number\": " FMT:Formatter-write
            $word.number $formatter U:i32-format
            $formatter "\n" FMT:Formatter-write
            break
        }
        $word.ty AST:WORD_STRING = if {
            $formatter "string\",\n" FMT:Formatter-write

            $formatter FMT:Formatter-write-indent
            $formatter "\"string\": \"" FMT:Formatter-write
            $formatter $word.string STR:Str-unpack write-escaped
            $word.number $formatter U:i32-format
            $formatter "\"\n" FMT:Formatter-write
            break
        }
        $word.ty AST:WORD_CALL = if {
            $formatter "call\",\n" FMT:Formatter-write

            $formatter FMT:Formatter-write-indent
            $formatter "\"ident\": \"" FMT:Formatter-write
            $formatter $word AST:Word-ident ~ STR:Str-unpack write-escaped
            $formatter "\"" FMT:Formatter-write

            $word.qualifier !i32 0 /= if {
                $formatter ",\n" FMT:Formatter-write
                $formatter FMT:Formatter-write-indent
                $formatter "\"qualifier\": \"" FMT:Formatter-write
                $formatter $word.qualifier ~ STR:Str-unpack write-escaped
                $formatter "\"" FMT:Formatter-write
            }
            $formatter "\n" FMT:Formatter-write
            break
        }
        $word.ty AST:WORD_GET_LOCAL = if {
            $formatter "get_local\",\n" FMT:Formatter-write
            $formatter FMT:Formatter-write-indent
            $formatter "\"token\": " FMT:Formatter-write
            $formatter $word.token Token-json
            $formatter "\n" FMT:Formatter-write
            break
        }
        $formatter $word.ty AST:word-ty-name FMT:Formatter-write
        $formatter "\"\n" FMT:Formatter-write
        break
    } 
    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}

fn Local-json(formatter: .FMT:Formatter, locl: .AST:Local) {
    $formatter "{ \"ident\": \"" FMT:Formatter-write
    $formatter $locl.ident L:Token-lexeme ~ STR:Str-unpack write-escaped
    $formatter "\" }" FMT:Formatter-write
}

fn Token-json(formatter: .FMT:Formatter, token: .L:Token) {
    $formatter "{\n" FMT:Formatter-write
    $formatter FMT:Formatter-indent

    $formatter FMT:Formatter-write-indent
    $formatter "\"lexeme\": \"" FMT:Formatter-write
    $formatter $token.lexeme STR:Str-unpack write-escaped
    $formatter "\"\n" FMT:Formatter-write

    $formatter FMT:Formatter-dedent
    $formatter FMT:Formatter-write-indent
    $formatter "}" FMT:Formatter-write
}

