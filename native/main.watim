import "../std/alloc.watim" as A
import "../std/args.watim" as ARGS
import "../std/core.watim" as CORE
import "../std/format.watim" as FMT
import "../std/fs.watim" as FS
import "../std/io.watim" as IO
import "../std/map.watim" as MAP
import "../std/str.watim" as STR
import "../std/string.watim" as S
import "../std/util.watim" as U

import "./ast.watim" as AST
import "./checker.watim" as C
import "./wat_gen.watim" as GEN
import "./lexer.watim" as L
import "./mem.watim" as MEM
import "./module.watim" as M
import "./parser.watim" as P
import "./resolver.watim" as R
import "./dump.watim" as DUMP

fn print-usage-and-exit() {
    2 "The native Watim compiler\n\n" IO:write-all IO:check
    2 "Usage: wasmtime --dir=. ./watim.wasm <watim-source-file>\n" IO:write-all IO:check
    2 "Options:\n" IO:write-all IO:check
    2 "  -q, --quiet    Don't print any logs to stderr\n" IO:write-all IO:check
    2 "  --parse-ast    Parse stdin into a watim AST in print it as JSON\n" IO:write-all IO:check
    1 CORE:exit
}

fn find-flag(args: .S:StringVec, ptr: .i32, len: i32) -> bool {
    $args $ptr $len S:StringVec-find if { 
        $args flip S:StringVec-remove S:String-free
        1 1 =
    } else { 
        drop 
        0 1 =
    }
}

fn main() {
    memory alloc-mem: i32 25165824 // 24 MiB
    local args: S:StringVec
    local mem: S:String
    local path: .S:String
    local formatter: FMT:Formatter
    local formatted: S:String
    local modules: M:Modules
    local stack-start: i32

    $alloc-mem 25165824 A:init
    FS:init
    ARGS:get-args #args
    S:String-empty #mem

    enable-logging
    COMPILE set-mode

    &args "--quiet" find-flag if { disable-logging }
    &args "-q" find-flag if { disable-logging }
    &args "--parse-ast" find-flag if { PARSE_AST set-mode }

    &args S:StringVec-len 1 le if { print-usage-and-exit }
    &args 1 S:StringVec-get #path 
 
    mode COMPILE = if {
        M:Modules-new #modules
        &modules &mem $path S:String-unpack load-module-recursive
        &modules R:resolve
        &mem S:String-len &modules MEM:process #stack-start
        &modules C:check
        &modules M:Modules-mark-reachable

        FMT:Formatter-new #formatter
        &formatter $stack-start &mem &modules GEN:generate
        $formatter FMT:Formatter-into-string #formatted
        1 &formatted S:String-unpack IO:write-all IO:check
        1 "\n" IO:write-all IO:check
        logging-enabled if { 2 A:report }
        $formatted S:String-free

        &modules M:Modules-free
    }

    mode PARSE_AST = if {
        parse-ast
    }

    $args S:StringVec-free
    $mem S:String-free
    FS:uninit
    A:is-empty not if {
        A:root A:print-alloc-list
        2 A:report
        2 "MEMORY LEAK DETECTED\n" IO:write-all IO:check
        1 CORE:exit
    }
    logging-enabled if { 2 A:report }
}

fn parse-ast() {
    local input: S:String
    local code: i32
    local tokens: L:Tokens
    local mem: S:String
    local items: .AST:TopItems
    local types: .AST:Types
    local formatter: FMT:Formatter
    local json: S:String

    0 FS:read-all #code 
    $code 0 /= if {
        2 "Failed to read stdin, Error Code: " IO:write-all IO:check
        2 $code IO:print-to-fd
        drop
    } else { 
        #input 
    }
    &input "stdin.watim" STR:Str-new L:lex #tokens
    S:String-empty #mem
    &mem &tokens P:parse #types #items
    
    FMT:Formatter-new #formatter
    &formatter $items DUMP:TopItems-json
    &formatter "\n" FMT:Formatter-write

    $items AST:TopItems-free
    $input S:String-free
    $tokens L:Tokens-free
    $mem S:String-free
    $types AST:Types-free

    $formatter FMT:Formatter-into-string #json
    1 &json S:String-unpack IO:write-all IO:check
    $json S:String-free
}

fn load-module-recursive(modules: .M:Modules, mem: .S:String, path-ptr: .i32, path-len: i32) {
    local module: M:Module
    local imps: .AST:Imports
    local i: i32
    logging-enabled if {
        2 "Loading module: " IO:write-all IO:check
        2 $path-ptr $path-len IO:write-all IO:check
        2 "\n" IO:write-all IO:check
    }
    $path-ptr $path-len $mem M:Module-load #module
    &module M:Module-imports #imps
    $modules $path-ptr $path-len S:String-new $module M:Modules-insert
    
    loop {
        $i $imps AST:Imports-len = if { break }
        $modules $imps $i AST:Imports-get-value S:String-unpack M:Modules-get if {
            drop
        } else {
            drop
            $modules $mem 
            $imps $i AST:Imports-get-value S:String-unpack 
            load-module-recursive
        }
        $i 1 + #i
    }
}

memory LOGGING: bool 4
fn enable-logging() { $LOGGING 0 0 = store }
fn disable-logging() { $LOGGING 0 1 = store }
fn logging-enabled() -> bool { $LOGGING ~ }

fn COMPILE() -> i32 { 1 }
fn PARSE_AST() -> i32 { 2 }

memory MODE: i32 4
fn set-mode(mode: i32) { $MODE $mode store }
fn mode() -> i32 { $MODE ~ }

fn start "_start" () {
    // grow memory to 512 * 2B^16 = 32 MiB
    512 mem-grow 1 /= if { 1 CORE:exit } 
    main
}

