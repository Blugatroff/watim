import "../std/alloc.watim" as A
import "../std/args.watim" as ARGS
import "../std/core.watim" as CORE
import "../std/fmt.watim" as FMT
import "../std/fs.watim" as FS
import "../std/io.watim" as IO
import "../std/str.watim" as STR
import "../std/util.watim" as U
import "../std/array.watim" as Array
import "../std/arena.watim" as Arena
import "../std/arena-graph.watim" as ArenaGraph
import "../std/byte-array.watim" as ByteArray
import "../std/page-alloc.watim" as PA

import "./ast.watim" as AST
import "./checker.watim" as C
import "./wat_gen.watim" as GEN
import "./lexer.watim" as L
import "./mem.watim" as MEM
import "./module.watim" as M
import "./parser.watim" as P
import "./resolver.watim" as R
import "./dump.watim" as DUMP
import "./monomorph.watim" as MONO
import "./logging.watim" as LOGGING

fn print-usage-and-exit() {
    2 "The native Watim compiler\n\n" IO:write-all IO:check
    2 "Usage: watim <watim-source-file>\n" IO:write-all IO:check
    2 "Options:\n" IO:write-all IO:check
    2 "  -q, --quiet    Don't print any logs to stderr\n" IO:write-all IO:check
    2 "  --parse-ast    Parse stdin into a watim AST in print it as JSON\n" IO:write-all IO:check
    1 CORE:exit
}

fn find-flag(args: .Array:Array<STR:Str>, ptr: .i32, len: i32) -> bool {
    $ptr $len STR:Str-new @str
    $args \STR:Str-eq &str Array:find<STR:Str, .STR:Str> if {
        $args flip Array:remove<STR:Str> drop
        1 1 =
    } else { 
        drop
        0 1 =
    }
}

fn main "_start" () {
    1 mem-grow drop // make sure there is enough stack-space

    Arena:init-temp

    0!.Arena:Arena Arena:temp @temp @save
    $temp ARGS:get-args @args

    LOGGING:enable
    COMPILE set-mode

    &args "-q" find-flag 
    &args "--quiet" find-flag or if { LOGGING:disable }
    &args "--parse-ast" find-flag if { PARSE_AST set-mode }
    &args "--arena-graphs" find-flag if { ArenaGraph:enable LOGGING:disable }

    $args.len 1 le if { print-usage-and-exit }

    ArenaGraph:begin

    "Main" Arena:new @arena
    &args 1 Array:remove<STR:Str> &arena flip STR:Str-copy-into @path
    
    Arena:clear-temp
    Arena:init-temp
    
    1 16 rotl 32 * @alloc-mem
    &arena $alloc-mem Arena:alloc-bytes @alloc-ptr
    $alloc-ptr $alloc-mem A:init

    &arena FS:init "Failed to init fs" IO:exit-with-message @fs

    mode COMPILE = if {
        M:Modules-new @modules
        ByteArray:new @mem
        &arena "load-modules" ArenaGraph:mark
        &arena &fs &modules &mem $path load-module-recursive
        &arena "R:resolve" ArenaGraph:mark
        &arena &modules R:resolve
        &arena "MEM:process" ArenaGraph:mark
        $mem.len &modules MEM:process @stack-start
        &arena "C:check" ArenaGraph:mark
        &arena &modules C:check
        &arena "Modules-mark-reachable" ArenaGraph:mark
        &modules M:Modules-mark-reachable
        &arena "gather-instances" ArenaGraph:mark
        &arena &modules MONO:gather-instances

        FMT:Formatter-stdout @formatter
        &arena "GEN:generate" ArenaGraph:mark
        &formatter $stack-start &mem &modules GEN:generate
        1 "\n" IO:write-all IO:check

        &modules M:Modules-free
    }
    mode PARSE_AST = if {
        &arena parse-ast
    }

    &arena Arena:clear
    ArenaGraph:end
    
    LOGGING:enabled if {
        2 "Used " IO:write-all IO:check
        2 0 mem-grow IO:print-to-fd
        2 " 64KiB pages of memory = " IO:write-all IO:check
        2 0 mem-grow PA:page-size * 1 20 rotl 1 - + 1 20 rotl / IO:print-to-fd
        2 "MiB\n" IO:write-all IO:check
    }
}

fn parse-ast(arena: .Arena:Arena) {
    $arena Arena:save @save
    $arena 0 FS:read-all @code 
    $code 0 /= if {
        2 "Failed to read stdin, Error Code: " IO:write-all IO:check
        2 $code IO:print-to-fd
        1 CORE:exit
    }
    @input

    ByteArray:new @mem
    $arena 
    &mem 
    $arena $input "stdin.watim" STR:Str-new L:lex @tokens
    &tokens P:parse @fields @types @items
    
    FMT:Formatter-stdout @formatter
    &formatter &items DUMP:TopItems-json
    &formatter "\n" FMT:Formatter-write

    $arena $save Arena:restore
}

fn load-module-recursive(arena: .Arena:Arena, fs: .FS:FileSystem, modules: .M:Modules, mem: .ByteArray:T, path: STR:Str) {
    LOGGING:enabled if {
        2 "Loading module: " IO:write-all IO:check
        2 $path STR:Str-unpack IO:write-all IO:check
        2 IO:newline
    }
    $arena "loading-module" ArenaGraph:mark
    $arena $fs $path $mem M:Module-load @module
    &module M:Module-imports @imps
    $arena $modules $path $module M:Modules-insert
    
    0 @i
    loop {
        $i $imps AST:Imports-len = if { break }
        $modules $imps $i AST:Imports-get-value .path ~ STR:Str-unpack M:Modules-get if {
            drop
        } else {
            drop
            $arena $fs
            $modules $mem 
            $imps $i AST:Imports-get-value .path ~
            load-module-recursive
        }
        $i 1 + #i
    }
}

fn COMPILE() -> i32 { 1 }
fn PARSE_AST() -> i32 { 2 }

memory MODE: i32 4
fn set-mode(mode: i32) { $MODE $mode store }
fn mode() -> i32 { $MODE ~ }

