import "../std/alloc.watim" as A
import "../std/args.watim" as ARGS
import "../std/string.watim" as S
import "../std/io.watim" as IO
import "../std/fs.watim" as FS
import "../std/core.watim" as CORE
import "./lexer.watim" as L
import "./ast.watim" as AST
import "./parser.watim" as P

fn f() {
    memory alloc-mem: i32 4000000 4;
    local args: .S:StringVec
    local str: .S:String
    local tokens: .L:Tokens
    local items: .AST:TopItems
    local mem: .S:String
    local formatted: .S:String
    local types: .AST:Types

    $alloc-mem 4000000 A:init
    ARGS:get-args #args
    
    $args 1 S:StringVec-get S:String-unpack FS:read-file IO:check #str
    $str $args 1 S:StringVec-get L:lex #tokens
    $tokens L:Tokens-print
    1 "\n" IO:write-all IO:check
    $tokens P:parse #types #mem #items 
    $items AST:TopItems-format #formatted
    1 $formatted S:String-unpack IO:write-all IO:check
    1 "\n" IO:write-all IO:check
    A:report
    $formatted S:String-free
    $mem S:String-free
    $items AST:TopItems-free
    $types AST:Types-free

    $tokens L:Tokens-free
    $str S:String-free
    $args S:StringVec-free

    A:is-empty not if {
        A:root A:print-alloc-list
        A:report
        1 "MEMORY LEAK DETECTED\n" IO:write-all IO:check
    }
}

fn main "_start" () {
    1023 mem-grow 1 /= if {
        1 CORE:exit
    }
    f
}

