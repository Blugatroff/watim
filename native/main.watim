import "../std/core.watim" as Core
import "../std/result.watim" as Result (Result(Success, Error))
import "../std/maybe.watim" as Maybe (Maybe(None, Some), or-default)
import "../std/page-alloc.watim" as PageAlloc
import "../std/arena.watim" as Arena (Arena)
import "../std/args.watim" as Args
import "../std/array.watim" as Array (Array)
import "../std/io.watim" as IO (Error(Noent, Raw))
import "../std/fs.watim" as FS (FileSystem)
import "../std/bytes.watim" as Bytes
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/page-alloc.watim" as PA
import "../std/fmt.watim" as Fmt
import "../std/fmt-utils.watim" as Fmt (ByteSlice-format)
import "../std/map.watim" as Map (Map)
import "../std/util.watim" as Util (i32-format)

import "./active-memory.watim" as ActiveMemory
import "./logging.watim" as Logging
import "./lexer.watim" as Lexer (Token, Token-lexeme, TokenLocation)
import "./parser.watim" as Parser (parse, ParseError-print, ParseError)
import "./pretty-print.watim" as PrettyPrint (PrettyPrinter-new)
import "./resolving/resolver.watim" as Resolved
import "./resolving/module.watim" as Resolved
import "./resolving/top-items.watim" as Resolved
import "./resolving/type.watim" as Resolved (ModuleId)
import "./resolving/type-lookup.watim" as Resolved (TypeLookup)
import "./unstacking/unstacker.watim" as Unstacker
import "./unstacking/graph.watim" as Graph
import "./inference/ast.watim" as Checked
import "./inference/inference.watim" as Inference
import "./monomorphization/monomizer.watim" as Monomizer (Monomized-format, monomize)
import "./local-merging.watim" as LocalMerging (merge-locals)
import "./codegen/generator.watim" as Generator

fn print-usage-and-exit() {
    2 "The native Watim compiler\n\n" IO:write-all IO:check
    2 "Usage: watim <command> <watim-source-file> [options]\n" IO:write-all IO:check
    2 "Commands:\n" IO:write-all IO:check
    2 "  lex       Lex code and print the Tokens.\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  parse     Parse code and print the AST\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  resolve   resolve all identifiers\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  unstack   run unstacker for a function\n" IO:write-all IO:check
    2 "    <path> <function>\n" IO:write-all IO:check
    2 IO:newline
    2 "  graph     generate graph from unstacked function\n" IO:write-all IO:check
    2 "    <path> <function>\n" IO:write-all IO:check
    2 IO:newline
    2 "  infer     run type inference for function\n" IO:write-all IO:check
    2 "    <path> <function> [log-level]\n" IO:write-all IO:check
    2 "    log-level = 0 | 1 | 2\n" IO:write-all IO:check
    2 IO:newline
    2 "  check     unstack and infer everything\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  monomize  monomorphize all generic functions\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  optimize  run optimization passes\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check
    2 IO:newline
    2 "  compile   compile to webassembly text format\n" IO:write-all IO:check
    2 "    <path>\n" IO:write-all IO:check

    2 "Options:\n" IO:write-all IO:check
    2 "  -q, --quiet  Don't print any logs to stderr\n" IO:write-all IO:check
    1 Core:exit
}

fn find-flag(args: .Array<ByteSlice>, ptr: .i8, len: i32) -> bool {
    $ptr $len make ByteSlice @str
    $args \ByteSlice:eq-by-ref &str Array:find<ByteSlice, .ByteSlice> if {
        $args flip Array:remove<ByteSlice> drop
        1 1 =
    } else {
        drop
        0 1 =
    }
}

struct CompilationArgs {
    file-path: Maybe<ByteSlice>
    guard-stack: bool
}

variant SingleFileCommand {
    case Lex -> Maybe<ByteSlice>
    case Parse -> Maybe<ByteSlice>
    case Pretty -> Maybe<ByteSlice>
}
fn SingleFileCommand-path(cmd: .SingleFileCommand) -> .Maybe<ByteSlice> {
    $cmd match {
        case Lex -> {}
        case Parse -> {}
        case Pretty -> {}
    }
}

struct GraphArgs {
    file-path: Maybe<ByteSlice>
    function: ByteSlice
}

struct UnstackArgs {
    file-path: Maybe<ByteSlice>
    function: ByteSlice
}

struct InferArgs {
    file-path: Maybe<ByteSlice>
    function: ByteSlice
    log-level: Inference:LogLevel
}

variant ProjectWideCommand {
    case Resolve -> Maybe<ByteSlice>
    case Check -> Maybe<ByteSlice>
    case Unstack -> UnstackArgs
    case Graph -> GraphArgs
    case Infer -> InferArgs
    case Monomize -> Maybe<ByteSlice>
    case Optimize -> Maybe<ByteSlice>
    case Compile -> CompilationArgs
}

fn ProjectWideCommand-path(cmd: .ProjectWideCommand) -> .Maybe<ByteSlice> {
    $cmd match {
        case Resolve -> {}
        case Unstack -> { .file-path }
        case Graph -> { .file-path }
        case Infer -> { .file-path }
        case Check -> {}
        case Monomize -> {}
        case Optimize -> {}
        case Compile -> { .file-path }
    }
}

variant CliCommand {
    case SingleFile -> SingleFileCommand
    case ProjectWide -> ProjectWideCommand
}
struct CliArgs {
    command: CliCommand
    quiet: bool
}

fn parse-args(arena: .Arena) -> CliArgs {
    $arena Args:get-args @args
    &args "-q" find-flag &args "--quiet" find-flag or
    $args.len 1 le if {
        print-usage-and-exit
    }
    block {
        &args 1 Array:remove<ByteSlice> @command
        $args.len 1 gt if {
            &args 1 Array:remove<ByteSlice> @path
            $path ByteSlice:unpack "-" Bytes:eq if {
                make Maybe<ByteSlice>.None
            } else {
                $path make Maybe<ByteSlice>.Some
            }
        } else { make Maybe<ByteSlice>.None } @path
        $command ByteSlice:unpack "lex" Bytes:eq if {
            $path make SingleFileCommand.Lex make CliCommand.SingleFile break
        }
        $command ByteSlice:unpack "parse" Bytes:eq if {
            $path make SingleFileCommand.Parse make CliCommand.SingleFile break
        }
        $command ByteSlice:unpack "pretty" Bytes:eq if {
            $path make SingleFileCommand.Pretty make CliCommand.SingleFile break
        }
        $command ByteSlice:unpack "resolve" Bytes:eq if {
            $path make ProjectWideCommand.Resolve make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "unstack" Bytes:eq if {
            $path &args 1 Array:remove<_> make UnstackArgs
            make ProjectWideCommand.Unstack make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "graph" Bytes:eq if {
            $path &args 1 Array:remove<_> make GraphArgs
            make ProjectWideCommand.Graph make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "infer" Bytes:eq if {
            $path
            &args 1 Array:remove<_>
            $args.len 1 gt if {
                &args 1 Array:remove<_> @log-level
                block (-> Inference:LogLevel) {
                    $log-level ByteSlice:unpack "0" Bytes:eq if { make Inference:LogLevel.NoLogs break }
                    $log-level ByteSlice:unpack "1" Bytes:eq if { make Inference:LogLevel.OnlyStructure break }
                    $log-level ByteSlice:unpack "2" Bytes:eq if { make Inference:LogLevel.FullSources break }
                    2 $log-level ByteSlice:unpack IO:write-all IO:check
                    2 " is not a valid log-level, expected `0`, `1` or `2`\n" IO:write-all IO:check
                    1 Core:exit Core:unreachable<Inference:LogLevel>
                }
            } else { make Inference:LogLevel.NoLogs }
            make InferArgs
            make ProjectWideCommand.Infer make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "check" Bytes:eq if {
            $path make ProjectWideCommand.Check make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "monomize" Bytes:eq if {
            $path make ProjectWideCommand.Monomize make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "optimize" Bytes:eq if {
            $path make ProjectWideCommand.Optimize make CliCommand.ProjectWide break
        }
        $command ByteSlice:unpack "compile" Bytes:eq if {
            $path
            &args "--guard-stack" find-flag
            make CompilationArgs make ProjectWideCommand.Compile make CliCommand.ProjectWide break
        }
        print-usage-and-exit loop { }
    }
    flip make CliArgs
}

fn read-file-or-stdin(
    arena: .Arena,
    fs: .FileSystem,
    file-path: Maybe<ByteSlice>,
    imp-location: .TokenLocation
) -> Array<i8> {
    $file-path match {
        case None -> {
            $arena 0 FS:read-all
        }
        case Some -> {
            @file-path
            $arena $fs $file-path ByteSlice:unpack FS:read-file
        }
    } match {
        case Success -> {}
        case Error -> {
            match {
                case Noent -> {
                    $file-path match {
                        case None -> { "-" }
                        case Some -> { ByteSlice:unpack }
                    } @file-path-len @file-path-ptr

                    $imp-location 0 !.TokenLocation /= if {
                        2 $imp-location Lexer:print-location IO:check
                        2 " " IO:write-all IO:check
                    }
                    2 "File not found: " IO:write-all IO:check
                    2 $file-path-ptr $file-path-len IO:write-all IO:check
                    2 "\n" IO:write-all IO:check
                    1 Core:exit
                }
                case Raw -> {
                    IO:check
                }
            }
            Core:unreachable<Array<i8>>
        }
    }
}

fn lex(arena: .Arena, watim-code: ByteSlice) -> Array<Token> {
    $arena Arena:temp @tmp-arena @save
    $tmp-arena &watim-code Lexer:lex @tokens
    $arena &watim-code Lexer:lex @tokens
    "Tokens" Arena:new @tokens-arena
    $arena &tokens Lexer:Tokens-copy
    $tmp-arena $save Arena:restore
}

global STACK_SIZE: i32

fn main "_start" () {
    20 #STACK_SIZE
    $STACK_SIZE 1 - mem-grow drop
    PA:page-size $STACK_SIZE * set-stack-size
    Logging:enable
    ActiveMemory:init
    Arena:init-temp
    "Setup" Arena:new @arena
    &arena FS:init IO:check @fs
    &arena parse-args @args
    $args.quiet if { Logging:disable }

    &fs $args.command match {
        case SingleFile -> { run-single-file-command }
        case ProjectWide -> { run-project-wide-command }
    }
    &arena Arena:shred
    exit
}

fn run-single-file-command(fs: .FileSystem, command: SingleFileCommand) { block {
    "Main" Arena:new @arena
    &command SingleFileCommand-path ~ @file-path

    "Files" Arena:new @files-arena
    &files-arena FS:init IO:check @fs
    &files-arena &fs $file-path 0 !.TokenLocation read-file-or-stdin @watim-code
    "Tokens" Arena:new @tokens-arena
    &tokens-arena &watim-code Array:to-slice lex @tokens
    &files-arena Arena:shred

    $command match {
        case Lex -> {
            drop
            0 @i
            loop {
                $tokens.len $i = if { break }
                1 &tokens $i Array:get<Lexer:Token> Lexer:Token-print
                1 IO:newline
                $i 1 + #i
            }
            Logging:enabled if {
                2 "tokens-arena usage: " IO:write-all IO:check
                2 &tokens-arena Arena:usage IO:print IO:check
                2 IO:newline
            }
            &tokens-arena Arena:clear
            &arena Arena:clear
            break
        }
        case _ -> { drop }
    }

    &arena $tokens parse match {
        case Error -> {
            2 flip $file-path match {
                case None -> { "-" }
                case Some -> { ByteSlice:unpack }
            } ParseError-print drop
            2 IO:newline

            &tokens-arena Arena:clear
            &arena Arena:clear
            exit
            Core:unreachable<Parser:Module>
        }
        case Success -> {}
    }
    @module

    $command match {
        case Parse -> {
            drop

            1 Fmt:to-fd @fmt
            &fmt &module Parser:Module-format
            &fmt "\n" Fmt:write

            &tokens-arena Arena:clear
            &arena Arena:clear
            break
        }
        case _ -> { drop }
    }
    $command match {
        case Pretty -> {
            drop
            \write-stdout PrettyPrinter-new @pp
            &module &pp PrettyPrint:Module-pretty IO:check
            1 IO:newline
            1 IO:newline

            &tokens-arena Arena:clear
            &arena Arena:clear
            break
        }
        case _ -> { drop Core:unreachable<Core:Unit> drop }
    }
} }

fn run-project-wide-command(fs: .FileSystem, command: ProjectWideCommand) { block {
    "Main" Arena:new @arena
    &command ProjectWideCommand-path ~ @file-path

    \ByteSlice:eq-by-ref Map:new<ByteSlice, Parser:Module> @modules
    &arena $fs $file-path 0 !.TokenLocation &modules load-modules-recursively
    &arena &modules determine-compilation-order @modules
    "Resolving" Arena:new @resolving-arena
    &resolving-arena Arena:usage @start-usage
    &resolving-arena &modules Resolved:resolve-modules match {
        case Error -> {
            2 flip &modules Resolved:ResolveError-print drop
            2 IO:newline
            1 Core:exit
            Core:unreachable<Map<ByteSlice, Resolved:Module>>
        }
        case Success -> {}
    } @resolved-modules

    $command match {
        case Resolve -> {
            drop
            Logging:enabled if {
                &resolving-arena Arena:usage @end-usage
                $end-usage $start-usage - @usage
                2 "resolving used: " IO:write-all IO:check
                2 $usage IO:print IO:check
                2 " bytes (" IO:write-all IO:check
                2 $usage print-byte-count IO:check
                2 ")\n" IO:write-all IO:check
            }
            1 Fmt:to-fd @fmt
            &arena &fmt 1024 Fmt:buffered @buf @fmt
            &fmt \ByteSlice-format \Resolved:Module-format &resolved-modules Map:format-multi-line<ByteSlice, Resolved:Module>
            &fmt "\n" Fmt:write
            $buf Fmt:flush
            &resolving-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    &resolved-modules forbid-directly-recursive-types

    $command match {
        case Unstack -> {
            @args

            &resolved-modules.values Array:last<_> @module
            &module.functions &args.function Map:get<_, _> Maybe:assert-some<_> match {
                case Resolved:FunctionOrExtern.Extern -> { drop }
                case Resolved:FunctionOrExtern.Function -> {
                    @function
                    &arena &resolved-modules.values $function Unstacker:unstack-function @function

                    1 Fmt:to-fd @fmt
                    &arena &fmt 1024 Fmt:buffered @buf @fmt
                    &fmt &function Unstacker:Function-format
                    &fmt "\n" Fmt:write
                    $buf Fmt:flush
                }
            }

            &resolving-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    $command match {
        case Graph -> {
            @args

            &resolved-modules.values Array:last<_> @module
            &module.functions &args.function Map:get<_, _> Maybe:assert-some<_> match {
                case Resolved:FunctionOrExtern.Extern -> { drop }
                case Resolved:FunctionOrExtern.Function -> {
                    @function
                    &arena &resolved-modules.values $function Unstacker:unstack-function @function

                    1 Fmt:to-fd @fmt
                    &arena &fmt 1024 Fmt:buffered @buf @fmt
                    &fmt &function Graph:graph-function
                    &fmt "\n" Fmt:write
                    $buf Fmt:flush
                }
            }
            &resolving-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    "Inference" Arena:new @inference-arena
    $command match {
        case Infer -> {
            @args
            1 Fmt:to-fd @fmt
            &arena &fmt 1024 Fmt:buffered @buf @fmt

            &resolved-modules.keys Array:last<_> @file-path
            &resolved-modules.values Array:last<_> @module
            &module.functions &args.function Map:get<_, _> Maybe:assert-some<_> match {
                case Resolved:FunctionOrExtern.Extern -> { drop }
                case Resolved:FunctionOrExtern.Function -> {
                    @function
                    &arena &resolved-modules.values $function Unstacker:unstack-function @function

                    &inference-arena &resolved-modules.values &module.globals.values &function $args.log-level Inference:infer-function match {
                        case Success -> {}
                        case Error -> {
                            & $file-path ~ InferenceError-with-file-path
                            2 flip & InferenceError-print drop
                            2 IO:newline
                            1 Core:exit
                            Core:unreachable<Checked:Function>
                        }
                    } @function

                    1 Fmt:to-fd @fmt
                    &arena &fmt 1024 Fmt:buffered @buf @fmt
                    &fmt &function Checked:Function-format
                    &fmt "\n" Fmt:write
                    $buf Fmt:flush
                }
            }

            &resolving-arena Arena:shred
            &inference-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    &inference-arena &resolved-modules infer-modules match {
        case Success -> {}
        case Error -> {
            2 flip & InferenceError-print drop
            2 IO:newline
            1 Core:exit
            Core:unreachable<Map<ByteSlice, Checked:Module>>
        }
    } @inferred

    $command match {
        case Check -> {
            drop
            1 Fmt:to-fd @fmt
            &arena &fmt 1024 Fmt:buffered @buf @fmt
            &fmt \ByteSlice-format \Checked:Module-format &inferred Map:format-multi-line<_, _>
            &fmt "\n" Fmt:write
            $buf Fmt:flush
            &resolving-arena Arena:shred
            &inference-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    "Monomizing" Arena:new @monomizing-arena
    &monomizing-arena &inferred monomize @monomized
    &resolving-arena Arena:shred
    &inference-arena Arena:shred
    $command match {
        case Monomize -> {
            drop
            1 Fmt:to-fd @fmt
            &arena &fmt 1024 Fmt:buffered @buf @fmt
            &fmt &monomized Monomized-format
            &fmt "\n" Fmt:write
            $buf Fmt:flush
            &monomizing-arena Arena:shred
            &arena Arena:shred
            break
        }
        case _ -> { drop }
    }

    &monomized merge-locals
    $command match {
        case Optimize -> {
            drop
            1 Fmt:to-fd @fmt
            &arena &fmt 1024 Fmt:buffered @buf @fmt
            &fmt &monomized Monomized-format
            &fmt "\n" Fmt:write
            $buf Fmt:flush
            &monomizing-arena Arena:shred
            &arena Arena:shred
            break
        }
        case Compile -> {}
        case _ -> { drop break }
    }
    @compilation-args
    1 Fmt:to-fd "\t" Fmt:use-indentation @fmt
    &arena &fmt 1024 Fmt:buffered @buf @fmt
    &fmt &monomized $compilation-args.guard-stack Generator:generate
    &fmt "\n" Fmt:write
    $buf Fmt:flush
    &monomizing-arena Arena:shred
    &arena Arena:shred
} }

fn forbid-directly-recursive-types(modules: .Map<ByteSlice, Resolved:Module>) {
    0 loop {
        @i $i $modules.values.len = if { break }

        &modules.values $i Array:get<_> @module
        &modules.keys $i Array:get<_> ~ @path
        $i make ModuleId @module-id
        $module-id &module.type-definitions.values $modules make Resolved:TypeLookup @type-lookup
        0 loop {
            @i $i $module.type-definitions.values.len = if { break }
            $module-id $i make Resolved:CustomTypeHandle @type-handle
            &module.type-definitions.values $i Array:get<_> @type-definition
            &type-lookup &type-handle Resolved:is-directly-recursive if {
                2 Fmt:to-fd @fmt
                $type-definition Resolved:TypeDefinition-name @name
                &fmt $path ByteSlice:unpack Fmt:write
                &fmt ":" Fmt:write
                &fmt $name Lexer:Token-line i32-format
                &fmt ":" Fmt:write
                &fmt $name Lexer:Token-column i32-format
                &fmt " structs and variants cannot be recursive" Fmt:write
                &fmt "\n" Fmt:write
                1 Core:exit
            }
            $i 1 +
        }

        $i 1 +
    }
}

struct InferenceError {
    file-path: ByteSlice
    token: .Token
    msg-ptr: .i8
    msg-len: i32
}
fn InferenceError-with-file-path(self: .Inference:InferenceError, file-path: ByteSlice) -> InferenceError {
    $file-path $self.token $self.msg-ptr $self.msg-len make InferenceError
}
fn InferenceError-print(fd: i32, self: .InferenceError) -> i32 { block {
    $self.token 0 !.Token /= if {
        $fd
        $self.file-path $self.token Lexer:Token-location make Lexer:TokenLocation &
        Lexer:print-location Core:dup<i32> 0 /= if { break } drop
    }
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.msg-ptr $self.msg-len IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd "\n" IO:write-all
} }

fn infer-modules(arena: .Arena, resolved: .Map<ByteSlice, Resolved:Module>) -> Result<Map<ByteSlice, Checked:Module>, InferenceError> {
    $arena \ByteSlice:eq-by-ref $resolved.values.len Map:new-with-capacity<ByteSlice, Checked:Module> @inferred
    0 loop (i32 -> Result<Map<ByteSlice, Checked:Module>, InferenceError>) {
        @i $i $resolved.values.len = if { $inferred make Result<Map<ByteSlice, Checked:Module>, InferenceError>.Success break }

        &resolved.keys $i Array:get<_> ~ @file-path

        Logging:enabled if {
            2 "infer-module: " IO:write-all IO:check
            2 $file-path ByteSlice:unpack IO:write-all IO:check
            2 "\n" IO:write-all IO:check
        }

        &inferred
        $file-path
        $arena &resolved.values &resolved.values $i Array:get<_> infer-module match {
            case Error -> {
                & $file-path InferenceError-with-file-path
                make Result<Map<ByteSlice, Checked:Module>, InferenceError>.Error break
            }
            case Success -> {}
        }
        Map:insert-assert-no-alloc<_, _> drop
        $i 1 +
    }
}

fn infer-module(arena: .Arena, modules: .Array<Resolved:Module>, module: .Resolved:Module) -> Result<Checked:Module, Inference:InferenceError> { block {
    $arena $module.functions.values.len Array:new-with-capacity<Checked:FunctionOrExtern> @functions
    0 loop (i32 -> Result<Array<Checked:FunctionOrExtern>, Inference:InferenceError>) {
        @i $i $module.functions.values.len = if { $functions make Result<Array<Checked:FunctionOrExtern>, Inference:InferenceError>.Success break }
        &module.functions.values $i Array:get<_> match {
            case Resolved:FunctionOrExtern.Extern -> {
                ~ make Checked:FunctionOrExtern.Extern &functions flip Array:push-assert-no-alloc<_>
            }
            case Resolved:FunctionOrExtern.Function -> {
                @function
                $arena Arena:temp @temp @save
                $temp $modules $function Unstacker:unstack-function @function
                $arena $modules &module.globals.values &function make Inference:LogLevel.NoLogs Inference:infer-function match {
                    case Error -> { make Result<Array<Checked:FunctionOrExtern>, Inference:InferenceError>.Error break }
                    case Success -> {}
                } make Checked:FunctionOrExtern.Function
                $temp $save Arena:restore
                &functions flip Array:push-assert-no-alloc<_>
            }
        }
        $i 1 +
    } match {
        case Error -> { make Result<Checked:Module, Inference:InferenceError>.Error break }
        case Success -> {}
    } @functions
    make Checked:Module {
        $module.imports @imports
        $module.type-definitions.values @type-definitions
        $module.globals.values @globals
        $module.static-data @static-data
        $functions @functions
    }
    make Result<Checked:Module, Inference:InferenceError>.Success
} }

fn print-byte-count(fd: i32, bytes: i32) -> i32 {
    "KMGTP" @prefixes-len @prefixes
    0 @i
    loop {
        $i $prefixes-len = if { 0 0 / break }
        $bytes 1024 lt if {
            $fd $bytes IO:print Core:dup<i32> 0 /= if { break } drop
            $i 0 = if {
                $fd "B" IO:write-all
            } else {
                $fd $prefixes $i + 1 - ~ IO:write-byte Core:dup<i32> 0 /= if { break } drop
                $fd "iB" IO:write-all
            } break
        }
        $bytes 1024 / #bytes
        $i 1 + #i
    }
}

fn load-modules-recursively(
    arena: .Arena,
    fs: .FileSystem,
    file-path: Maybe<ByteSlice>,
    file-path-location: .TokenLocation,
    modules: .Map<ByteSlice, Parser:Module>
) { block {
    $file-path match {
        case None -> { "-" make ByteSlice }
        case Some -> {}
    } @file-path-or-dash
    $modules &file-path-or-dash Map:get<ByteSlice, Parser:Module> match {
        case None -> {}
        case Some -> { drop break }
    }
    Logging:enabled if {
        2 "Loading module: " IO:write-all IO:check
        2 $file-path-or-dash ByteSlice:unpack IO:write-all IO:check
        2 IO:newline
    }
    $arena Arena:temp @temp-arena @save

    $temp-arena $fs $file-path $file-path-location read-file-or-stdin @watim-code
    $arena &watim-code Array:to-slice lex @tokens
    $arena &tokens Lexer:Tokens-copy drop
    $arena $tokens parse match {
        case Error -> {
            2 flip $file-path-or-dash ByteSlice:unpack ParseError-print drop
            2 IO:newline
            2 Core:exit
            Core:unreachable<Parser:Module>
        }
        case Success -> {}
    } @module

    $arena
    $modules
    $file-path match { case Some -> {} case None -> { "-" make ByteSlice } }
    $module
    Map:insert<ByteSlice, Parser:Module> match {
        case None -> {}
        case Some -> { drop 0 0 / drop }
    }

    0 @i
    loop {
        $module.imports.len $i = if { break }
        &module.imports $i Array:get<Parser:Import> @imp
        &imp.path Token-lexeme 2 - flip 1 + flip make ByteSlice @imp-path
        $file-path-or-dash &imp.path Lexer:Token-location make TokenLocation @imp-path-loc
        $file-path match {
            case None -> {
                $arena $fs $imp-path make Maybe<ByteSlice>.Some &imp-path-loc $modules load-modules-recursively
            }
            case Some -> {
                ByteSlice:unpack FS:path-dir Array:init-no-copy<_> @path
                $temp-arena &path $imp-path ByteSlice:unpack Array:append-raw<_>
                $temp-arena &path Array:unpack<_> FS:normalize make ByteSlice @absolute-imp-path
                $arena $absolute-imp-path ByteSlice:copy @absolute-imp-path
                $arena $fs $absolute-imp-path make Maybe<ByteSlice>.Some &imp-path-loc $modules load-modules-recursively
            }
        }
        $i 1 + #i
    }

    $temp-arena $save Arena:restore
} }

fn determine-compilation-order(arena: .Arena, modules: .Map<ByteSlice, Parser:Module>) -> Map<ByteSlice, Parser:Module> {
    $arena Arena:temp @temp @temp-save

    $arena $modules.values.len Array:new-with-capacity<ByteSlice> @ordered-keys
    $arena $modules.values.len Array:new-with-capacity<Parser:Module> @ordered-values

    $temp $modules.values.len Array:new-with-capacity<i32> @unprocessed
    loop {
        $unprocessed.len $modules.values.len = if { break }
        $temp &unprocessed $unprocessed.len Array:push<i32>
    }

    loop {
        $unprocessed.len 0 = if { break }
        0 @i
        1 1 = @stuck
        loop {
            $unprocessed.len $i = if { break }
            &unprocessed $i Array:get<i32> ~ @module-id
            $modules $module-id Map:get-value<ByteSlice, Parser:Module> @module
            $modules $module-id Map:get-key<ByteSlice, Parser:Module> @module-file-path
            0 @j
            loop {
                $module.imports.len $j = if { 1 1 = break }
                &module.imports $j Array:get<Parser:Import>
                .path Token-lexeme 2 - @imp-path-len 1 + @imp-path-ptr
                $module-file-path ~ ByteSlice:unpack "-" Bytes:eq if {
                    $imp-path-ptr $imp-path-len make ByteSlice
                } else {
                    Array:new<i8> @absolute-path
                    $temp &absolute-path $module-file-path ~ ByteSlice:unpack FS:path-dir Array:append-raw<_>
                    $temp &absolute-path $imp-path-ptr $imp-path-len Array:append-raw<_>
                    $temp &absolute-path Array:unpack<_> FS:normalize make ByteSlice
                } @absolute-path

                // Is this an import of an already `ordered` module?
                &ordered-keys \ByteSlice:eq-by-ref &absolute-path Array:find<ByteSlice, .ByteSlice> flip drop not if {
                    // if not then postpone processing this module.
                    0 1 = break
                }
                $j 1 + #j
            } if {
                &unprocessed $i Array:remove<i32> drop
                &ordered-values &modules.values $module-id Array:get<Parser:Module> ~ Array:push-assert-no-alloc<Parser:Module>
                &ordered-keys   &modules.keys   $module-id Array:get<ByteSlice>     ~ Array:push-assert-no-alloc<ByteSlice>
                0 1 = #stuck
            } else {
                $i 1 + #i
            }
        }

        $stuck if { 0 0 / drop }
    }

    $temp $temp-save Arena:restore
    $ordered-keys $ordered-values \ByteSlice:eq-by-ref make Map<ByteSlice, Parser:Module>
}

fn write-stdout(ptr: .i8, len: i32) -> i32 {
    1 $ptr $len IO:write-all
}

fn exit() {
    Logging:enabled if {
        2 "Used " IO:write-all IO:check
        2 0 mem-grow IO:print IO:check
        2 " 64KiB pages of memory = " IO:write-all IO:check
        2 0 mem-grow $STACK_SIZE - PA:page-size * 1 20 shl 1 - + 1 20 shl / IO:print IO:check
        2 "MiB" IO:write-all IO:check
        2 ", " IO:write-all IO:check
        2 PageAlloc:active-pages IO:print IO:check
        2 " pages active" IO:write-all IO:check
        ActiveMemory:is-tracking if {
            2 ", " IO:write-all IO:check
            2 ActiveMemory:get IO:print IO:check
            2 " bytes leaked" IO:write-all IO:check
        }
        2 "\n" IO:write-all IO:check
    }
    ActiveMemory:get 0 = if { 0 } else { 1 } Core:exit
}

