import "../std/alloc.watim" as A
import "../std/args.watim" as ARGS
import "../std/string.watim" as S
import "../std/io.watim" as IO
import "../std/fs.watim" as FS
import "../std/core.watim" as CORE
import "../std/../native/lexer.watim" as L
import "./ast.watim" as AST
import "./parser.watim" as P
import "./checker.watim" as C
import "../std/map.watim" as MAP
import "./module.watim" as M

fn f() {
    memory alloc-mem: i32 4000000 4;
    local args: .S:StringVec
    local mem: .S:String
    local path: .S:String
    local module: .M:Module
    local formatted: .S:String

    $alloc-mem 4000000 A:init
    ARGS:get-args #args
    S:String-empty #mem
    
    $args 1 S:StringVec-get #path 
    $path S:String-unpack $mem M:Module-load #module

    $module M:Module-format #formatted
    1 $formatted S:String-unpack IO:write-all IO:check
    1 "\n" IO:write-all IO:check
    $formatted S:String-free

    $module M:Module-free

    $args S:StringVec-free
    $mem S:String-free

    A:is-empty not if {
        A:root A:print-alloc-list
        A:report
        1 "MEMORY LEAK DETECTED\n" IO:write-all IO:check
    }
}

fn main "_start" () {
    1023 mem-grow 1 /= if {
        1 CORE:exit
    }
    f
}

