import "../std/io.watim" as IO
import "../std/core.watim" as CORE
import "../std/fmt.watim" as FMT
import "../std/dyn-array.watim" as DynArray
import "../std/arena.watim" as Arena
import "../std/byte-array.watim" as ByteArray
import "../std/array.watim" as Array

import "./lexer.watim" as L
import "./ast.watim" as AST

fn abort-with-location(file-ptr: .i32, file-len: i32, line: i32, column: i32, msg-ptr: .i32, msg-len: i32) {
    2 $file-ptr $file-len $line $column L:print-location
    2 $msg-ptr $msg-len IO:write-all IO:check
    1 CORE:exit
}
fn abort(file-ptr: .i32, file-len: i32, msg-ptr: .i32, msg-len: i32) {
    2 $file-ptr $file-len IO:write-all IO:check
    2 ": " IO:write-all IO:check
    2 $msg-ptr $msg-len IO:write-all IO:check
    1 CORE:exit
}

fn report-stack-one-error(stack: .AST:Types, expected: .AST:Type, word: .AST:Word) {
    0 !.Arena:Arena Arena:temp @arena @save
    $arena AST:Types-new @types
    $arena $types $expected AST:Types-push
    $stack $types $word report-stack-mismatch
    $arena $save Arena:restore
}
fn expect-stack-one(stack: .AST:Types, expected: .AST:Type, word: .AST:Word) {
    $stack AST:Types-len 0 = if {
        $stack $expected $word report-stack-one-error
    }
    $stack $stack AST:Types-len 1 - AST:Types-get
    $expected
    AST:Type-eq not if {
        $stack $expected $word report-stack-one-error
    }
    $stack AST:Types-pop drop
}
fn expect-stack-fallible(stack: .AST:Types, expected: .AST:Types, word: .AST:Word) -> bool {
    local i: i32
    loop {
        $i $expected AST:Types-len = if { 0 0 = break }
        $i $stack AST:Types-len = if { 
            0 1 = break
        }
        $stack $stack AST:Types-len 1 - $i - AST:Types-get
        $expected $expected AST:Types-len 1 - $i - AST:Types-get
        AST:Type-eq not if {
            0 1 = break
        }
        $i 1 + #i 
    }
}
fn expect-stack(stack: .AST:Types, expected: .AST:Types, word: .AST:Word) {
    local i: i32
    $stack $expected $word expect-stack-fallible not if {
        $stack $expected $word report-stack-mismatch
    }
    0 #i
    loop {
        $i $expected AST:Types-len = if { break }
        $stack AST:Types-pop drop
        $i 1 + #i
    }
}
fn report-stack-mismatch(stack: .AST:Types, expected: .AST:Types, word: .AST:Word) {
    0 !.Arena:Arena Arena:temp @arena @save
    ByteArray:new @msg
    $arena &msg FMT:Formatter-into-string @formatter
    &formatter "\n\texpected: " FMT:Formatter-write
    &formatter 0 !.AST:Types $expected AST:Types-format
    &formatter "\n\tgot:      " FMT:Formatter-write
    &formatter 0 !.AST:Types $stack AST:Types-format
    &formatter "\n" FMT:Formatter-write
    $word AST:Word-location &msg ByteArray:unpack abort-with-location
    $arena $save Arena:restore
}

fn push-temp-type(arena: .Arena:Arena, temp-types: .Array:Array<.AST:Type>, type: .AST:Type) -> .AST:Type {
    $arena $temp-types $type Array:push<.AST:Type> $type
}

