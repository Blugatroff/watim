import "../../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../../std/maybe.watim" as Maybe (Maybe)
import "../../std/array.watim" as Array (Array)
import "../../std/map.watim" as Map (Map)
import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/fmt-utils.watim" as Fmt (ByteSlice-format)
import "../../std/util.watim" as Util (i32-format, bool-format)

import "../lexer.watim" as Lexer (Token, Token-format)
import "../resolving/words.watim" as Resolved (
    LocalId, GlobalId, GlobalId-format, ScopeId, ScopeId-format,
    LocalId-format, FunctionHandle, FunctionHandle-format,
    VarId, VarId-format, StringWord, StringWord-format,
    Call, Call-format, FunRef, FunRef-format)
import "../resolving/top-items.watim" as Resolved (
    Global, Global-format,
    TypeDefinition, TypeDefinition-format,
    Import, Import-format, Extern, Extern-format,
    Signature, Signature-format, LocalName, LocalName-format,
)
import "../resolving/type.watim" as Type (
    CustomTypeHandle, Type, NamedType, CustomTypeType,
    FunType, CustomTypeHandle-format, ModuleId,
    NamedType-format, Types-format, CustomTypeType-format,
    FunType-format)

struct Local {
    name: LocalName
    type: Type
    reffed: bool
    is-parameter: bool
}
fn Local-format(fmt: .Formatter, self: .Local) {
    $fmt "(Local " Fmt:write
    $fmt &self.name LocalName-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt " " Fmt:write
    $fmt $self.reffed bool-format
    $fmt " " Fmt:write
    $fmt $self.is-parameter bool-format
    $fmt ")" Fmt:write
}

struct FieldAccess {
    name: Token
    source-type: Type
    target-type: Type
    field-index: i32
}
fn FieldAccess-format(fmt: .Formatter, self: .FieldAccess) {
    $fmt "(FieldAccess " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.source-type Type:format
    $fmt " " Fmt:write
    $fmt &self.target-type Type:format
    $fmt " " Fmt:write
    $fmt $self.field-index i32-format
    $fmt ")" Fmt:write
}

struct InitLocal {
    name: Token
    type: Type
    local: LocalId
}
fn InitLocal-format(fmt: .Formatter, self: .InitLocal) {
    $fmt "(InitLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt " " Fmt:write
    $fmt &self.local LocalId-format
    $fmt ")" Fmt:write
}

struct GetLocal {
    name: Token
    var: VarId
    var-type: Type
    fields: Array<FieldAccess>
    result-taip: Type
}
fn GetLocal-format(fmt: .Formatter, self: .GetLocal) {
    $fmt "(GetLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.var VarId-format
    $fmt " " Fmt:write
    $fmt &self.var-type Type:format
    $fmt " " Fmt:write
    $fmt &self.result-taip Type:format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format-multi-line<FieldAccess>
    $fmt ")" Fmt:write
}

struct SetLocal {
    name: Token
    var: VarId
    fields: Array<FieldAccess>
    target-type: Type
}
fn SetLocal-format(fmt: .Formatter, self: .SetLocal) {
    $fmt "(SetLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.var VarId-format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format-multi-line<FieldAccess>
    $fmt " " Fmt:write
    $fmt &self.target-type Type:format
    $fmt ")" Fmt:write
}

struct StoreLocal {
    name: Token
    var: VarId
    type: Type
    fields: Array<FieldAccess>
}
fn StoreLocal-format(fmt: .Formatter, self: .StoreLocal) {
    $fmt "(StoreLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.var VarId-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format-multi-line<FieldAccess>
    $fmt ")" Fmt:write
}

struct RefLocal {
    name: Token
    var: VarId
    fields: Array<FieldAccess>
}
fn RefLocal-format(fmt: .Formatter, self: .RefLocal) {
    $fmt "(RefLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.var VarId-format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format-multi-line<FieldAccess>
    $fmt ")" Fmt:write
}

struct Cast {
    token: Token
    src: Type
    dst: Type
}
fn Cast-format(fmt: .Formatter, self: .Cast) {
    $fmt "(Cast " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.src Type:format
    $fmt " " Fmt:write
    $fmt &self.dst Type:format
    $fmt ")" Fmt:write
}

struct Flip {
    lower: Type
    upper: Type
}
fn Flip-format(fmt: .Formatter, self: .Flip) {
    $fmt "(Flip " Fmt:write
    $fmt &self.lower Type:format
    $fmt " " Fmt:write
    $fmt &self.upper Type:format
    $fmt ")" Fmt:write
}

variant Intrinsic {
    case Gt -> Type
    case Lt -> Type
    case Add -> Type
    case Sub -> Type
    case Mul -> Type
    case Div -> Type
    case Mod -> Type
    case Eq -> Type
    case NotEq -> Type
    case MemGrow
    case MemCopy
    case MemFill
    case Shl -> Type
    case Shr -> Type
    case Rotl -> Type
    case Rotr -> Type
    case And -> Type
    case Or -> Type
    case Ge -> Type
    case Le -> Type
    case Not -> Type
    case Store -> Type
    case Uninit -> Type
    case Drop -> Type
    case Flip -> Flip
    case SetStackSize
}
fn Intrinsic-format(fmt: .Formatter, self: .Intrinsic) {
    $self match {
        case Gt -> { $fmt "(Gt " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Lt -> { $fmt "(Lt " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Add -> { $fmt "(Add " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Sub -> { $fmt "(Sub " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Mul -> { $fmt "(Mul " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Div -> { $fmt "(Div " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Mod -> { $fmt "(Mod " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Eq -> { $fmt "(Eq " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case NotEq -> { $fmt "(NotEq " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case MemGrow -> { $fmt "MemGrow" Fmt:write }
        case MemCopy -> { $fmt "MemCopy" Fmt:write }
        case MemFill -> { $fmt "MemFill" Fmt:write }
        case Drop -> { $fmt "(Drop " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Shl -> { $fmt "(Shl " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Shr -> { $fmt "(Shr " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Rotl -> { $fmt "(Rotl " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Rotr -> { $fmt "(Rotr " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case And -> { $fmt "(And " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Or -> { $fmt "(Or " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Ge -> { $fmt "(Ge " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Le -> { $fmt "(Le " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Not -> { $fmt "(Not " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Store -> { $fmt "(Store " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case SetStackSize -> { $fmt "SetStackSize" Fmt:write }
        case Uninit -> { $fmt "(Uninit " Fmt:write $fmt flip Type:format $fmt ")" Fmt:write }
        case Flip -> { $fmt flip Flip-format }
    }
}

struct IntrinsicWord {
    token: Token
    intrinsic: Intrinsic
}
fn IntrinsicWord-format(fmt: .Formatter, self: .IntrinsicWord) {
    $fmt "(Intrinsic " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.intrinsic Intrinsic-format
    $fmt ")" Fmt:write
}

struct FieldInit {
    name: Token
    struc: CustomTypeHandle
    type: Type
    field-index: i32
}
fn FieldInit-format(fmt: .Formatter, self: .FieldInit) {
    $fmt "(FieldInit " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.struc CustomTypeHandle-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt " " Fmt:write
    $fmt $self.field-index i32-format
    $fmt ")" Fmt:write
}

struct StructWordNamed {
    token: Token
    type: CustomTypeType
    body: Scope
}
fn StructWordNamed-format(fmt: .Formatter, self: .StructWordNamed) {
    $fmt "(StructWordNamed\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "type=" Fmt:write
    $fmt &self.type CustomTypeType-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "body=" Fmt:write
    $fmt &self.body Scope-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct StructWord {
    token: Token
    type: CustomTypeType
}
fn StructWord-format(fmt: .Formatter, self: .StructWord) {
    $fmt "(StructWord\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "type=" Fmt:write
    $fmt &self.type CustomTypeType-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct Scope {
    id: ScopeId
    words: Array<Word>
}
fn Scope-format(fmt: .Formatter, self: .Scope) {
    $fmt "(Scope " Fmt:write
    $fmt &self.id ScopeId-format
    $fmt " " Fmt:write
    $fmt &self.words Words-format
    $fmt ")" Fmt:write
}

struct If {
    token: Token
    parameters: Array<Type>
    returns: Maybe<Array<Type>>
    true-branch: Scope
    false-branch: Scope
}
fn If-format(fmt: .Formatter, self: .If) {
    $fmt "(If\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "parameters=" Fmt:write
    $fmt &self.parameters Types-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "returns=" Fmt:write
    $fmt \Types-format &self.returns Maybe:format<Array<Type>>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "true-branch=" Fmt:write
    $fmt &self.true-branch Scope-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "false-branch=" Fmt:write
    $fmt &self.false-branch Scope-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct BlockAnnotation {
    parameters: Array<Type>
    returns: Array<Type>
}

struct Loop {
    token: Token
    parameters: Array<Type>
    returns: Maybe<Array<Type>>
    body: Scope
}
fn Loop-format(fmt: .Formatter, self: .Loop) {
    $fmt "(Loop\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "parameters=" Fmt:write
    $fmt &self.parameters Types-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "returns=" Fmt:write
    $fmt \Types-format &self.returns Maybe:format<Array<Type>>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "body=" Fmt:write
    $fmt &self.body Scope-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}
struct Block {
    token: Token
    parameters: Array<Type>
    returns: Array<Type>
    body: Scope
}
fn Block-format(fmt: .Formatter, self: .Block) {
    $fmt "(Block\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "parameters=" Fmt:write
    $fmt &self.parameters Types-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "returns=" Fmt:write
    $fmt &self.returns Types-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "body=" Fmt:write
    $fmt &self.body Scope-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct IndirectCall {
    token: Token
    type: FunType
}
fn IndirectCall-format(fmt: .Formatter, self: .IndirectCall) {
    $fmt "(IndirectCall " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.type FunType-format
    $fmt ")" Fmt:write
}

struct Load {
    token: Token
    type: Type
}
fn Load-format(fmt: .Formatter, self: .Load) {
    $fmt "(Load " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt ")" Fmt:write
}

struct MatchCase {
    type: Maybe<Type>
    tag: i32
    body: Scope
}
fn MatchCase-format(fmt: .Formatter, self: .MatchCase) {
    $fmt "(MatchCase " Fmt:write
    $fmt \Type:format &self.type Maybe:format<Type>
    $fmt " " Fmt:write
    $fmt $self.tag i32-format
    $fmt " " Fmt:write
    $fmt &self.body Scope-format
    $fmt ")" Fmt:write
}
struct Match {
    token: Token
    varint: CustomTypeType
    by-ref: bool
    cases: Array<MatchCase>
    default: Maybe<Scope>
    parameters: Array<Type>
    returns: Maybe<Array<Type>>
}
fn Match-format(fmt: .Formatter, self: .Match) {
    $fmt "(Match\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "variant=" Fmt:write
    $fmt &self.varint CustomTypeType-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "by-ref=" Fmt:write
    $fmt $self.by-ref bool-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "cases=" Fmt:write
    $fmt \MatchCase-format &self.cases Array:format-multi-line<MatchCase>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "default=" Fmt:write
    $fmt \Scope-format &self.default Maybe:format<Scope>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "parameters=" Fmt:write
    $fmt &self.parameters Types-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "returns=" Fmt:write
    $fmt \Types-format &self.returns Maybe:format<Array<Type>>
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct VariantWord {
    token: Token
    tag: i32
    type: CustomTypeType
}
fn VariantWord-format(fmt: .Formatter, self: .VariantWord) {
    $fmt "(VariantWord\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "token=" Fmt:write
    $fmt &self.token Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "tag=" Fmt:write
    $fmt $self.tag i32-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "type=" Fmt:write
    $fmt &self.type CustomTypeType-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct GetField {
    token: Token
    fields: Array<FieldAccess>
    on-ptr: bool
    type: Type
}
fn GetField-format(fmt: .Formatter, self: .GetField) {
    $fmt "(GetField " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format<FieldAccess>
    $fmt " " Fmt:write
    $fmt $self.on-ptr bool-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt ")" Fmt:write
}

struct MakeTuple {
    token: Token
    type: Type
}
fn MakeTuple-format(fmt: .Formatter, self: .MakeTuple) {
    $fmt "(MakeTuple " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt ")" Fmt:write
}

struct UnpackTuple {
    token: Token
    type: Type
}
fn UnpackTuple-format(fmt: .Formatter, self: .UnpackTuple) {
    $fmt "(UnpackTuple " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type:format
    $fmt ")" Fmt:write
}

variant Word {
    case Number -> Token
    case GetLocal -> GetLocal
    case RefLocal -> RefLocal
    case InitLocal -> InitLocal
    case SetLocal -> SetLocal
    case StoreLocal -> StoreLocal
    case String -> StringWord
    case Intrinsic -> IntrinsicWord
    case Cast -> Cast
    case Sizeof -> Resolved:Sizeof
    case Call -> Call
    case FieldInit -> FieldInit
    case StructWord -> StructWord
    case StructWordNamed -> StructWordNamed
    case FunRef -> FunRef
    case If -> If
    case Loop -> Loop
    case Break -> Token
    case Block -> Block
    case IndirectCall -> IndirectCall
    case Load -> Load
    case Match -> Match
    case VariantWord -> VariantWord
    case GetField -> GetField
    case MakeTuple -> MakeTuple
    case UnpackTuple -> UnpackTuple
}
fn Word-format(fmt: .Formatter, self: .Word) {
    $self match {
        case Number -> { $fmt "(Number " Fmt:write $fmt flip Token-format $fmt ")" Fmt:write }
        case GetLocal -> { $fmt flip GetLocal-format }
        case RefLocal -> { $fmt flip RefLocal-format }
        case InitLocal -> { $fmt flip InitLocal-format }
        case SetLocal -> { $fmt flip SetLocal-format }
        case StoreLocal -> { $fmt flip StoreLocal-format }
        case String -> { $fmt flip StringWord-format }
        case Intrinsic -> { $fmt flip IntrinsicWord-format }
        case Cast -> { $fmt flip Cast-format }
        case Sizeof -> { $fmt flip Resolved:Sizeof-format }
        case Call -> { $fmt flip Call-format }
        case FieldInit -> { $fmt flip FieldInit-format }
        case StructWord -> { $fmt flip StructWord-format }
        case StructWordNamed -> { $fmt flip StructWordNamed-format }
        case FunRef -> { $fmt flip FunRef-format }
        case If -> { $fmt flip If-format }
        case Loop -> { $fmt flip Loop-format }
        case Break -> { $fmt "(Break " Fmt:write $fmt flip Token-format $fmt ")" Fmt:write }
        case Block -> { $fmt flip Block-format }
        case IndirectCall -> { $fmt flip IndirectCall-format }
        case Load -> { $fmt flip Load-format }
        case Match -> { $fmt flip Match-format }
        case VariantWord -> { $fmt flip VariantWord-format }
        case GetField -> { $fmt flip GetField-format }
        case MakeTuple -> { $fmt flip MakeTuple-format }
        case UnpackTuple -> { $fmt flip UnpackTuple-format }
    }
}
fn Words-format(fmt: .Formatter, self: .Array<Word>) {
    $fmt \Word-format $self Array:format-multi-line<Word>
}

variant FunctionOrExtern {
    case Extern -> Extern
    case Function -> Function
}
fn FunctionOrExtern-format(fmt: .Formatter, self: .FunctionOrExtern) {
    $fmt $self match {
        case FunctionOrExtern.Extern -> { Extern-format }
        case FunctionOrExtern.Function -> { Function-format }
    }
}
fn FunctionOrExtern-signature(self: .FunctionOrExtern) -> .Signature {
    $self match {
        case FunctionOrExtern.Extern -> { .signature }
        case FunctionOrExtern.Function -> { .signature }
    }
}

struct Function {
    name: Token
    export: Maybe<Token>
    signature: Signature
    locals: Map<LocalId, Local>
    body: Scope
}
fn Function-format(fmt: .Formatter, self: .Function) {
    $fmt "(Function\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "export=" Fmt:write
    $fmt \Token-format &self.export Maybe:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "signature=" Fmt:write
    $fmt &self.signature Signature-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "locals=" Fmt:write
    $fmt \LocalId-format \Local-format &self.locals Map:format-multi-line<LocalId, Local>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "body=" Fmt:write
    $fmt &self.body Scope-format
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct Module {
    imports: Map<ByteSlice, Array<Import>>
    type-definitions: Map<ByteSlice, TypeDefinition>
    globals: Map<ByteSlice, Global>
    functions: Map<ByteSlice, FunctionOrExtern>
    static-data: ByteSlice
}
fn format-import-array(fmt: .Formatter, self: .Array<Import>) {
    $fmt \Import-format $self Array:format<Import>
}
fn Module-format(fmt: .Formatter, self: .Module) {
    $fmt "(Module\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "imports=" Fmt:write
    $fmt \Fmt:ByteSlice-format \format-import-array &self.imports Map:format-multi-line<ByteSlice, Array<Import>>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "type-definitions=" Fmt:write
    $fmt \ByteSlice-format \TypeDefinition-format &self.type-definitions Map:format-multi-line<ByteSlice, TypeDefinition>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "globals=" Fmt:write
    $fmt \ByteSlice-format \Global-format &self.globals Map:format-multi-line<ByteSlice, Global>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "functions=" Fmt:write
    $fmt \ByteSlice-format \FunctionOrExtern-format &self.functions Map:format-multi-line<ByteSlice, FunctionOrExtern>
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}
