import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/fmt-utils.watim" as Fmt (ByteSlice-format)
import "../../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../../std/map.watim" as Map (Map)
import "../../std/maybe.watim" as Maybe (Maybe(Some, None))
import "../../std/array.watim" as Array (Array)
import "../../std/arena.watim" as Arena (Arena)

import "../resolving/type.watim" as Type

variant Type {
    case Bool
    case I8
    case I32
    case I64
    case Ptr -> .Type
    case MetaVar -> ByteSlice
}
fn Type-pretty(fmt: .Formatter, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "bool" }
        case I8 -> { "i8" }
        case I32 -> { "i32" }
        case I64 -> { "i64" }
        case Ptr -> {
            $fmt "." Fmt:write
            ~ Type-pretty
            break
        }
        case MetaVar -> { ~ ByteSlice:unpack }
    } Fmt:write
} }
fn Type-compare-to-actual(meta-vars: .Map<ByteSlice, .Type:Type>, a: .Type, b: .Type:Type) -> bool {
    $a match {
        case Bool -> { $b match { case Type:Type.Bool -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I8 -> { $b match { case Type:Type.I8 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I32 -> { $b match { case Type:Type.I32 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I64 -> { $b match { case Type:Type.I64 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case Ptr -> {
            $meta-vars flip ~ $b match {
                case Type:Type.Ptr -> { ~ Type-compare-to-actual }
                case _ -> { drop drop drop 0 1 = }
            }
        }
        case MetaVar -> {
            $meta-vars flip ~ $b Map:insert-assert-no-alloc<ByteSlice, .Type:Type> match {
                case Some -> {
                    $b Type:eq not if {
                        // TODO
                        0 0 / drop
                    }
                }
                case None -> {}
            }
            1 1 =
        }
    }
}
fn Types-compare-to-actual(meta-vars: .Map<ByteSlice, .Type:Type>, expected: .Array<Type>, actual: .Array<Type:Type>) -> bool {
    1 $expected.len $actual.len = !i32 / drop

    0 @i
    loop {
        $expected.len $i = if { 1 1 = break }
        $meta-vars $expected $i Array:get<_> $actual $i Array:get<_> Type-compare-to-actual not if {
            0 1 = break
        }
        $i 1 + #i
    }
}

fn Type-fill(arena: .Arena, meta-vars: .Map<ByteSlice, .Type:Type>, type: .Type) -> Type:Type {
    $type match {
        case MetaVar -> {
            $meta-vars flip Map:get<_, _> Maybe:assert-some<_> ~ ~
        }
        case I8 -> { make Type:Type.I8 }
        case I32 -> { make Type:Type.I32 }
        case I64 -> { make Type:Type.I64 }
        case Bool -> { make Type:Type.Bool }
        case Ptr -> {
            ~ $arena flip $meta-vars flip Type-fill $arena flip Arena:push<_> make Type:Type.Ptr
        }
    }
}
fn Types-fill(arena: .Arena, meta-vars: .Map<ByteSlice, .Type:Type>, types: .Array<Type>) -> Array<Type:Type> {
    $arena $types.len Array:new-with-capacity<Type:Type> @filled
    loop {
        $filled.len $types.len = if { $filled break }
        &filled $arena $meta-vars $types $filled.len Array:get<_> Type-fill Array:push-assert-no-alloc<_>
    }
}

