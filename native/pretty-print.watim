import "../std/core.watim" as Core
import "../std/io.watim" as IO
import "../std/maybe.watim" as Maybe (Maybe(None, Some))
import "../std/array.watim" as Array (Array)
import "./parser.watim" as Parser (Module, TopItem, Import, Function, Signature, Words, Word, NamedType, Type, LocalCustomType, ForeignCustomType, Call, LocalCall, ForeignCall, If, Block, Loop, GetLocal, RefLocal, SetLocal, FunRef, InitLocal, Struct, Cast, MakeStruct, CustomType, MakeStructNamed, Variant, VariantCase, MakeVariant, Match, MatchCase, GetField, BlockAnnotation, Sizeof, FunType, Extern, Global, Store, MakeTuple, TupleType, StackAnnotation, ImportItem)
import "./lexer.watim" as Lexer (Token, Token-lexeme, Token-location, Token-print)

struct PrettyPrinter {
    line: i32
    column: i32
    write: (.i8, i32 -> i32)
}

fn PrettyPrinter-new(write: (.i8, i32 -> i32)) -> PrettyPrinter {
    1 1 $write make PrettyPrinter
}

fn write(pp: .PrettyPrinter, ptr: .i8, len: i32) -> i32 {
    $ptr $len $pp.write -> @code
    loop {
        $len 0 = if { break }
        $pp.column 1 + #pp.column
        $len 1 - #len
        $ptr $len + ~ 10 !i8 = if {
            $pp.line 1 + #pp.line
            1 #pp.column
        }
    }
    $code
}

fn advance-to(pp: .PrettyPrinter, line: i32, column: i32) -> i32 { block {
    $pp.line $line gt if {
        2 "PrettyPrinter already moved past\n" IO:write-all drop 0 0 / drop
    }
    loop {
        $pp.line $line = if { 0 break }
        $pp "\n" write Core:dup<i32> 0 /= if { break } drop
    } Core:dup<i32> 0 /= if { break } drop
    $pp.column $column gt if {
        2 "PrettyPrinter already moved past\n" IO:write-all drop 0 0 / drop
    }
    loop {
        $pp.column $column = if { 0 break }
        $pp " " write Core:dup<i32> 0 /= if { break } drop
    }
} }

fn write-token(pp: .PrettyPrinter, token: .Token) -> i32 { block {
    $pp $token Token-location advance-to Core:dup<i32> 0 /= if { break } drop
    $pp $token Token-lexeme write
} }

fn TopItem-pretty(self: .TopItem, pp: .PrettyPrinter) -> i32 {
    $self match {
        case TopItem.Import -> { $pp Import-pretty }
        case TopItem.Extern -> { $pp Extern-pretty }
        case TopItem.Struct -> { $pp Struct-pretty }
        case TopItem.Function -> { $pp Function-pretty }
        case TopItem.Variant -> { $pp Variant-pretty }
        case TopItem.Global -> { $pp Global-pretty }
    }
}

fn Global-pretty(self: .Global, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $pp ":" write Core:dup<i32> 0 /= if { break } drop
    &self.type $pp Type-pretty
} }

fn Extern-pretty(self: .Extern, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.extrn-module write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.extrn-name write-token Core:dup<i32> 0 /= if { break } drop
    $pp " fn" write Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    &self.signature $pp Signature-pretty
} }

fn Struct-pretty(self: .Struct, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-parameters.len 0 /= if {
        &self.generic-parameters $pp GenericParameters-pretty Core:dup<i32> 0 /= if { break } drop
    }
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.fields.len $i = if { 0 break }
        &self.fields $i Array:get<NamedType> @field
        $pp &field.name write-token Core:dup<i32> 0 /= if { break } drop
        $pp ":" write Core:dup<i32> 0 /= if { break } drop
        &field.type $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp &self.end write-token
} }

fn Variant-pretty(self: .Variant, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-parameters.len 0 /= if {
        &self.generic-parameters $pp GenericParameters-pretty Core:dup<i32> 0 /= if { break } drop
    }
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop (-> i32) {
        $self.cases.len $i = if { 0 break }
        &self.cases $i Array:get<VariantCase> @cays
        $pp &cays.token write-token Core:dup<i32> 0 /= if { break } drop
        $pp &cays.name write-token Core:dup<i32> 0 /= if { break } drop
        &cays.type match {
            case None -> {}
            case Some -> {
                $pp " ->" write Core:dup<i32> 0 /= if { break } drop
                $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
            }
        }
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp &self.end write-token
} }

fn Import-pretty(self: .Import, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.path write-token Core:dup<i32> 0 /= if { break } drop
    $pp " as " write Core:dup<i32> 0 /= if { break } drop
    $pp &self.qualifier write-token Core:dup<i32> 0 /= if { break } drop
    $self.items.len 0 /= if {
        $pp " (" write Core:dup<i32> 0 /= if { break } drop
        0 @i
        loop {
            $self.items.len $i = if { 0 break }
            &self.items $i Array:get<ImportItem> $pp ImportItem-pretty Core:dup<i32> 0 /= if { break } drop
            $i 1 + #i
            $self.items.len $i /= if {
                $pp "," write Core:dup<i32> 0 /= if { break } drop
            }
        } Core:dup<i32> 0 /= if { break } drop
        $pp ")" write Core:dup<i32> 0 /= if { break } drop
    }
    0
} }

fn ImportItem-pretty(self: .ImportItem, pp: .PrettyPrinter) -> i32 { block {
    $self match {
        case ImportItem.Item -> { $pp flip write-token }
        case ImportItem.VariantWithConstructors -> {
            @imp
            $pp &imp.name write-token Core:dup<i32> 0 /= if { break } drop
            $pp "(" write Core:dup<i32> 0 /= if { break } drop
            0 @i
            loop {
                $imp.constructors.len $i = if { 0 break }
                $pp &imp.constructors $i Array:get<Token> write-token Core:dup<i32> 0 /= if { break } drop
                $i 1 + #i
                $imp.constructors.len $i /= if {
                    $pp "," write Core:dup<i32> 0 /= if { break } drop
                }
            } Core:dup<i32> 0 /= if { break } drop
            $pp ")" write
        }
    }
} }

fn Function-pretty(self: .Function, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    &self.export match {
        case None -> {}
        case Some -> {
            @export
            $pp $export write-token Core:dup<i32> 0 /= if { break } drop
            $pp " " write Core:dup<i32> 0 /= if { break } drop
        }
    }
    &self.signature $pp Signature-pretty Core:dup<i32> 0 /= if { break } drop
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    &self.body $pp Words-pretty
} }

fn Words-pretty(self: .Words, pp: .PrettyPrinter) -> i32 { block {
    0 @i
    loop {
        $self.words.len $i = if { 0 break }
        &self.words $i Array:get<Word> $pp Word-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp &self.end write-token
} }

fn Word-pretty(self: .Word, pp: .PrettyPrinter) -> i32 { block {
    $self match {
        case Word.Number -> { $pp flip write-token }
        case Word.Call -> { $pp Call-pretty }
        case Word.String -> { .token $pp flip write-token }
        case Word.If -> { $pp If-pretty }
        case Word.Block -> { $pp Block-pretty }
        case Word.Loop -> { $pp Loop-pretty }
        case Word.GetLocal -> { $pp GetLocal-pretty }
        case Word.RefLocal -> { $pp RefLocal-pretty }
        case Word.SetLocal -> { $pp SetLocal-pretty }
        case Word.InitLocal -> { $pp InitLocal-pretty }
        case Word.FunRef -> { $pp FunRef-pretty }
        case Word.Load -> { $pp flip write-token }
        case Word.Ref -> { $pp flip write-token }
        case Word.Cast -> { $pp Cast-pretty }
        case Word.Break -> { $pp flip write-token }
        case Word.MakeStruct -> { $pp MakeStruct-pretty }
        case Word.MakeStructNamed -> { $pp MakeStructNamed-pretty }
        case Word.MakeVariant -> { $pp MakeVariant-pretty }
        case Word.Match -> { $pp Match-pretty }
        case Word.GetField -> { $pp GetField-pretty }
        case Word.Sizeof -> { $pp Sizeof-pretty }
        case Word.IndirectCall -> { $pp flip write-token }
        case Word.Store -> { $pp Store-pretty }
        case Word.UnpackTuple -> { $pp UnpackTuple-pretty }
        case Word.MakeTuple -> { $pp MakeTuple-pretty }
        case Word.StackAnnotation -> { $pp StackAnnotation-pretty }
    }
} }

fn UnpackTuple-pretty(self: .Token, pp: .PrettyPrinter) -> i32 { block {
    $pp $self write-token Core:dup<i32> 0 /= if { break } drop
    $pp ",]" write
} }

fn MakeTuple-pretty(self: .MakeTuple, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp "," write Core:dup<i32> 0 /= if { break } drop
    $pp &self.items write-token Core:dup<i32> 0 /= if { break } drop
    $pp "]" write
} }

fn Sizeof-pretty(self: .Sizeof, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp "(" write Core:dup<i32> 0 /= if { break } drop
    &self.type $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
    $pp ")" write
} }

fn GetField-pretty(self: .GetField, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.fields.len $i = if { 0 break }
        $pp &self.fields $i Array:get<Token> write-token Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.fields.len $i /= if {
            $pp "." write Core:dup<i32> 0 /= if { break } drop
        }
    }
} }

fn Match-pretty(self: .Match, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.cases.len $i = if { 0 break }
        &self.cases $i Array:get<MatchCase> @cays
        $pp &cays.token write-token Core:dup<i32> 0 /= if { break } drop
        $pp &cays.name write-token Core:dup<i32> 0 /= if { break } drop
        $pp " -> {" write Core:dup<i32> 0 /= if { break } drop
        &cays.body $pp Words-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp &self.end write-token
} }

fn MakeVariant-pretty(self: .MakeVariant, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    &self.type $pp CustomType-pretty Core:dup<i32> 0 /= if { break } drop
    $pp "." write Core:dup<i32> 0 /= if { break } drop
    $pp &self.cays write-token
} }

fn MakeStruct-pretty(self: .MakeStruct, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    &self.type $pp CustomType-pretty
} }

fn MakeStructNamed-pretty(self: .MakeStructNamed, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    &self.type $pp CustomType-pretty Core:dup<i32> 0 /= if { break } drop
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    &self.body $pp Words-pretty
} }

fn Cast-pretty(self: .Cast, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    &self.type $pp Type-pretty
} }

fn InitLocal-pretty(self: .InitLocal, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.ident write-token
} }

fn FunRef-pretty(self: .FunRef, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    &self.call $pp Call-pretty
} }

fn GetLocal-pretty(self: .GetLocal, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.ident write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.fields write-fields
} }

fn RefLocal-pretty(self: .RefLocal, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.ident write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.fields write-fields
} }

fn SetLocal-pretty(self: .SetLocal, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.ident write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.fields write-fields
} }

fn Store-pretty(self: .Store, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.start write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.ident write-token Core:dup<i32> 0 /= if { break } drop
    $pp &self.fields write-fields
} }

fn write-fields(pp: .PrettyPrinter, fields: .Array<Token>) -> i32 { block {
    0 @i
    loop {
        $fields.len $i = if { 0 break }
        $pp "." write Core:dup<i32> 0 /= if { break } drop
        $pp $fields $i Array:get<Token> write-token Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
    }
} }

fn If-pretty(self: .If, pp: .PrettyPrinter) -> i32 { block (-> i32) {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp " {" write Core:dup<i32> 0 /= if { break } drop
    &self.true-words $pp Words-pretty Core:dup<i32> 0 /= if { break } drop
    &self.false-words match {
        case None -> {}
        case Some -> {
            $pp " else {" write Core:dup<i32> 0 /= if { break } drop
            $pp Words-pretty Core:dup<i32> 0 /= if { break } drop
        }
    }
    0
} }

fn BlockAnnotation-pretty(self: .BlockAnnotation, pp: .PrettyPrinter) -> i32 { block {
    $pp "(" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.parameters.len $i = if { 0 break }
        &self.parameters $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.returns.len $i /= if {
            $pp "," write Core:dup<i32> 0 /= if { break } drop
        }
    } Core:dup<i32> 0 /= if { break } drop
    $pp $self.parameters.len 0 = if { "->" } else { " -> " } write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.returns.len $i = if { 0 break }
        &self.returns $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.returns.len $i /= if {
            $pp "," write Core:dup<i32> 0 /= if { break } drop
        }
    } Core:dup<i32> 0 /= if { break } drop
    $pp ")" write
} }

fn Block-pretty(self: .Block, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp " " write Core:dup<i32> 0 /= if { break } drop
    &self.annotation match {
        case None -> {}
        case Some -> {
            $pp BlockAnnotation-pretty Core:dup<i32> 0 /= if { break } drop
            $pp " " write Core:dup<i32> 0 /= if { break } drop
        }
    }
    $pp "{" write Core:dup<i32> 0 /= if { break } drop
    &self.words $pp Words-pretty
} }

fn Loop-pretty(self: .Loop, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    $pp " " write Core:dup<i32> 0 /= if { break } drop
    &self.annotation match {
        case None -> {}
        case Some -> {
            $pp BlockAnnotation-pretty Core:dup<i32> 0 /= if { break } drop
            $pp " " write Core:dup<i32> 0 /= if { break } drop
        }
    }
    $pp "{" write Core:dup<i32> 0 /= if { break } drop
    &self.words $pp Words-pretty
} }

fn Call-pretty(self: .Call, pp: .PrettyPrinter) -> i32 {
    $self match {
        case Call.Local -> { $pp LocalCall-pretty }
        case Call.Foreign -> { $pp ForeignCall-pretty }
    }
}

fn LocalCall-pretty(self: .LocalCall, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-arguments.len 0 /= if {
        &self.generic-arguments $pp GenericArguments-pretty
    } else { 0 }
} }

fn ForeignCall-pretty(self: .ForeignCall, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.module write-token Core:dup<i32> 0 /= if { break } drop
    $pp ":" write Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-arguments.len 0 /= if {
        &self.generic-arguments $pp GenericArguments-pretty
    } else { 0 }
} }

fn Signature-pretty(self: .Signature, pp: .PrettyPrinter) -> i32 { block {
    $self.generic-parameters.len 0 /= if {
        &self.generic-parameters $pp GenericParameters-pretty Core:dup<i32> 0 /= if { break } drop
    }
    $pp "(" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.parameters.len $i = if { 0 break }
        &self.parameters $i Array:get<NamedType> @parameter
        $pp &parameter.name write-token Core:dup<i32> 0 /= if { break } drop
        $pp ": " write Core:dup<i32> 0 /= if { break } drop
        &parameter.type $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.parameters.len $i /= if {
            $pp "," write Core:dup<i32> 0 /= if { break } drop
        }
    } Core:dup<i32> 0 /= if { break } drop
    $pp ")" write Core:dup<i32> 0 /= if { break } drop
    $self.returns.len 0 /= if {
        $pp " -> " write Core:dup<i32> 0 /= if { break } drop
        0 @i
        loop {
            $self.returns.len $i = if { 0 break }
            &self.returns $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
            $i 1 + #i
            $self.returns.len $i /= if {
                $pp "," write Core:dup<i32> 0 /= if { break } drop
            }
        } Core:dup<i32> 0 /= if { break } drop
    }
    0
} }

fn GenericParameters-pretty(self: .Array<Token>, pp: .PrettyPrinter) -> i32 { block {
    $pp "<" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.len $i = if { 0 break }
        $pp $self $i Array:get<Token> write-token Core:dup<i32> 0 /= if { break } drop
        $i 1 + $self.len /= if {
            $pp ", " write Core:dup<i32> 0 /= if { break } drop
        }
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp ">" write
} }

fn Type-pretty(self: .Type, pp: .PrettyPrinter) -> i32 { block (-> i32) {
    $pp $self match {
        case Type.Bool -> {}
        case Type.I8 -> {}
        case Type.I32 -> {}
        case Type.I64 -> {}
        case Type.Ptr -> {
            @ptr-type
            $pp &ptr-type.dot write-token Core:dup<i32> 0 /= if { break } drop
            $ptr-type.type $pp Type-pretty break
        }
        case Type.Custom -> { flip CustomType-pretty break }
        case Type.Fun -> { flip FunType-pretty break }
        case Type.Tuple -> { flip TupleType-pretty break }
        case Type.Generic -> { .name }
        case Type.Hole -> {}
    } write-token
} }

fn TupleType-pretty(self: .TupleType, pp: .PrettyPrinter) -> i32 { block (-> i32) {
    $pp "[" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop (-> i32) {
        $self.items.len $i = if { 0 break }
        &self.items $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $i $self.items.len = if { 0 break }
        $pp ", " write Core:dup<i32> 0 /= if { break } drop
    } Core:dup<i32> 0 /= if { break } drop
    $pp "]" write
} }

fn FunType-pretty(self: .FunType, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.parameters.len $i = if { 0 break }
        &self.parameters $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.parameters.len $i /= if {
            $pp "," write Core:dup<i32> 0 /= if { break } drop
        }
    } Core:dup<i32> 0 /= if { break } drop
    $pp " ->" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.returns.len $i = if { 0 break }
        &self.returns $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $self.returns.len $i /= if {
            $pp "," write Core:dup<i32> 0 /= if { break } drop
        }
    } Core:dup<i32> 0 /= if { break } drop
    $pp ")" write
} }

fn CustomType-pretty(self: .CustomType, pp: .PrettyPrinter) -> i32 {
    $self match {
        case CustomType.Local -> { $pp LocalCustomType-pretty }
        case CustomType.Foreign -> { $pp ForeignCustomType-pretty }
    }
}

fn LocalCustomType-pretty(self: .LocalCustomType, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-arguments.len 0 /= if {
        &self.generic-arguments $pp GenericArguments-pretty
    } else { 0 }
} }

fn ForeignCustomType-pretty(self: .ForeignCustomType, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.module Token-lexeme write Core:dup<i32> 0 /= if { break } drop
    $pp ":" write Core:dup<i32> 0 /= if { break } drop
    $pp &self.name write-token Core:dup<i32> 0 /= if { break } drop
    $self.generic-arguments.len 0 /= if {
        &self.generic-arguments $pp GenericArguments-pretty
    } else { 0 }
} }

fn GenericArguments-pretty(self: .Array<Type>, pp: .PrettyPrinter) -> i32 { block {
    $pp "<" write Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $self.len $i = if { 0 break }
        $self $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + $self.len /= if {
            $pp ", " write Core:dup<i32> 0 /= if { break } drop
        }
        $i 1 + #i
    } Core:dup<i32> 0 /= if { break } drop
    $pp ">" write
} }

fn StackAnnotation-pretty(self: .StackAnnotation, pp: .PrettyPrinter) -> i32 { block {
    $pp &self.token write-token Core:dup<i32> 0 /= if { break } drop
    0 @i
    loop {
        $i $self.types.len = if { 0 break }
        &self.types $i Array:get<Type> $pp Type-pretty Core:dup<i32> 0 /= if { break } drop
        $i 1 + #i
        $i $self.types.len = if { 0 break }
        $pp ", " write Core:dup<i32> 0 /= if { break } drop
    } Core:dup<i32> 0 /= if { break } drop
    $pp ")" write
} }

