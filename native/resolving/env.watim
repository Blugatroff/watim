import "../../std/maybe.watim" as Maybe (Maybe(None, Some))
import "../../std/map.watim" as Map (Map)
import "../../std/array.watim" as Array (Array)
import "../../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../../std/arena.watim" as Arena (Arena)

import "../lexer.watim" as Lexer (Token, Token-lexeme)

import "./top-items.watim" as TopItems (Local, LocalName-unpack)
import "./words.watim" as Words (ScopeId, LocalId, LocalId-eq)

struct LocalAndId {
    local: Local
    id: LocalId
}

struct Env {
    parent: Maybe<.Env>
    scope-counter: .i32
    scope-id: ScopeId
    vars: Map<ByteSlice, Array<LocalAndId>>
    vars-by-id: .Map<LocalId, Local>
}

fn root(arena: .Arena) -> Env {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<LocalAndId>> @vars
    $arena \LocalId-eq Map:new<LocalId, Local> Arena:push<_> @vars-by-id
    $arena 0 Arena:push<_> @scope-counter
    make Env {
        make Maybe<.Env>.None @parent
        $scope-counter @scope-counter
        $scope-counter ~ make ScopeId @scope-id
        $vars @vars
        $vars-by-id @vars-by-id
    }
}

fn child(self: .Env) -> Env {
    make Env {
        $self make Maybe<.Env>.Some @parent
        $self.scope-counter @scope-counter
        $self.scope-counter ~ 1 + =>self.scope-counter
        $self.scope-counter ~ make ScopeId @scope-id
        \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<LocalAndId>> @vars
        $self.vars-by-id @vars-by-id
    }
}

fn lookup(self: .Env, name: .Token) -> Maybe<LocalId> { block (-> Maybe<LocalId>) {
    &self.vars $name Token-lexeme Map:get-bs<_> match {
        case None -> {
            $self.parent match {
                case None -> { make Maybe<LocalId>.None break }
                case Some -> { $name lookup break }
            }
        }
        case Some -> {}
    }
    Array:last<_> .id ~ make Maybe<LocalId>.Some
} }

fn lookup-by-id(self: .Env, id: .LocalId) -> .Local {
    $self.vars-by-id $id Map:get<LocalId, Local> Maybe:assert-some<.Local>
}

fn insert(arena: .Arena, self: .Env, var: Local) -> LocalId {
    &self.vars &var.name LocalName-unpack Map:get-bs<_> match {
        case Some -> {
            @vars
            &var.name LocalName-unpack make ByteSlice $self.scope-id $vars.len make LocalId @id
            $arena $vars $var $id make LocalAndId Array:push<_>
            $arena $self.vars-by-id $id $var Map:insert<_, _> drop
            $id
        }
        case None -> {
            &var.name LocalName-unpack make ByteSlice $self.scope-id 0 make LocalId @id
            $arena &self.vars $id.name $arena $var $id make LocalAndId Array:singleton<_> Map:insert<_, _> drop
            $arena $self.vars-by-id $id $var Map:insert<_, _> drop
            $id
        }
    }
}

