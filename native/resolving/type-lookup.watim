import "../../std/array.watim" as Array (Array)
import "../../std/list.watim" as List (List)
import "../../std/map.watim" as Map (Map)
import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../../std/maybe.watim" as Maybe (Maybe(None, Some))

import "../lexer.watim" as L (Token-lexeme)
import "../parser.watim" as P

import "./type.watim" as Type (
    Type(Bool, I8, I32, I64, Ptr, Custom, Tuple, Fun, Generic, Hole),
    ModuleId, CustomTypeHandle, FunType, TupleType, CustomTypeType,
)
import "./type-without-holes.watim" as WithoutHoles
import "./top-items.watim" as TopItems (TypeDefinition(Struct, Variant))
import "./words.watim" as Words
import "./module.watim" as Module (Module)

struct TypeLookup {
    module-id: ModuleId
    types: .Array<TypeDefinition>
    other-modules: .Map<ByteSlice, Module>
}
fn lookup(lookup: .TypeLookup, handle: .CustomTypeHandle) -> .TypeDefinition {
    $handle.module $lookup.module-id = if {
        $lookup.types $handle.index Array:get<_>
    } else {
        &lookup.other-modules.values $handle.module.index Array:get<_> .type-definitions.values $handle.index Array:get<_>
    }
}

fn is-directly-recursive(lookup: .TypeLookup, handle: .CustomTypeHandle) -> bool {
    $lookup $handle List:empty<CustomTypeHandle> & is-directly-recursive'
}
fn is-directly-recursive'(lookup: .TypeLookup, handle: .CustomTypeHandle, stack: .List<CustomTypeHandle>) -> bool { block {
    \Type:CustomTypeHandle-eq $stack $handle List:contains<CustomTypeHandle> if {
        1 1 = break
    }
    $lookup $handle lookup match {
        case Struct -> {
            @struc
            0 loop {
                @i $i $struc.fields.len = if { 0 1 = break }
                &struc.fields $i Array:get<_> .type match {
                    case WithoutHoles:Type.Custom -> {
                        @custom-type
                        $handle ~ $stack List:cons<CustomTypeHandle> @stack
                        $lookup &custom-type.type-definition &stack is-directly-recursive' if {
                            1 1 = break
                        }
                    }
                    case _ -> { drop }
                }
                $i 1 +
            }
        }
        case Variant -> {
            @varint
            0 loop {
                @i $i $varint.cases.len = if { 0 1 = break }
                &varint.cases $i Array:get<_> .type match {
                    case None -> {}
                    case Some -> {
                        match {
                            case WithoutHoles:Type.Custom -> {
                                @custom-type
                                $handle ~ $stack List:cons<CustomTypeHandle> @stack
                                $lookup &custom-type.type-definition &stack is-directly-recursive' if {
                                    1 1 = break
                                }
                            }
                            case _ -> { drop }
                        }
                    }
                }
                $i 1 +
            }
        }
    }
} }

fn pretty(fmt: .Formatter, lookup: .TypeLookup, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "bool" }
        case I8 -> { "i8" }
        case I32 -> { "i32" }
        case I64 -> { "i64" }
        case Ptr -> { $fmt "." Fmt:write ~ $lookup flip pretty break }
        case Custom -> { $lookup flip CustomTypeType-pretty break }
        case Fun -> { $lookup flip FunType-pretty break }
        case Tuple -> { $lookup flip TupleType-pretty break }
        case Generic -> { P:GenericType-pretty break }
        case Hole -> { drop "_" }
    } Fmt:write
} }

fn FunType-pretty(fmt: .Formatter, lookup: .TypeLookup, self: .FunType) {
    $fmt "(" Fmt:write
    $fmt $lookup &self.parameters Types-pretty
    $fmt " -> " Fmt:write
    $fmt $lookup &self.returns Types-pretty
    $fmt ")" Fmt:write
}

fn Types-pretty(fmt: .Formatter, lookup: .TypeLookup, self: .Array<Type>) {
    0 @i
    loop {
        $i $self.len = if { break }
        $fmt $lookup $self $i Array:get<Type> pretty
        $i 1 + #i
        $i $self.len = if { break }
        $fmt ", " Fmt:write
    }
}
fn Types-pretty-bracketed(fmt: .Formatter, lookup: .TypeLookup, self: .Array<Type>) {
    $fmt "[" Fmt:write
    $fmt $lookup $self Types-pretty
    $fmt "]" Fmt:write
}

fn TupleType-pretty(fmt: .Formatter, thr: .TypeLookup, self: .TupleType) {
    $fmt $thr &self.items Types-pretty-bracketed
}

fn CustomTypeType-pretty(fmt: .Formatter, thr: .TypeLookup, self: .CustomTypeType) {
    $fmt $thr &self.type-definition lookup match {
        case Struct  -> { .name }
        case Variant -> { .name }
    } Token-lexeme Fmt:write
    0 @i
    loop {
        $i $self.generic-arguments.len = if { break }
        $i 0 = if { $fmt "<" Fmt:write }
        $fmt $thr &self.generic-arguments $i Array:get<Type> pretty
        $i 1 + #i
        $i $self.generic-arguments.len /= if {
            $fmt ", " Fmt:write
        } else {
            $fmt ">" Fmt:write
        }
    }
}
