import "../../std/maybe.watim" as Maybe (Maybe(None, Some))
import "../../std/array.watim" as Array (Array)
import "../../std/arena.watim" as Arena (Arena)
import "../../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../../std/util.watim" as Util (i32-format)
import "../../std/fmt.watim" as Fmt (Formatter)
import "../../std/io.watim" as IO

import "../lexer.watim" as Lexer (Token, Token-format, Token-lexeme)
import "../parser.watim" as P

struct ModuleId { index: i32 }
fn ModuleId-format(fmt: .Formatter, self: .ModuleId) {
    $fmt $self.index i32-format
}

struct NamedType {
    name: Token
    type: Type
}
fn NamedType-format(fmt: .Formatter, self: .NamedType) {
    $fmt "(NamedType " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type format
    $fmt ")" Fmt:write
}
fn NamedType-type(self: .NamedType) -> Type { $self.type }
fn NamedType-contains-hole(self: .NamedType) -> bool {
    &self.type contains-hole
}

variant Type {
    case Bool
    case I8
    case I32
    case I64
    case Ptr -> .Type
    case Custom -> CustomTypeType
    case Fun -> FunType
    case Tuple -> TupleType
    case Generic -> P:GenericType
    case Hole -> Token
}
fn format(fmt: .Formatter, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "Bool" }
        case I8 -> { "I8" }
        case I32 -> { "I32" }
        case I64 -> { "I64" }
        case Ptr -> {
            $fmt "(Ptr " Fmt:write
            ~ format
            $fmt ")" Fmt:write
            break
        }
        case Custom -> { CustomTypeType-format break }
        case Fun -> { FunType-format break }
        case Tuple -> { TupleType-format break }
        case Generic -> { P:GenericType-format break }
        case Hole -> { $fmt "(Hole " Fmt:write Token-format $fmt ")" Fmt:write break }
    } Fmt:write
} }
fn eq(a: .Type, b: .Type) -> bool {
    $a match {
        case Bool -> { $b match { case Bool -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I8 -> { $b match { case I8 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I32 -> { $b match { case I32 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I64 -> { $b match { case I64 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case Ptr -> {
            ~ $b match {
                case Ptr -> { ~ eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Custom -> {
            $b match {
                case Custom -> { CustomTypeType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Fun -> {
            $b match {
                case Fun -> { FunType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Tuple -> {
            $b match {
                case Tuple -> { TupleType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Generic -> {
            .index ~ $b match {
                case Generic -> { .index ~ = }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Hole -> {
            drop $b match {
                case Hole -> { drop 1 1 = }
                case _ -> { drop 0 1 = }
            }
        }
    }
}
fn find-hole(self: .Type) -> Maybe<.Token> {
    $self match {
        case Bool -> { make Maybe<.Token>.None }
        case I8 -> { make Maybe<.Token>.None }
        case I32 -> { make Maybe<.Token>.None }
        case I64 -> { make Maybe<.Token>.None }
        case Ptr -> { ~ find-hole }
        case Generic -> { drop make Maybe<.Token>.None }
        case Hole -> { make Maybe<.Token>.Some }
        case Tuple -> { .items \find-hole Array:find-map<Type, .Token> }
        case Fun -> {
            @fun
            &fun.parameters \find-hole Array:find-map<Type, .Token> match {
                case None -> { &fun.returns \find-hole Array:find-map<Type, .Token> }
                case _ -> {}
            }
        }
        case Custom -> { .generic-arguments \find-hole Array:find-map<Type, .Token> }
    }
}
fn contains-hole(self: .Type) -> bool {
    $self find-hole @m &m Maybe:is-some<.Token>
}
fn clone(arena: .Arena, self: .Type) -> Type {
    $self match {
        case Bool -> { make Type.Bool }
        case I8 -> { make Type.I8 }
        case I32 -> { make Type.I32 }
        case I64 -> { make Type.I64 }
        case Ptr -> { ~ $arena flip clone $arena flip Arena:push<_> make Type.Ptr }
        case Generic -> { ~ make Type.Generic }
        case Hole -> { ~ make Type.Hole }
        case Tuple -> { $arena flip TupleType-clone make Type.Tuple }
        case Custom -> { $arena flip CustomTypeType-clone make Type.Custom }
        case Fun -> { $arena flip FunType-clone make Type.Fun }
    }
}

struct FunType {
    token: Token
    parameters: Array<Type>
    returns: Array<Type>
}
fn FunType-format(fmt: .Formatter, self: .FunType) {
    $fmt "(FunType " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.parameters Types-format
    $fmt " " Fmt:write
    $fmt &self.returns Types-format
    $fmt ")" Fmt:write
}
fn FunType-eq(a: .FunType, b: .FunType) -> bool {
    &a.parameters &b.parameters Types-eq if {
        &a.returns &b.returns Types-eq
    } else {
        0 1 =
    }
}
fn FunType-clone(arena: .Arena, self: .FunType) -> FunType {
    $self.token
    $arena &self.parameters Array:clone<_>
    $arena &self.returns Array:clone<_> make FunType
}

fn Types-format(fmt: .Formatter, self: .Array<Type>) {
    $fmt \format $self Array:format<Type>
}
fn Types-eq(a: .Array<Type>, b: .Array<Type>) -> bool {
    \eq $a $b Array:eq<Type>
}

struct TupleType {
    token: Token
    items: Array<Type>
}
fn TupleType-format(fmt: .Formatter, self: .TupleType) {
    $fmt "(TupleType " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.items Types-format
    $fmt ")" Fmt:write
}
fn TupleType-eq(a: .TupleType, b: .TupleType) -> bool {
    &a.items &b.items Types-eq
}
fn TupleType-clone(arena: .Arena, self: .TupleType) -> TupleType {
    $self.token $arena &self.items Array:clone<_> make TupleType
}

struct CustomTypeType {
    type-definition: CustomTypeHandle
    generic-arguments: Array<Type>
}
fn CustomTypeType-format(fmt: .Formatter, self: .CustomTypeType) {
    $fmt "(CustomType " Fmt:write
    $fmt $self.type-definition.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.type-definition.index i32-format
    $fmt " " Fmt:write
    $fmt &self.generic-arguments Types-format
    $fmt ")" Fmt:write
}
fn CustomTypeType-eq(a: .CustomTypeType, b: .CustomTypeType) -> bool {
    &a.type-definition &b.type-definition CustomTypeHandle-eq if {
        &a.generic-arguments &b.generic-arguments Types-eq
    } else {
        0 1 =
    }
}
fn CustomTypeType-clone(arena: .Arena, self: .CustomTypeType) -> CustomTypeType {
    $self.type-definition $arena &self.generic-arguments Array:clone<_> make CustomTypeType
}

struct CustomTypeHandle { module: ModuleId index: i32 }
fn CustomTypeHandle-format(fmt: .Formatter, self: .CustomTypeHandle) {
    $fmt "(CustomTypeHandle " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}
fn CustomTypeHandle-eq(a: .CustomTypeHandle, b: .CustomTypeHandle) -> bool {
    $a.module.index $b.module.index = $a.index $b.index = and
}

fn contains-generic(type: .Type) -> bool {
    $type match {
        case I8 -> { 0 1 = }
        case I32 -> { 0 1 = }
        case I64 -> { 0 1 = }
        case Bool -> { 0 1 = }
        case Ptr -> { ~ contains-generic }
        case Hole -> { drop 0 1 = }
        case Fun -> {
            @fun
            &fun.parameters \contains-generic Array:any<_>
            &fun.returns \contains-generic Array:any<_> or
        }
        case Custom -> { .generic-arguments \contains-generic Array:any<_> }
        case Tuple -> { .items \contains-generic Array:any<_> }
        case Generic -> { drop 1 1 = }
    }
}

fn with-generics(arena: .Arena, type: .Type, generics: .Array<Type>) -> Type {
    $type match {
        case Ptr -> {
            $arena flip ~ $generics with-generics
            $arena flip Arena:push<_> make Type.Ptr
        }
        case Tuple -> {
            @tuple
            $tuple.token
            $arena &tuple.items $generics all-with-generics
            make TupleType
            make Type.Tuple
        }
        case Generic -> {
            .index $generics flip ~ Array:get<_> ~
        }
        case Fun -> {
            @fun
            $fun.token
            $arena &fun.parameters $generics all-with-generics
            $arena &fun.returns $generics all-with-generics
            make FunType
            make Type.Fun
        }
        case Custom -> {
            @custom
            $custom.type-definition
            $arena &custom.generic-arguments $generics all-with-generics
            make CustomTypeType
            make Type.Custom
        }
        case _ -> { ~ }
    }
}

fn all-with-generics(arena: .Arena, types: .Array<Type>, generics: .Array<Type>) -> Array<Type> {
    $arena $types.len Array:new-with-capacity<Type> @filled
    loop {
        $filled.len $types.len = if { $filled break }
        &filled
        $arena $types $filled.len Array:get<_> $generics with-generics
        Array:push-assert-no-alloc<_>
    }
}

