import "../std/str.watim" as STR
import "../std/arena.watim" as A
import "../std/io.watim" as IO
import "../std/core.watim" as CORE
import "../std/util.watim" as U
import "../std/fmt.watim" as FMT
import "../std/array.watim" as Array

fn TOKEN_FN() -> i32 { 1 }
fn TOKEN_IDENT() -> i32 { 2 }
fn TOKEN_LEFT_PAREN() -> i32 { 3 }
fn TOKEN_RIGHT_PAREN() -> i32 { 4 }
fn TOKEN_COLON() -> i32 { 5 }
fn TOKEN_DOT() -> i32 { 6 }
fn TOKEN_LEFT_CURLY() -> i32 { 7 }
fn TOKEN_RIGHT_CURLY() -> i32 { 8 }
fn TOKEN_BANG() -> i32 { 9 }
fn TOKEN_STRING() -> i32 { 10 }
fn TOKEN_ARROW() -> i32 { 11 }
fn TOKEN_I32() -> i32 { 12 }
fn TOKEN_I64() -> i32 { 13 }
fn TOKEN_BOOL() -> i32 { 14 }
fn TOKEN_COMMA() -> i32 { 16 }
fn TOKEN_EXTERN() -> i32 { 17 }
fn TOKEN_AS() -> i32 { 18 }
fn TOKEN_IMPORT() -> i32 { 19 }
fn TOKEN_NUMBER() -> i32 { 20 }
fn TOKEN_DOLLAR() -> i32 { 21 }
fn TOKEN_IF() -> i32 { 22 }
fn TOKEN_BREAK() -> i32 { 23 }
fn TOKEN_HASH() -> i32 { 24 }
fn TOKEN_LOOP() -> i32 { 25 }
fn TOKEN_MEMORY() -> i32 { 26 }
fn TOKEN_LOCAL() -> i32 { 27 }
fn TOKEN_ELSE() -> i32 { 28 }
fn TOKEN_STRUCT() -> i32 { 29 }
fn TOKEN_AMPERSAND() -> i32 { 30 }
fn TOKEN_AT() -> i32 { 31 }
fn TOKEN_TILDE() -> i32 { 33 }
fn TOKEN_DOUBLE_ARROW() -> i32 { 34 }
fn TOKEN_COLON_COLON() -> i32 { 35 }
fn TOKEN_LEFT_BRACKET() -> i32 { 36 }
fn TOKEN_RIGHT_BRACKET() -> i32 { 37 }
fn TOKEN_I8() -> i32 { 38 }
fn TOKEN_BLOCK() -> i32 { 39 }
fn TOKEN_BRACKET_EQUAL() -> i32 { 40 }
fn TOKEN_LEFT_TRIANGLE() -> i32 { 41 }
fn TOKEN_RIGHT_TRIANGLE() -> i32 { 42 }
fn TOKEN_BACKSLASH() -> i32 { 43 }

fn token-ty-name(ty: i32) -> .i32, i32 {
    loop {
        $ty TOKEN_FN = if { "TOKEN_FN" break }
        $ty TOKEN_IDENT = if { "TOKEN_IDENT" break }
        $ty TOKEN_LEFT_PAREN = if { "TOKEN_LEFT_PAREN" break }
        $ty TOKEN_RIGHT_PAREN = if { "TOKEN_RIGHT_PAREN" break }
        $ty TOKEN_COLON = if { "TOKEN_COLON" break }
        $ty TOKEN_DOT = if { "TOKEN_DOT" break }
        $ty TOKEN_LEFT_CURLY = if { "TOKEN_LEFT_CURLY" break }
        $ty TOKEN_RIGHT_CURLY = if { "TOKEN_RIGHT_CURLY" break }
        $ty TOKEN_BANG = if { "TOKEN_BANG" break }
        $ty TOKEN_STRING = if { "TOKEN_STRING" break }
        $ty TOKEN_ARROW = if { "TOKEN_ARROW" break }
        $ty TOKEN_I32 = if { "TOKEN_I32" break }
        $ty TOKEN_I64 = if { "TOKEN_I64" break }
        $ty TOKEN_BOOL = if { "TOKEN_BOOL" break }
        $ty TOKEN_COMMA = if { "TOKEN_COMMA" break }
        $ty TOKEN_EXTERN = if { "TOKEN_EXTERN" break }
        $ty TOKEN_AS = if { "TOKEN_AS" break }
        $ty TOKEN_IMPORT = if { "TOKEN_IMPORT" break }
        $ty TOKEN_NUMBER = if { "TOKEN_NUMBER" break }
        $ty TOKEN_DOLLAR = if { "TOKEN_DOLLAR" break }
        $ty TOKEN_IF = if { "TOKEN_IF" break }
        $ty TOKEN_BREAK = if { "TOKEN_BREAK" break }
        $ty TOKEN_HASH = if { "TOKEN_HASH" break }
        $ty TOKEN_LOOP = if { "TOKEN_LOOP" break }
        $ty TOKEN_MEMORY = if { "TOKEN_MEMORY" break }
        $ty TOKEN_LOCAL = if { "TOKEN_LOCAL" break }
        $ty TOKEN_ELSE = if { "TOKEN_ELSE" break }
        $ty TOKEN_STRUCT = if { "TOKEN_STRUCT" break }
        $ty TOKEN_AMPERSAND  = if { "TOKEN_AMPERSAND" break }
        $ty TOKEN_AT  = if { "TOKEN_AT" break }
        $ty TOKEN_TILDE  = if { "TOKEN_TILDE" break }
        $ty TOKEN_DOUBLE_ARROW = if { "TOKEN_DOUBLE_ARROW" break }
        $ty TOKEN_COLON_COLON = if { "TOKEN_COLON_COLON" break }
        $ty TOKEN_LEFT_BRACKET = if { "TOKEN_LEFT_BRACKET" break }
        $ty TOKEN_RIGHT_BRACKET = if { "TOKEN_RIGHT_BRACKET" break }
        $ty TOKEN_I8 = if { "TOKEN_I8" break }
        $ty TOKEN_BLOCK = if { "TOKEN_BLOCK" break }
        $ty TOKEN_BRACKET_EQUAL = if { "TOKEN_BRACKET_EQUAL" break }
        $ty TOKEN_LEFT_TRIANGLE = if { "TOKEN_LEFT_TRIANGLE" break }
        $ty TOKEN_RIGHT_TRIANGLE = if { "TOKEN_RIGHT_TRIANGLE" break }
        $ty TOKEN_BACKSLASH = if { "TOKEN_BACKSLASH" break }
        "INVALID TOKEN TYPE" break
    }
}

fn format-location(formatter: .FMT:Formatter, file-ptr: .i32, file-len: i32, line: i32, column: i32) {
    $formatter $file-ptr $file-len FMT:Formatter-write
    $formatter ":" FMT:Formatter-write
    $line $formatter U:i32-format
    $formatter ":" FMT:Formatter-write
    $column $formatter U:i32-format
}
fn print-location(fd: i32, file-ptr: .i32, file-len: i32, line: i32, column: i32) {
    $fd $file-ptr $file-len IO:write-all IO:check
    $fd ":" IO:write-all IO:check
    $fd $line IO:print-to-fd
    $fd ":" IO:write-all IO:check
    $fd $column IO:print-to-fd
}

struct Token {
    ty: i32
    lexeme: STR:Str
    string: STR:Str
    file: STR:Str
    line: i32
    column: i32
    number: i32
}
fn Token-new(ty: i32, lexeme: STR:Str, file: STR:Str, line: i32, column: i32) -> Token {
    local self: Token
    $ty #self.ty
    $lexeme #self.lexeme
    $file #self.file
    $line #self.line
    $column #self.column
    0 #self.number
    $self
}
fn Token-ty(token: .Token) -> i32 {
    $token.ty
}
fn Token-lexeme(token: .Token) -> .STR:Str {
    &token.lexeme
}
fn Token-file(token: .Token) -> .STR:Str {
    &token.file
}
fn Token-line(token: .Token) -> i32 {
    $token.line
}
fn Token-column(token: .Token) -> i32 {
    $token.column
}
fn Token-location(self: .Token) -> .i32, i32, i32, i32 {
    $self.file STR:Str-unpack $self.line $self.column
}
fn Token-format(formatter: .FMT:Formatter, self: .Token) {
    $formatter $self Token-location format-location
    $formatter " lexeme: \"" FMT:Formatter-write
    $formatter $self Token-lexeme ~ STR:Str-unpack FMT:Formatter-write
    $formatter "\", type: " FMT:Formatter-write
    $formatter $self Token-ty token-ty-name FMT:Formatter-write
    $formatter "\n" FMT:Formatter-write
}

struct Lexer {
    input: STR:Str
    index: i32
    tokens: Array:Array<Token>
    file: STR:Str
    line: i32
    column: i32
    start: i32
    arena: .A:Arena
}
fn Lexer-new(arena: .A:Arena, input-ptr: .i32, input-len: i32, file: STR:Str) -> Lexer {
    local self: Lexer
    $input-ptr $input-len STR:Str-new #self.input
    0 #self.index
    Array:new<Token> #self.tokens
    $file #self.file
    1 #self.line
    1 #self.column
    0 #self.start
    $arena #self.arena
    $self
}
// consumes Lexer
fn Lexer-run(lexer: Lexer) -> Array:Array<Token> {
    loop {
        &lexer Lexer-next if {
          @token
          $lexer.arena &lexer.tokens $token Array:push<Token>
        } else { drop break }
    }
    $lexer.tokens
}

fn Lexer-next(lexer: .Lexer) -> Token, bool {
    local char: i32
    local lexeme: STR:Str
    local uninit: Token
    loop {
        &lexer.input STR:Str-len $lexer.index = if { 
            $uninit 0 1 = break 
        }

        &lexer.input $lexer.index STR:Str-get #char
        &lexer.input $lexer.index 1 STR:Str-slice #lexeme

        $char "/" drop load8 = if {
            $lexer.index &lexer.input STR:Str-len lt if {
                &lexer.input $lexer.index 1 + STR:Str-get "/" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    loop {
                        &lexer.input STR:Str-len $lexer.index = if { break }
                        &lexer.input $lexer.index STR:Str-get
                        "\n" drop load8 = if { 
                            break 
                        }
                        $lexer.index 1 + #lexer.index
                    }
                    1 #lexer.column
                    $lexer Lexer-next break
                }
            }
        }
        $char "\n" drop load8 = if {
            $lexer.index 1 + #lexer.index
            1 #lexer.column
            $lexer.line 1 + #lexer.line
            $lexer Lexer-next break
        }
        $char "\r" drop load8 = if {
            $lexer.index 1 + #lexer.index
            $lexer Lexer-next break
        }
        $char " " drop load8 = if {
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            $lexer Lexer-next break
        }
        $char "\t" drop load8 = if {
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            $lexer Lexer-next break
        }
        $char "\"" drop load8 = if {
            $lexer Lexer-lex-string 1 1 = break
        }
        $char "<" drop load8 = if {
            TOKEN_LEFT_TRIANGLE $lexeme $lexer.file $lexer.line $lexer.column Token-new
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "(" drop load8 = if {
            TOKEN_LEFT_PAREN $lexeme $lexer.file $lexer.line $lexer.column Token-new
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char ":" drop load8 = if {
            &lexer.input STR:Str-len $lexer.index 1 + gt if {
                &lexer.input $lexer.index 1 + STR:Str-get ":" drop load8 = if {
                    &lexer.input $lexer.index 2 STR:Str-slice #lexeme
                    $lexer.index 2 + #lexer.index
                    $lexer.column 2 + #lexer.column
                    TOKEN_COLON_COLON $lexeme $lexer.file $lexer.line $lexer.column Token-new
                    1 1 = break
                }
            }
        }
        $char ":" drop load8 = if {
            TOKEN_COLON $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "." drop load8 = if {
            TOKEN_DOT $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char ")" drop load8 = if {
            TOKEN_RIGHT_PAREN $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "{" drop load8 = if {
            TOKEN_LEFT_CURLY $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "}" drop load8 = if {
            TOKEN_RIGHT_CURLY $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "[" drop load8 = if {
            &lexer.input STR:Str-len $lexer.index 1 + gt if { 
                &lexer.input $lexer.index 1 + STR:Str-get "=" drop load8 = if {
                    &lexer.input $lexer.index 2 STR:Str-slice #lexeme
                    $lexer.index 2 + #lexer.index
                    $lexer.column 2 + #lexer.column
                    TOKEN_BRACKET_EQUAL $lexeme $lexer.file $lexer.line $lexer.column Token-new 
                    1 1 = break
                }
            }
            TOKEN_LEFT_BRACKET $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        } 
        $char "]" drop load8 = if {
            TOKEN_RIGHT_BRACKET $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "!" drop load8 = if {
            TOKEN_BANG $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "," drop load8 = if {
            TOKEN_COMMA $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "$" drop load8 = if {
            TOKEN_DOLLAR $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "#" drop load8 = if {
            TOKEN_HASH $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "@" drop load8 = if {
            TOKEN_AT $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "&" drop load8 = if {
            TOKEN_AMPERSAND $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "~" drop load8 = if {
            TOKEN_TILDE $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char ">" drop load8 = if {
            &lexer.input $lexer.index 1 STR:Str-slice #lexeme
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            TOKEN_RIGHT_TRIANGLE $lexeme $lexer.file $lexer.line $lexer.column Token-new 1 1 = break
        } 
        $char "\\" drop load8 = if {
            TOKEN_BACKSLASH $lexeme $lexer.file $lexer.line $lexer.column Token-new 
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
            1 1 = break
        }
        $char "=" drop load8 = if {
            &lexer.input STR:Str-len $lexer.index 1 + gt if { 
                &lexer.input $lexer.index 1 + STR:Str-get ">" drop load8 = if {
                    &lexer.input $lexer.index 2 STR:Str-slice #lexeme
                    $lexer.index 2 + #lexer.index
                    $lexer.column 2 + #lexer.column
                    TOKEN_DOUBLE_ARROW $lexeme $lexer.file $lexer.line $lexer.column Token-new 
                    1 1 = break
                }
            }
        } 
        $char "-" drop load8 = if {
            &lexer.input STR:Str-len $lexer.index 1 + gt if { 
                &lexer.input $lexer.index 1 + STR:Str-get ">" drop load8 = if {
                    &lexer.input $lexer.index 2 STR:Str-slice #lexeme
                    $lexer.index 2 + #lexer.index
                    $lexer.column 2 + #lexer.column
                    TOKEN_ARROW $lexeme $lexer.file $lexer.line $lexer.column Token-new 
                    1 1 = break
                }
            }
        }
        $char is-ascii-digit if {
            $lexer Lexer-lex-number 1 1 = break
        }
        $char allowed-in-ident if {
            $lexer Lexer-lex-ident 1 1 = break
        } 
        2 &lexer.file ~ STR:Str-unpack IO:write-all IO:check
        2 ":" IO:write-all IO:check
        2 $lexer.line IO:print-to-fd
        2 ":" IO:write-all IO:check
        2 $lexer.column IO:print-to-fd
        2 ": Unexpected character \"" IO:write-all IO:check
        2 &lexeme ~ STR:Str-unpack IO:write-all IO:check
        2 "\"\n" IO:write-all IO:check
        1 CORE:exit

        $uninit 1 0 = break
    }
}
fn Lexer-lex-ident(lexer: .Lexer) -> Token {
    local ident: STR:Str
    local char: i32
    local line: i32
    local column: i32
    loop {
        $lexer.index #lexer.start
        $lexer.line #line
        $lexer.column #column
        loop {
            $lexer.index &lexer.input STR:Str-len lt if {
                &lexer.input $lexer.index STR:Str-get #char
                $char allowed-in-ident not if {
                    break
                }
            } else {
                break
            }
            $lexer.index 1 + #lexer.index
            $lexer.column 1 + #lexer.column
        }
        &lexer.input
        $lexer.start
        $lexer.index $lexer.start - 
        STR:Str-slice #ident
        &ident ~ STR:Str-unpack "fn" STR:str-eq if {
            TOKEN_FN $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "i32" STR:str-eq if {
            TOKEN_I32 $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "i8" STR:str-eq if {
            TOKEN_I8 $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "i64" STR:str-eq if {
            TOKEN_I64 $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "bool" STR:str-eq if {
            TOKEN_BOOL $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "extern" STR:str-eq if {
            TOKEN_EXTERN $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "as" STR:str-eq if {
            TOKEN_AS $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "import" STR:str-eq if {
            TOKEN_IMPORT $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "loop" STR:str-eq if {
            TOKEN_LOOP $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "memory" STR:str-eq if {
            TOKEN_MEMORY $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "local" STR:str-eq if {
            TOKEN_LOCAL $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "if" STR:str-eq if {
            TOKEN_IF $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "else" STR:str-eq if {
            TOKEN_ELSE $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "break" STR:str-eq if {
            TOKEN_BREAK $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "struct" STR:str-eq if {
            TOKEN_STRUCT $ident $lexer.file $line $column Token-new break
        }
        &ident ~ STR:Str-unpack "block" STR:str-eq if {
            TOKEN_BLOCK $ident $lexer.file $line $column Token-new break
        }
        TOKEN_IDENT $ident $lexer.file $line $column Token-new break
    }
}
fn Lexer-lex-string(lexer: .Lexer) -> Token {
    $lexer.arena 0 A:alloc-bytes @buf
    $lexer.index #lexer.start

    $lexer.line @line
    $lexer.column @column
    $lexer.index 1 + #lexer.index
    $lexer.column 1 + #lexer.column

    loop {
        &lexer.input STR:Str-len $lexer.index = if {
            1 "Unterminated String\n" IO:write-all IO:check
            1 CORE:exit
            break
        }
        &lexer.input $lexer.index STR:Str-get @char
        $lexer.index 1 + #lexer.index
        $lexer.column 1 + #lexer.column
        $char "\"" drop load8 = if {
            break
        }
        $char "\\" drop load8 = if {
            &lexer.input STR:Str-len $lexer.index = if {
                1 "Unterminated String\n" IO:write-all IO:check
                1 CORE:exit
                break
            }
            &lexer.input $lexer.index STR:Str-get #char
            loop {
                $char "\"" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    $lexer.column 1 + #lexer.column
                    
                    $lexer.arena "\"" A:push-bytes drop break
                }
                $char "n" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    $lexer.column 1 + #lexer.column
                    $lexer.arena "\n" A:push-bytes drop break
                }
                $char "t" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    $lexer.column 1 + #lexer.column
                    $lexer.arena "\t" A:push-bytes drop break
                }
                $char "r" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    $lexer.column 1 + #lexer.column
                    $lexer.arena "\r" A:push-bytes drop break
                }
                $char "\\" drop load8 = if {
                    $lexer.index 1 + #lexer.index
                    $lexer.column 1 + #lexer.column
                    $lexer.arena "\\" A:push-bytes drop break
                }
                $lexer.arena "\\" A:push-bytes drop
                $lexer.arena $char A:push-byte
                break
            }
        } else {
            $lexer.arena $char A:push-byte
        }
    }

    $lexer.arena 0 A:alloc-bytes @buf-end
    $buf $buf-end $buf - STR:Str-new @string

    TOKEN_STRING
    &lexer.input
    $lexer.start
    $lexer.index $lexer.start -
    STR:Str-slice
    $lexer.file
    $line
    $column
    Token-new @token
    $string #token.string
    $token
}
fn Lexer-lex-number(lexer: .Lexer) -> Token {
    local char: i32
    local num: i32
    local lexeme: STR:Str
    local line: i32
    local column: i32
    $lexer.index #lexer.start
    $lexer.line #line
    $lexer.column #column
    loop {
        &lexer.input STR:Str-len $lexer.index = if {
            break
        }
        &lexer.input $lexer.index STR:Str-get #char
        $char is-ascii-digit not if { break }
        $lexer.index 1 + #lexer.index
        $lexer.column 1 + #lexer.column
    }
    &lexer.input
    $lexer.start
    $lexer.index $lexer.start -
    STR:Str-slice #lexeme
    $lexeme STR:Str-unpack U:parse #num
    TOKEN_NUMBER
    $lexeme
    $lexer.file
    $line
    $column
    Token-new @token
    $num #token.number
    $token
}
fn allowed-in-ident(char: i32) -> bool {
    0 0 = @res
    "#${}()<> \t\n:,.!&~" @disallowed-len @disallowed
    0 @i
    loop {
        $i $disallowed-len = if { break }
        $disallowed $i + load8 $char = if { 
            0 1 = #res break
        }
        $i 1 + #i
    }
    $res
}
fn is-ascii-digit(char: i32) -> bool {
    $char 48 ge $char 57 le and
}

fn lex(arena: .A:Arena, input: STR:Str, file: STR:Str) -> Array:Array<Token> {
    $arena $input STR:Str-unpack $file Lexer-new Lexer-run
}

