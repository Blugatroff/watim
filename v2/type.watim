import "../std/maybe.watim" as Maybe (Maybe)
import "../std/array.watim" as Array (Array)
import "../std/arena.watim" as Arena (Arena)
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/util.watim" as Util (i32-format)
import "../std/fmt.watim" as Fmt (Formatter)
import "../std/io.watim" as IO

import "./lexer.watim" as Lexer (Token, Token-format, Token-lexeme)
import "./parser.watim" as P

struct ModuleId { index: i32 }
fn ModuleId-format(fmt: .Formatter, self: .ModuleId) {
    $fmt $self.index i32-format
}

struct NamedType {
    name: Token
    type: Type
}
fn NamedType-format(fmt: .Formatter, self: .NamedType) {
    $fmt "(NamedType " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type-format
    $fmt ")" Fmt:write
}
fn NamedType-type(self: .NamedType) -> Type { $self.type }

struct Struct {
    name: Token
    generic-parameters: Array<Token>
    fields: Array<NamedType>
}
fn Struct-format(fmt: .Formatter, self: .Struct) {
    $fmt "(Struct\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "generic-parameters=" Fmt:write
    $fmt \Token-format &self.generic-parameters Array:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "fields=" Fmt:write
    $fmt \NamedType-format &self.fields Array:format-multi-line<NamedType>
    $fmt Fmt:dedent
    $fmt ")" Fmt:write
}

struct VariantCase {
    name: Token
    type: Maybe<Type>
}
fn VariantCase-format(fmt: .Formatter, self: .VariantCase) {
    $fmt "(VariantCase " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt \Type-format &self.type Maybe:format<Type>
    $fmt ")" Fmt:write
}
fn VariantCase-name(self: .VariantCase) -> ByteSlice {
    &self.name Token-lexeme make ByteSlice
}

struct Variant {
    name: Token
    generic-parameters: Array<Token>
    cases: Array<VariantCase>
}
fn Variant-format(fmt: .Formatter, self: .Variant) {
    $fmt "(Variant\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "generic-parameters=" Fmt:write
    $fmt \Token-format &self.generic-parameters Array:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "cases=" Fmt:write
    $fmt \VariantCase-format &self.cases Array:format-multi-line<VariantCase>
    $fmt Fmt:dedent
    $fmt ")" Fmt:write
}

variant CustomType {
    case Struct -> Struct
    case Variant -> Variant
}
fn CustomType-format(fmt: .Formatter, self: .CustomType) {
    $fmt $self match {
        case Struct -> { Struct-format }
        case Variant -> { Variant-format }
    }
}

struct TypeLookup {
    module-id: ModuleId
    types: .Array<CustomType>
    other-modules: .Array<.Array<CustomType>>
}
fn lookup-type(lookup: .TypeLookup, handle: CustomTypeHandle) -> .CustomType {
    $handle.module $lookup.module-id = if {
        $lookup.types $handle.index Array:get<CustomType>
    } else {
        $lookup.other-modules $handle.module.index Array:get<.Array<CustomType>> ~ $handle.index Array:get<CustomType>
    }
}

variant Type {
    case Bool
    case I32
    case I64
    case Ptr -> .Type
    case Custom -> CustomTypeType
    case Fun -> FunType
    case Tuple -> TupleType
    case Generic -> P:GenericType
}
fn Type-contains-generic(self: .Type) -> bool {
    $self match {
        case Ptr -> { ~ Type-contains-generic }
        case Custom -> { CustomTypeType-contains-generic }
        case Fun -> { FunType-contains-generic }
        case Tuple -> { .items Types-contains-generic }
        case Generic -> { drop 1 1 = }
        case _ -> { drop 0 1 = }
    }
}
fn Type-format(fmt: .Formatter, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "Bool" }
        case I32 -> { "I32" }
        case I64 -> { "I64" }
        case Ptr -> {
            $fmt "(Ptr " Fmt:write
            ~ Type-format
            $fmt ")" Fmt:write
            break
        }
        case Custom -> { CustomTypeType-format break }
        case Fun -> { FunType-format break }
        case Tuple -> { TupleType-format break }
        case Generic -> { P:GenericType-format break }
    } Fmt:write
} }
fn Type-pretty(fmt: .Formatter, lookup: .TypeLookup, self: .Type) { block {
    $fmt $self match {
        case Bool -> { "bool" }
        case I32 -> { "i32" }
        case I64 -> { "i64" }
        case Ptr -> { $fmt "." Fmt:write ~ $lookup flip Type-pretty break }
        case Custom -> { $lookup flip CustomTypeType-pretty break }
        case Fun -> { $lookup flip FunType-pretty break }
        case Tuple -> { $lookup flip TupleType-pretty break }
        case Generic -> { P:GenericType-pretty break }
    } Fmt:write
} }
fn Type-eq(a: .Type, b: .Type) -> bool {
    $a match {
        case Bool -> { $b match { case Bool -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I32 -> { $b match { case I32 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case I64 -> { $b match { case I64 -> { 1 1 = } case _ -> { drop 0 1 = } } }
        case Ptr -> {
            ~ $b match {
                case Ptr -> { ~ Type-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Custom -> {
            $b match {
                case Custom -> { CustomTypeType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Fun -> {
            $b match {
                case Fun -> { FunType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Tuple -> {
            $b match {
                case Tuple -> { TupleType-eq }
                case _ -> { drop drop 0 1 = }
            }
        }
        case Generic -> {
            .index ~ $b match {
                case Generic -> { .index ~ = }
                case _ -> { drop drop 0 1 = }
            }
        }
    }
}

struct FunType {
    token: Token
    parameters: Types
    returns: Types
}
fn FunType-contains-generic(self: .FunType) -> bool {
    &self.parameters Types-contains-generic &self.returns Types-contains-generic or
}
fn FunType-format(fmt: .Formatter, self: .FunType) {
    $fmt "(FunType " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.parameters.inner Types-format
    $fmt " " Fmt:write
    $fmt &self.returns.inner Types-format
    $fmt ")" Fmt:write
}
fn FunType-pretty(fmt: .Formatter, lookup: .TypeLookup, self: .FunType) {
    $fmt "(" Fmt:write
    $fmt $lookup &self.parameters.inner Types-pretty
    $fmt " -> " Fmt:write
    $fmt $lookup &self.returns.inner Types-pretty
    $fmt ")" Fmt:write
}
fn FunType-eq(a: .FunType, b: .FunType) -> bool {
    &a.parameters &b.parameters Types-eq if {
        &a.returns &b.returns Types-eq
    } else {
        0 1 =
    }
}

struct Types {
    inner: Array<Type>
    index-of-first-generic: i32
}
fn Types-contains-generic(self: .Types) -> bool {
    $self.index-of-first-generic 0 not /=
}
fn Types-clone(arena: .Arena, self: .Types) -> Types {
    $arena &self.inner Array:clone<Type> $self.index-of-first-generic make Types
}
fn Types-len(self: .Types) -> i32 {
    $self.inner.len
}
fn Types-push(arena: .Arena, self: .Types, type: Type) {
    $self.index-of-first-generic 0 not = if {
        &type Type-contains-generic if {
            $self.inner.len #self.index-of-first-generic
        }
    }
    $arena &self.inner $type Array:push<Type>
}
fn Types-push-assert-no-alloc(self: .Types, type: Type) {
    $self.index-of-first-generic 0 not = if {
        &type Type-contains-generic if {
            $self.inner.len #self.index-of-first-generic
        }
    }
    &self.inner $type Array:push-assert-no-alloc<Type>
}
fn update-index-of-first-generic(self: .Types) {
    0 @i
    loop {
        $i $self.inner.len = if { 0 not #self.index-of-first-generic break }
        &self.inner $i Array:get<Type> Type-contains-generic if {
            $i #self.index-of-first-generic
            break
        }
        $i 1 + #i
    }
}
fn Types-pop(self: .Types) -> Type {
    &self.inner Array:pop<Type>
    $self.inner.len $self.index-of-first-generic = if {
        0 not #self.index-of-first-generic
    }
}
fn Types-get(self: .Types, index: i32) -> .Type {
    &self.inner $index Array:get<Type>
}
fn Types-new() -> Types {
    Array:new<Type> 0 not make Types
}
fn Types-new-with-capacity(arena: .Arena, cap: i32) -> Types {
    $arena $cap Array:new-with-capacity<Type> 0 not make Types
}
fn Types-wrap(types: Array<Type>) -> Types {
    $types 0 not make Types @new
    &new update-index-of-first-generic
    $new
}
fn Types-reverse(self: .Types) {
    &self.inner Array:reverse<Type>
    $self update-index-of-first-generic
}
fn Types-truncate(self: .Types, len: i32) {
    $self.index-of-first-generic $len lt if {
        0 not #self.index-of-first-generic
    }
    &self.inner $len Array:truncate<Type>
}
fn Types-append(arena: .Arena, self: .Types, other: .Types) {
    0 @i
    loop {
        $i $other Types-len = if { break }
        $arena $self $other $i Types-get ~ Types-push
        $i 1 + #i
    }
}
fn Types-clone-inner(arena: .Arena, self: .Types) -> Array<Type> {
    $arena &self.inner Array:clone<Type>
}
fn Types-format(fmt: .Formatter, self: .Array<Type>) {
    $fmt \Type-format $self Array:format<Type>
}
fn Types-format'(fmt: .Formatter, self: .Types) {
    $fmt \Type-format &self.inner Array:format<Type>
}
fn Types-eq(a: .Types, b: .Types) -> bool {
    \Type-eq &a.inner &b.inner Array:eq<Type>
}
fn Types-pretty(fmt: .Formatter, lookup: .TypeLookup, self: .Array<Type>) {
    0 @i
    loop {
        $i $self.len = if { break }
        $fmt $lookup $self $i Array:get<Type> Type-pretty
        $i 1 + #i
        $i $self.len = if { break }
        $fmt ", " Fmt:write
    }
}
fn Types-pretty-bracketed(fmt: .Formatter, lookup: .TypeLookup, self: .Array<Type>) {
    $fmt "[" Fmt:write
    $fmt $lookup $self Types-pretty
    $fmt "]" Fmt:write
}

struct TupleType {
    token: Token
    items: Types
}
fn TupleType-format(fmt: .Formatter, self: .TupleType) {
    $fmt "(TupleType " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt &self.items.inner Types-format
    $fmt ")" Fmt:write
}
fn TupleType-pretty(fmt: .Formatter, thr: .TypeLookup, self: .TupleType) {
    $fmt "[" Fmt:write
    0 @i
    loop {
        $i $self.items.inner.len = if { break }
        $fmt $thr &self.items.inner $i Array:get<Type> Type-pretty
        $i 1 + #i
        $i $self.items.inner.len = if { break }
        $fmt ", " Fmt:write
    }
    $fmt "]" Fmt:write
}
fn TupleType-eq(a: .TupleType, b: .TupleType) -> bool {
    &a.items &b.items Types-eq
}

struct CustomTypeType {
    type-definition: CustomTypeHandle
    generic-arguments: Types
}
fn CustomTypeType-contains-generic(self: .CustomTypeType) -> bool {
    &self.generic-arguments Types-contains-generic
}
fn CustomTypeType-format(fmt: .Formatter, self: .CustomTypeType) {
    $fmt "(CustomType " Fmt:write
    $fmt $self.type-definition.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.type-definition.index i32-format
    $fmt " " Fmt:write
    $fmt &self.generic-arguments.inner Types-format
    $fmt ")" Fmt:write
}
fn CustomTypeType-pretty(fmt: .Formatter, thr: .TypeLookup, self: .CustomTypeType) {
    $fmt $thr $self.type-definition lookup-type match {
        case Struct  -> { .name }
        case Variant -> { .name }
    } Token-lexeme Fmt:write
}
fn CustomTypeType-eq(a: .CustomTypeType, b: .CustomTypeType) -> bool {
    &a.type-definition &b.type-definition CustomTypeHandle-eq if {
        &a.generic-arguments &b.generic-arguments Types-eq
    } else {
        0 1 =
    }
}

struct CustomTypeHandle { module: ModuleId index: i32 }
fn CustomTypeHandle-format(fmt: .Formatter, self: .CustomTypeHandle) {
    $fmt "(CustomTypeHandle " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}
fn CustomTypeHandle-eq(a: .CustomTypeHandle, b: .CustomTypeHandle) -> bool {
    $a.module.index $b.module.index = $a.index $b.index = and
}

