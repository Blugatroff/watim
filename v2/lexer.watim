import "../std/core.watim" as Core
import "../std/io.watim" as IO
import "../std/util.watim" as Util
import "../std/bytes.watim" as Bytes
import "../std/byte-array.watim" as ByteArray
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/array.watim" as Array
import "../std/arena.watim" as Arena
import "../std/fmt.watim" as Fmt (Formatter)

variant TokenTy {
    case TOKEN_NUMBER
    case TOKEN_FN
    case TOKEN_IMPORT
    case TOKEN_IDENT
    case TOKEN_STRING
    case TOKEN_LEFT_TRIANGLE
    case TOKEN_RIGHT_TRIANGLE
    case TOKEN_LEFT_PAREN
    case TOKEN_RIGHT_PAREN
    case TOKEN_LEFT_BRACE
    case TOKEN_RIGHT_BRACE
    case TOKEN_COLON
    case TOKEN_DOT
    case TOKEN_COMMA
    case TOKEN_DOLLAR
    case TOKEN_AMPERSAND
    case TOKEN_HASH
    case TOKEN_AT
    case TOKEN_BANG
    case TOKEN_TILDE
    case TOKEN_BACKSLASH
    case TOKEN_MEMORY
    case TOKEN_LOCAL
    case TOKEN_AS
    case TOKEN_STRUCT
    case TOKEN_BLOCK
    case TOKEN_BREAK
    case TOKEN_LOOP
    case TOKEN_IF
    case TOKEN_ELSE
    case TOKEN_EXTERN
    case TOKEN_BOOL
    case TOKEN_I8
    case TOKEN_I32
    case TOKEN_I64
    case TOKEN_ARROW
    case TOKEN_DOUBLE_ARROW
    case TOKEN_SIZEOF
    case TOKEN_SPACE
    case TOKEN_MAKE
    case TOKEN_UNDERSCORE
}

fn TokenTy-name(self: TokenTy) -> .i32, i32 {
    $self match {
        case TOKEN_NUMBER -> { "NUMBER" }
        case TOKEN_FN -> { "FN" }
        case TOKEN_IMPORT -> { "IMPORT" }
        case TOKEN_IDENT -> { "IDENT" }
        case TOKEN_STRING -> { "STRING" }
        case TOKEN_LEFT_TRIANGLE -> { "LEFT_TRIANGLE" }
        case TOKEN_RIGHT_TRIANGLE -> { "RIGHT_TRIANGLE" }
        case TOKEN_LEFT_PAREN -> { "LEFT_PAREN" }
        case TOKEN_RIGHT_PAREN -> { "RIGHT_PAREN" }
        case TOKEN_LEFT_BRACE -> { "LEFT_BRACE" }
        case TOKEN_RIGHT_BRACE -> { "RIGHT_BRACE" }
        case TOKEN_COLON -> { "COLON" }
        case TOKEN_DOT -> { "DOT" }
        case TOKEN_COMMA -> { "COMMA" }
        case TOKEN_DOLLAR -> { "DOLLAR" }
        case TOKEN_AMPERSAND -> { "AMPERSAND" }
        case TOKEN_HASH -> { "HASH" }
        case TOKEN_AT -> { "AT" }
        case TOKEN_BANG -> { "BANG" }
        case TOKEN_TILDE -> { "TILDE" }
        case TOKEN_BACKSLASH -> { "BACKSLASH" }
        case TOKEN_MEMORY -> { "MEMORY" }
        case TOKEN_LOCAL -> { "LOCAL" }
        case TOKEN_AS -> { "AS" }
        case TOKEN_STRUCT -> { "STRUCT" }
        case TOKEN_BLOCK -> { "BLOCK" }
        case TOKEN_BREAK -> { "BREAK" }
        case TOKEN_LOOP -> { "LOOP" }
        case TOKEN_IF -> { "IF" }
        case TOKEN_ELSE -> { "ELSE" }
        case TOKEN_EXTERN -> { "EXTERN" }
        case TOKEN_BOOL -> { "BOOL" }
        case TOKEN_I8 -> { "I8" }
        case TOKEN_I32 -> { "I32" }
        case TOKEN_I64 -> { "I64" }
        case TOKEN_ARROW -> { "ARROW" }
        case TOKEN_DOUBLE_ARROW -> { "DOUBLE_ARROW" }
        case TOKEN_SIZEOF -> { "SIZEOF" }
        case TOKEN_SPACE -> { "SPACE" }
        case TOKEN_MAKE -> { "MAKE" }
        case TOKEN_UNDERSCORE -> { "UNDERSCORE" }
    }
}

struct ImmediateString {
    len: i32
    // the data
}
struct Token {
    // l = line, c = column, t = type
    // llllllll llllllll cccccccc cctttttt
    // => max line = 2**16-1 = 65535, max column = 2**10-1 = 1023, max-type = 2**6-1 = 63
    ty-and-line-and-column: i32
    lexeme: .ImmediateString
}
fn Token-new(ty: TokenTy, line: i32, column: i32, lexeme: .ImmediateString) -> Token {
    make Token {
        $line 16 rotl $column 6 rotl $ty !i32 or or @ty-and-line-and-column
        $lexeme @lexeme
    }
}
fn Token-ty(self: .Token) -> TokenTy {
    $self.ty-and-line-and-column 63 and !TokenTy
}
fn Token-new-keyword(ty: TokenTy, line: i32, column: i32) -> Token {
    $ty $line $column 0 !.ImmediateString Token-new
}
fn Token-line(self: .Token) -> i32 {
    $self.ty-and-line-and-column 16 rotr 65535 and
}
fn Token-column(self: .Token) -> i32 {
    $self.ty-and-line-and-column 6 rotr 1023 and
}
fn Token-lexeme(self: .Token) -> .i32, i32 { block {
    $self Token-hardcoded-lexeme @len @ptr
    $ptr 0 !.i32 /= if { $ptr $len break }
    $self.lexeme 0 !.ImmediateString = if { 0 0 / drop }
    $self.lexeme sizeof(ImmediateString) + !.i32
    $self.lexeme.len break
} }
fn Token-string-content(arena: .Arena:Arena, self: .Token) -> ByteSlice {
    $arena $self Token-lexeme 2 - flip 1 + flip
    make ByteSlice ByteSlice:unescape
}
fn Token-hardcoded-lexeme(self: .Token) -> .i32, i32 {
    $self Token-ty match {
        case TOKEN_FN -> { "fn" }
        case TOKEN_IMPORT -> { "import" }
        case TOKEN_STRUCT -> { "struct" }
        case TOKEN_LOOP -> { "loop" }
        case TOKEN_BREAK -> { "break" }
        case TOKEN_BLOCK -> { "block" }
        case TOKEN_IF -> { "if" }
        case TOKEN_AS -> { "as" }
        case TOKEN_MEMORY -> { "memory" }
        case TOKEN_LOCAL -> { "local" }
        case TOKEN_ELSE -> { "else" }
        case TOKEN_EXTERN -> { "extern" }
        case TOKEN_BOOL -> { "bool" }
        case TOKEN_I8 -> { "i8" }
        case TOKEN_I32 -> { "i32" }
        case TOKEN_I64 -> { "i64" }
        case TOKEN_ARROW -> { "->" }
        case TOKEN_DOUBLE_ARROW -> { "=>" }
        case TOKEN_SIZEOF -> { "sizeof" }
        case TOKEN_SPACE -> { " " }
        case TOKEN_MAKE -> { "make" }
        case TOKEN_LEFT_TRIANGLE -> { "<" }
        case TOKEN_RIGHT_TRIANGLE -> { ">" }
        case TOKEN_LEFT_PAREN -> { "(" }
        case TOKEN_RIGHT_PAREN -> { ")" }
        case TOKEN_LEFT_BRACE -> { "{" }
        case TOKEN_RIGHT_BRACE -> { "}" }
        case TOKEN_COLON -> { ":" }
        case TOKEN_DOT -> { "." }
        case TOKEN_COMMA -> { "," }
        case TOKEN_DOLLAR -> { "$" }
        case TOKEN_AMPERSAND -> { "&" }
        case TOKEN_HASH -> { "#" }
        case TOKEN_AT -> { "@" }
        case TOKEN_BANG -> { "!" }
        case TOKEN_TILDE -> { "~" }
        case TOKEN_BACKSLASH -> { "\\" }
        case TOKEN_UNDERSCORE -> { "_" }
        case TOKEN_NUMBER -> { 0 !.i32 0 }
        case TOKEN_IDENT -> { 0 !.i32 0 }
        case TOKEN_STRING -> { 0 !.i32 0 }
    }
}
fn Token-format(fmt: .Formatter, self: .Token) {
    $fmt "(" Fmt:write
    $fmt $self Token-ty TokenTy-name Fmt:write
    $fmt " " Fmt:write
    $fmt $self Token-lexeme Fmt:write
    $fmt " " Fmt:write
    $fmt $self Token-line Util:i32-format
    $fmt " " Fmt:write
    $fmt $self Token-column Util:i32-format
    $fmt ")" Fmt:write
}
fn Token-print(fd: i32, self: .Token) -> i32 { block {
    $fd "(" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self Token-ty TokenTy-name IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self Token-lexeme IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self Token-line IO:print Core:dup<i32> 0 /= if { break } drop
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self Token-column IO:print Core:dup<i32> 0 /= if { break } drop
    $fd ")" IO:write-all
} }
fn Token-location(self: .Token) -> i32, i32 {
    $self Token-line $self Token-column
}
fn Token-copy(arena: .Arena:Arena, self: .Token) -> Token {
    $self ~ @copy
    $self.lexeme 0 !.ImmediateString /= if {
        $arena $self.lexeme.len sizeof(i32) + Arena:alloc-bytes !.ImmediateString #copy.lexeme
        $self.lexeme.len #copy.lexeme.len
        $self.lexeme sizeof(i32) + !.i32 $copy.lexeme sizeof(i32) + !.i32 $self.lexeme.len Core:copy-bytes
    }
    $copy
}
fn Token-eq-by-lexeme(self: .Token, other: .Token) -> bool {
    $self Token-lexeme $other Token-lexeme Bytes:eq
}
fn Tokens-copy(arena: .Arena:Arena, src: .Array:Array<Token>) -> Array:Array<Token> {
    $arena $src.len Array:new-with-capacity<Token> @dst
    0 @i
    loop {
        $i $src.len = if { break }
        &dst $arena $src $i Array:get<Token> Token-copy Array:push-assert-no-alloc<Token>
        $i 1 + #i
    }
    $dst
}

fn print-location(fd: i32, file-path-ptr: .i32, file-path-len: i32, line: i32, column: i32) -> i32 { block {
    $fd $file-path-ptr $file-path-len IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $line IO:print Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop

    $fd $column IO:print
} }

fn add-space(arena: .Arena:Arena, tokens: .Array:Array<Token>, line: i32, column: i32) {
    $tokens.len 0 = if {
        1 1 =
    } else {
        $tokens Array:last<Token> Token-ty make TokenTy.TOKEN_SPACE /=
    } if {
        $arena $tokens make TokenTy.TOKEN_SPACE $line $column Token-new-keyword Array:push<Token>
    }
}

fn lex(arena: .Arena:Arena, code: .ByteSlice) -> Array:Array<Token> {
    1 @line
    1 @column
    0 @cursor
    1 1 = @done
    Array:new<Token> @tokens
    loop {
        block {
            $cursor $code.len = if { $done break }

            $code $cursor ByteSlice:get-byte @char

            $char "/" drop load8 = if {
                $cursor 1 + #cursor
                $cursor $code.len = if { $done break }
                $code $cursor ByteSlice:get-byte "/" drop load8 = if {
                    $cursor 1 + #cursor
                    loop {
                        $cursor $code.len = if { break }
                        $code $cursor ByteSlice:get-byte "\n" drop load8 = if { break }
                        $cursor 1 + #cursor
                    }
                    1 #column
                    $done not break
                }
            }
            $char "\n" drop load8 = if {
                $arena &tokens $line $column add-space
                $cursor 1 + #cursor
                1 #column
                $line 1 + #line
                $done not break
            }
            $char "\r" drop load8 = if {
                $arena &tokens $line $column add-space
                $cursor 1 + #cursor
                $done not break
            }
            $char " " drop load8 = if {
                $arena &tokens $line $column add-space
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            }
            $char "\t" drop load8 = if {
                $arena &tokens $line $column add-space
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            }
            $char "-" drop load8 = if {
                $column @start-column
                $cursor 1 + $code.len = if { $done break }
                $code $cursor 1 + ByteSlice:get-byte ">" drop load8 = if {
                    $cursor 2 + #cursor
                    $column 2 + #column
                    $arena &tokens make TokenTy.TOKEN_ARROW $line $start-column Token-new-keyword Array:push<Token>
                    $done not break
                }
            }
            $char "=" drop load8 = if {
                $column @start-column
                $cursor 1 + $code.len = if { $done break }
                $code $cursor 1 + ByteSlice:get-byte ">" drop load8 = if {
                    $cursor 2 + #cursor
                    $column 2 + #column
                    $arena &tokens make TokenTy.TOKEN_DOUBLE_ARROW $line $start-column Token-new-keyword Array:push<Token>
                    $done not break
                }
            }
            "<>(){}:.,$&#@!~\\_" @one-char-tokens-len @one-char-tokens
            $one-char-tokens $one-char-tokens-len $char Bytes:find if {
                @index
                $one-char-tokens $index + 1 make ByteSlice @lexeme
                $arena sizeof(i32) 1 + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 1 store
                $lexeme !.i32 4 + $one-char-tokens $index + load8 store8
                $arena &tokens make TokenTy.TOKEN_LEFT_TRIANGLE !i32 $index + !TokenTy $line $column $lexeme Token-new Array:push<Token>
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            } else { drop }
            $char "\"" drop load8 = if {
                $cursor @start
                $line @start-line
                $column @start-column
                $cursor 1 + #cursor
                $column 1 + #column
                loop {
                    $cursor $code.len = if {
                        2 "Unterminated String\n" IO:write-all IO:check
                        1 Core:exit
                    }
                    $code $cursor ByteSlice:get-byte @char
                    $cursor 1 + #cursor
                    $column 1 + #column
                    $char "\"" drop load8 = if { 
                        break
                    }
                    $char "\\" drop load8 = if {
                        $cursor $code.len = if {
                            2 "Unterminated String\n" IO:write-all IO:check
                            1 Core:exit
                        }
                        $code $cursor ByteSlice:get-byte @c
                        "\"ntr\\" $c Bytes:find if {
                            drop
                            $cursor 1 + #cursor
                            $column 1 + #column
                        } else {
                            drop
                        }
                    }
                }
                $code.ptr $start + @lexeme-ptr
                $cursor $start - @lexeme-len
                $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 $lexeme-len store
                $lexeme-ptr $lexeme !.i32 sizeof(i32) + $lexeme-len Core:copy-bytes
                $arena &tokens make TokenTy.TOKEN_STRING $start-line $start-column $lexeme Token-new Array:push<Token>
                $done not break
            }
            $char Bytes:is-ascii-digit if {
                $cursor @start
                $column @start-column
                loop {
                    $cursor $code.len = if { break }
                    $code $cursor ByteSlice:get-byte @char
                    $char Bytes:is-ascii-digit not if { break }
                    $cursor 1 + #cursor
                    $column 1 + #column
                }
                $cursor $start - @lexeme-len
                $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 $lexeme-len store
                $code.ptr $start + $lexeme !.i32 sizeof(i32) + $lexeme-len Core:copy-bytes
                $arena &tokens make TokenTy.TOKEN_NUMBER $line $start-column $lexeme Token-new Array:push<Token>
                $done not break
            }
            $char allowed-in-ident if {
                $line @start-line
                $column @start-column
                $cursor @start
                loop {
                    $cursor $code.len = if { break }
                    $code $cursor ByteSlice:get-byte @char
                    $char allowed-in-ident not if { break }
                    $cursor 1 + #cursor
                    $column 1 + #column
                }
                $code.ptr $start + @lexeme-ptr
                $cursor $start - @lexeme-len

                block {
                    $lexeme-ptr $lexeme-len "fn" Bytes:eq if { make TokenTy.TOKEN_FN $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "import" Bytes:eq if { make TokenTy.TOKEN_IMPORT $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "as" Bytes:eq if { make TokenTy.TOKEN_AS $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "memory" Bytes:eq if { make TokenTy.TOKEN_MEMORY $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "local" Bytes:eq if { make TokenTy.TOKEN_LOCAL $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "struct" Bytes:eq if { make TokenTy.TOKEN_STRUCT $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "block" Bytes:eq if { make TokenTy.TOKEN_BLOCK $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "break" Bytes:eq if { make TokenTy.TOKEN_BREAK $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "loop" Bytes:eq if { make TokenTy.TOKEN_LOOP $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "if" Bytes:eq if { make TokenTy.TOKEN_IF $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "else" Bytes:eq if { make TokenTy.TOKEN_ELSE $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "extern" Bytes:eq if { make TokenTy.TOKEN_EXTERN $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "bool" Bytes:eq if { make TokenTy.TOKEN_BOOL $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i8" Bytes:eq if { make TokenTy.TOKEN_I8 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i32" Bytes:eq if { make TokenTy.TOKEN_I32 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i64" Bytes:eq if { make TokenTy.TOKEN_I64 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "->" Bytes:eq if { make TokenTy.TOKEN_ARROW $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "sizeof" Bytes:eq if { make TokenTy.TOKEN_SIZEOF $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "make" Bytes:eq if { make TokenTy.TOKEN_MAKE $start-line $start-column Token-new-keyword break }
                    $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                    $lexeme !.i32 $lexeme-len store
                    $lexeme-ptr $lexeme sizeof(i32) + !.i32 $lexeme-len Core:copy-bytes
                    make TokenTy.TOKEN_IDENT $start-line $start-column $lexeme Token-new break
                } @token 
                $arena &tokens $token Array:push<Token>
                $done not break
            }
            2 "Unexpected character encountered: " IO:write-all IO:check
            2 $char IO:write-byte IO:check
            2 IO:newline
            1 Core:exit
            Core:unreachable<bool> break
        } if {
            break
        }
    }
    $tokens
}

fn allowed-in-ident(char: i32) -> bool {
    "#${}()<> \t\n:,.!&~\"" @disallowed-len @disallowed
    0 @i
    loop {
        $i $disallowed-len = if { 1 1 = break }
        $disallowed $i + load8 $char = if { 
            0 1 = break
        }
        $i 1 + #i
    }
}

