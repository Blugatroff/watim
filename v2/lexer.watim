import "../std/core.watim" as CORE
import "../std/io.watim" as IO
import "../std/bytes.watim" as Bytes
import "../std/byte-array.watim" as ByteArray
import "../std/byte-slice.watim" as ByteSlice
import "../std/array.watim" as Array
import "../std/core.watim" as CORE
import "../std/arena.watim" as Arena

fn TOKEN_NUMBER() -> i32 { 1 }
fn TOKEN_FN() -> i32 { 2 }
fn TOKEN_IMPORT() -> i32 { 3 }
fn TOKEN_IDENT() -> i32 { 4 }
fn TOKEN_STRING() -> i32 { 5 }
fn TOKEN_LEFT_TRIANGLE() -> i32 { 6 }
fn TOKEN_RIGHT_TRIANGLE() -> i32 { 7 }
fn TOKEN_LEFT_PAREN() -> i32 { 8 }
fn TOKEN_RIGHT_PAREN() -> i32 { 9 }
fn TOKEN_LEFT_BRACE() -> i32 { 10 }
fn TOKEN_RIGHT_BRACE() -> i32 { 11 }
fn TOKEN_COLON() -> i32 { 12 }
fn TOKEN_DOT() -> i32 { 13 }
fn TOKEN_COMMA() -> i32 { 14 }
fn TOKEN_DOLLAR() -> i32 { 15 }
fn TOKEN_AMPERSAND() -> i32 { 16 }
fn TOKEN_HASH() -> i32 { 17 }
fn TOKEN_AT() -> i32 { 18 }
fn TOKEN_BANG() -> i32 { 19 }
fn TOKEN_TILDE() -> i32 { 20 }
fn TOKEN_BACKSLASH() -> i32 { 21 }
fn TOKEN_MEMORY() -> i32 { 22 }
fn TOKEN_LOCAL() -> i32 { 23 }
fn TOKEN_AS() -> i32 { 24 }
fn TOKEN_STRUCT() -> i32 { 25 }
fn TOKEN_BLOCK() -> i32 { 26 }
fn TOKEN_BREAK() -> i32 { 27 }
fn TOKEN_LOOP() -> i32 { 28 }
fn TOKEN_IF() -> i32 { 29 }
fn TOKEN_ELSE() -> i32 { 30 }
fn TOKEN_EXTERN() -> i32 { 31 }
fn TOKEN_BOOL() -> i32 { 32 }
fn TOKEN_I8() -> i32 { 34 }
fn TOKEN_I32() -> i32 { 35 }
fn TOKEN_I64() -> i32 { 36 }
fn TOKEN_ARROW() -> i32 { 37 }
fn TOKEN_DOUBLE_ARROW() -> i32 { 38 }
fn TOKEN_SIZEOF() -> i32 { 39 }
fn TokenTy-name(self: i32) -> .i32, i32 {
    block {
        $self TOKEN_NUMBER = if { "TOKEN_NUMBER" break }
        $self TOKEN_FN = if { "TOKEN_FN" break }
        $self TOKEN_IMPORT = if { "TOKEN_IMPORT" break }
        $self TOKEN_IDENT = if { "TOKEN_IDENT" break }
        $self TOKEN_STRING = if { "TOKEN_STRING" break }

        $self TOKEN_LEFT_TRIANGLE = if { "TOKEN_LEFT_TRIANGLE" break }
        $self TOKEN_RIGHT_TRIANGLE = if { "TOKEN_RIGHT_TRIANGLE" break }
        $self TOKEN_LEFT_PAREN = if { "TOKEN_LEFT_PAREN" break }
        $self TOKEN_RIGHT_PAREN = if { "TOKEN_RIGHT_PAREN" break }
        $self TOKEN_LEFT_BRACE = if { "TOKEN_LEFT_BRACE" break }
        $self TOKEN_RIGHT_BRACE = if { "TOKEN_RIGHT_BRACE" break }
        $self TOKEN_COLON = if { "TOKEN_COLON" break }
        $self TOKEN_DOT = if { "TOKEN_DOT" break }
        $self TOKEN_COMMA = if { "TOKEN_COMMA" break }
        $self TOKEN_DOLLAR = if { "TOKEN_DOLLAR" break }
        $self TOKEN_AMPERSAND = if { "TOKEN_AMPERSAND" break }
        $self TOKEN_HASH = if { "TOKEN_HASH" break }
        $self TOKEN_AT = if { "TOKEN_AT" break }
        $self TOKEN_BANG = if { "TOKEN_BANG" break }
        $self TOKEN_TILDE = if { "TOKEN_TILDE" break }
        $self TOKEN_BACKSLASH = if { "TOKEN_BACKSLASH" break }

        $self TOKEN_MEMORY = if { "TOKEN_MEMORY" break }
        $self TOKEN_LOCAL = if { "TOKEN_LOCAL" break }
        $self TOKEN_AS = if { "TOKEN_AS" break }
        $self TOKEN_STRUCT = if { "TOKEN_STRUCT" break }
        $self TOKEN_BLOCK = if { "TOKEN_BLOCK" break }
        $self TOKEN_BREAK = if { "TOKEN_BREAK" break }
        $self TOKEN_LOOP = if { "TOKEN_LOOP" break }
        $self TOKEN_IF = if { "TOKEN_IF" break }
        $self TOKEN_ELSE = if { "TOKEN_ELSE" break }
        $self TOKEN_EXTERN = if { "TOKEN_EXTERN" break }
        $self TOKEN_BOOL = if { "TOKEN_BOOL" break }
        $self TOKEN_I8 = if { "TOKEN_I8" break }
        $self TOKEN_I32 = if { "TOKEN_I32" break }
        $self TOKEN_I64 = if { "TOKEN_I64" break }
        $self TOKEN_ARROW = if { "TOKEN_ARROW" break }
        $self TOKEN_DOUBLE_ARROW = if { "TOKEN_DOUBLE_ARROW" break }
        $self TOKEN_SIZEOF = if { "TOKEN_SIZEOF" break }
        CORE:unreachable<.i32> CORE:unreachable<i32>
    }
}

struct ImmediateString {
    len: i32
    // the data
}
struct Token {
    // l = line, c = column, t = type
    // llllllll llllllll cccccccc cctttttt
    // => max line = 2**16-1 = 65535, max column = 2**10-1 = 1023, max-type = 2**6-1 = 63
    ty-and-line-and-column: i32
    lexeme: .ImmediateString
}
fn Token-new(ty: i32, line: i32, column: i32, lexeme: .ImmediateString) -> Token {
    local self: Token
    $line 16 rotl $column 6 rotl $ty or or #self.ty-and-line-and-column
    $lexeme #self.lexeme
    $self
}
fn Token-ty(self: .Token) -> i32 {
    $self.ty-and-line-and-column 63 and
}
fn Token-new-keyword(ty: i32, line: i32, column: i32) -> Token {
    $ty $line $column 0 !.ImmediateString Token-new
}
fn Token-line(self: .Token) -> i32 {
    $self.ty-and-line-and-column 16 rotr 65535 and
}
fn Token-column(self: .Token) -> i32 {
    $self.ty-and-line-and-column 6 rotr 1023 and
}
fn Token-lexeme(self: .Token) -> .i32, i32 { block {
    $self Token-hardcoded-lexeme @len @ptr
    $ptr 0 !.i32 /= if { $ptr $len break }
    $self.lexeme 0 !.ImmediateString = if { 0 0 / drop }
    $self.lexeme sizeof(ImmediateString) + !.i32
    $self.lexeme.len break
} }
fn Token-hardcoded-lexeme(self: .Token) -> .i32, i32 { block {
    $self Token-ty @ty
    $ty TOKEN_FN = if { "fn" break }
    $ty TOKEN_IMPORT = if { "import" break }
    $ty TOKEN_STRUCT = if { "struct" break }
    $ty TOKEN_LOOP = if { "loop" break }
    $ty TOKEN_BREAK = if { "break" break }
    $ty TOKEN_BLOCK = if { "block" break }
    $ty TOKEN_IF = if { "if" break }
    $ty TOKEN_AS = if { "as" break }
    $ty TOKEN_MEMORY = if { "memory" break }
    $ty TOKEN_LOCAL = if { "local" break }
    $ty TOKEN_ELSE = if { "else" break }
    $ty TOKEN_EXTERN = if { "extern" break }
    $ty TOKEN_BOOL = if { "bool" break }
    $ty TOKEN_I8 = if { "i8" break }
    $ty TOKEN_I32 = if { "i32" break }
    $ty TOKEN_I64 = if { "i64" break }
    $ty TOKEN_ARROW = if { "->" break }
    $ty TOKEN_DOUBLE_ARROW = if { "=>" break }
    $ty TOKEN_SIZEOF = if { "sizeof" break }
    0 !.i32 0 break
} }
fn Token-write(fd: i32, self: .Token) -> i32 { block {
    $fd "{ \"line\": " IO:write-all @code $code 0 /= if { $code break }
    $fd $self Token-line IO:print CORE:dup<i32> 0 /= if { break } else { drop }
    $fd ", \"column\": " IO:write-all #code $code 0 /= if { $code break }
    $fd $self Token-column IO:print CORE:dup<i32> 0 /= if { break } else { drop }
    $fd ", \"type\": \"" IO:write-all #code $code 0 /= if { $code break }
    $fd $self Token-ty TokenTy-name IO:write-all #code $code 0 /= if { $code break }
    $fd "\", \"lexeme\": \"" IO:write-all #code $code 0 /= if { $code break }
    $fd $self Token-lexeme IO:write-escaped #code $code 0 /= if { $code break }
    $fd "\" }" IO:write-all
} }
fn Token-location(self: .Token) -> i32, i32 {
    $self Token-line $self Token-column
}
fn Token-copy(arena: .Arena:Arena, self: .Token) -> Token {
    $self ~ @copy
    $self.lexeme 0 !.ImmediateString /= if {
        $arena $self.lexeme.len sizeof(i32) + Arena:alloc-bytes !.ImmediateString #copy.lexeme
        $self.lexeme.len #copy.lexeme.len
        $self.lexeme sizeof(i32) + !.i32 $copy.lexeme sizeof(i32) + !.i32 $self.lexeme.len CORE:copy-bytes
    }
    $copy
}
fn Token-eq-by-lexeme(self: .Token, other: .Token) -> bool {
    $self Token-lexeme $other Token-lexeme Bytes:eq
}
fn Tokens-copy(arena: .Arena:Arena, src: .Array:Array<Token>) -> Array:Array<Token> {
    $arena $src.len Array:new-with-capacity<Token> @dst
    0 @i
    loop {
        $i $src.len = if { break }
        &dst $arena $src $i Array:get<Token> Token-copy Array:push-assert-no-alloc<Token>
        $i 1 + #i
    }
    $dst
}

fn print-location(fd: i32, file-path-ptr: .i32, file-path-len: i32, line: i32, column: i32) -> i32 { block {
    $fd $file-path-ptr $file-path-len IO:write-all CORE:dup<i32> 0 /= if { break } else { drop }
    $fd ":" IO:write-all CORE:dup<i32> 0 /= if { break } else { drop }
    $fd $line IO:print CORE:dup<i32> 0 /= if { break } else { drop }
    $fd ":" IO:write-all CORE:dup<i32> 0 /= if { break } else { drop }
    $fd $column IO:print
} }

fn lex(arena: .Arena:Arena, code: .ByteSlice:T) -> Array:Array<Token> {
    1 @line
    1 @column
    0 @cursor
    1 1 = @done
    Array:new<Token> @tokens
    loop {
        block {
            $cursor $code.len = if { $done break }

            $code $cursor ByteSlice:get-byte @char

            $char "/" drop load8 = if {
                $cursor 1 + #cursor
                $cursor $code.len = if { $done break }
                $code $cursor ByteSlice:get-byte "/" drop load8 = if {
                    $cursor 1 + #cursor
                    loop {
                        $cursor $code.len = if { break }
                        $code $cursor ByteSlice:get-byte "\n" drop load8 = if { break }
                        $cursor 1 + #cursor
                    }
                    1 #column
                    $done not break
                }
            }
            $char "\n" drop load8 = if {
                $cursor 1 + #cursor
                1 #column
                $line 1 + #line
                $done not break
            }
            $char "\r" drop load8 = if {
                $cursor 1 + #cursor
                $done not break
            }
            $char " " drop load8 = if {
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            }
            $char "\t" drop load8 = if {
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            }
            $char "-" drop load8 = if {
                $column @start-column
                $cursor 1 + $code.len = if { $done break }
                $code $cursor 1 + ByteSlice:get-byte ">" drop load8 = if {
                    $cursor 2 + #cursor
                    $column 2 + #column
                    $arena &tokens TOKEN_ARROW $line $start-column Token-new-keyword Array:push<Token>
                    $done not break
                }
            }
            $char "=" drop load8 = if {
                $column @start-column
                $cursor 1 + $code.len = if { $done break }
                $code $cursor 1 + ByteSlice:get-byte ">" drop load8 = if {
                    $cursor 2 + #cursor
                    $column 2 + #column
                    $arena &tokens TOKEN_DOUBLE_ARROW $line $start-column Token-new-keyword Array:push<Token>
                    $done not break
                }
            }
            "<>(){}:.,$&#@!~\\" @one-char-tokens-len @one-char-tokens
            $one-char-tokens $one-char-tokens-len $char Bytes:find if {
                @index
                $one-char-tokens $index + 1 ByteSlice:new @lexeme
                $arena sizeof(i32) 1 + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 1 store
                $lexeme !.i32 4 + $one-char-tokens $index + load8 store8
                $arena &tokens TOKEN_LEFT_TRIANGLE $index + $line $column $lexeme Token-new Array:push<Token>
                $cursor 1 + #cursor
                $column 1 + #column
                $done not break
            } else { drop }
            $char "\"" drop load8 = if {
                $cursor @start
                $line @start-line
                $column @start-column
                $cursor 1 + #cursor
                $column 1 + #column
                loop {
                    $cursor $code.len = if {
                        2 "Unterminated String\n" IO:write-all IO:check
                        1 CORE:exit
                    }
                    $code $cursor ByteSlice:get-byte @char
                    $cursor 1 + #cursor
                    $column 1 + #column
                    $char "\"" drop load8 = if { 
                        break
                    }
                    $char "\\" drop load8 = if {
                        $cursor $code.len = if {
                            2 "Unterminated String\n" IO:write-all IO:check
                            1 CORE:exit
                        }
                        $code $cursor ByteSlice:get-byte @c
                        "\"ntr\\" $c Bytes:find if {
                            drop
                            $cursor 1 + #cursor
                            $column 1 + #column
                        } else {
                            drop
                        }
                    }
                }
                $code.ptr $start + @lexeme-ptr
                $cursor $start - @lexeme-len
                $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 $lexeme-len store
                $lexeme-ptr $lexeme !.i32 sizeof(i32) + $lexeme-len CORE:copy-bytes
                $arena &tokens TOKEN_STRING $start-line $start-column $lexeme Token-new Array:push<Token>
                $done not break
            }
            $char Bytes:is-ascii-digit if {
                $cursor @start
                $column @start-column
                loop {
                    $cursor $code.len = if { break }
                    $code $cursor ByteSlice:get-byte @char
                    $char Bytes:is-ascii-digit not if { break }
                    $cursor 1 + #cursor
                    $column 1 + #column
                }
                $cursor $start - @lexeme-len
                $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                $lexeme !.i32 $lexeme-len store
                $code.ptr $start + $lexeme !.i32 sizeof(i32) + $lexeme-len CORE:copy-bytes
                $arena &tokens TOKEN_NUMBER $line $start-column $lexeme Token-new Array:push<Token>
                $done not break
            }
            $char allowed-in-ident if {
                $line @start-line
                $column @start-column
                $cursor @start
                loop {
                    $cursor $code.len = if { break }
                    $code $cursor ByteSlice:get-byte @char
                    $char allowed-in-ident not if { break }
                    $cursor 1 + #cursor
                    $column 1 + #column
                }
                $code.ptr $start + @lexeme-ptr
                $cursor $start - @lexeme-len

                block {
                    $lexeme-ptr $lexeme-len "fn" Bytes:eq if { TOKEN_FN $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "import" Bytes:eq if { TOKEN_IMPORT $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "as" Bytes:eq if { TOKEN_AS $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "memory" Bytes:eq if { TOKEN_MEMORY $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "local" Bytes:eq if { TOKEN_LOCAL $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "struct" Bytes:eq if { TOKEN_STRUCT $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "block" Bytes:eq if { TOKEN_BLOCK $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "break" Bytes:eq if { TOKEN_BREAK $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "loop" Bytes:eq if { TOKEN_LOOP $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "if" Bytes:eq if { TOKEN_IF $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "else" Bytes:eq if { TOKEN_ELSE $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "extern" Bytes:eq if { TOKEN_EXTERN $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "bool" Bytes:eq if { TOKEN_BOOL $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i8" Bytes:eq if { TOKEN_I8 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i32" Bytes:eq if { TOKEN_I32 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "i64" Bytes:eq if { TOKEN_I64 $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "->" Bytes:eq if { TOKEN_ARROW $start-line $start-column Token-new-keyword break }
                    $lexeme-ptr $lexeme-len "sizeof" Bytes:eq if { TOKEN_SIZEOF $start-line $start-column Token-new-keyword break }
                    $arena sizeof(i32) $lexeme-len + Arena:alloc-bytes !.ImmediateString @lexeme
                    $lexeme !.i32 $lexeme-len store
                    $lexeme-ptr $lexeme sizeof(i32) + !.i32 $lexeme-len CORE:copy-bytes
                    TOKEN_IDENT $start-line $start-column $lexeme Token-new break
                } @token 
                $arena &tokens $token Array:push<Token>
                $done not break
            }
            2 "Unexpected character encountered: " IO:write-all IO:check
            2 $char IO:write-byte IO:check
            2 IO:newline
            1 CORE:exit
            CORE:unreachable<bool> break
        } if {
            break
        }
    }
    $tokens
}

fn allowed-in-ident(char: i32) -> bool {
    "#${}()<> \t\n:,.!&~\"" @disallowed-len @disallowed
    0 @i
    loop {
        $i $disallowed-len = if { 1 1 = break }
        $disallowed $i + load8 $char = if { 
            0 1 = break
        }
        $i 1 + #i
    }
}

