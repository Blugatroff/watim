import "../std/maybe.watim" as Maybe (Maybe, assert-some)
import "../std/arena.watim" as Arena (Arena)
import "../std/array.watim" as Array (Array)
import "../std/map.watim" as Map (Map)
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/fmt.watim" as Fmt (Formatter)
import "../std/util.watim" as Util (i32-format)

import "./lexer.watim" as Lexer (Token, Token-lexeme)
import "./type.watim" as Type (Type)

struct Local {
    name: Token
    type: Type
    reffed: bool
    is-parameter: bool
}

struct LocalId {
    name: ByteSlice
    scope: i32
    shadow: i32
}
fn LocalId-eq(a: .LocalId, b: .LocalId) -> bool {
    $a.scope $b.scope = $a.shadow $b.shadow = and
}
fn LocalId-format(fmt: .Formatter, self: .LocalId) {
    $fmt "(LocalId " Fmt:write
    $fmt &self.name Fmt:ByteSlice-format
    $fmt " " Fmt:write
    $fmt $self.scope i32-format
    $fmt " " Fmt:write
    $fmt $self.shadow i32-format
    $fmt ")" Fmt:write
}

struct LocalWithId {
    local: Local
    id: LocalId
}

struct Env {
    parent: Maybe<.Env>
    scope-counter: .i32
    scope-id: i32
    vars: Map<ByteSlice, Array<LocalWithId>>
    vars-by-id: .Map<LocalId, Local>
}
fn new(arena: .Arena) -> Env {
    make Env {
        make Maybe<.Env>.None @parent
        0 @scope-id
        $arena 1 Arena:push<i32> @scope-counter
        \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<LocalWithId>> @vars
        $arena \LocalId-eq Map:new<LocalId, Local> Arena:push<Map<LocalId, Local>> @vars-by-id
    }
}
fn child(self: .Env) -> Env {
    make Env {
        $self make Maybe<.Env>.Some @parent
        $self.scope-counter @scope-counter
        $self.scope-counter ~ @scope-id
        $self.scope-counter ~ 1 + =>self.scope-counter
        \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<LocalWithId>> @vars
        $self.vars-by-id @vars-by-id
    }
}
fn lookup(self: .Env, name: .Token) -> Maybe<.LocalWithId> {
    &self.vars $name Token-lexeme Map:get-bs<Array<LocalWithId>> match {
        case None -> {
            $self.parent match {
                case None -> { make Maybe<.LocalWithId>.None }
                case Some -> { $name lookup }
            }
        }
        case Some -> {
            @vars
            $vars.len 0 = if {
                $self.parent match {
                    case None -> { make Maybe<.LocalWithId>.None }
                    case Some -> { $name lookup }
                }
            } else {
                $vars $vars.len 1 - Array:get<LocalWithId> make Maybe<.LocalWithId>.Some
            }
        }
    }
}
fn insert(arena: .Arena, self: .Env, var: Local) -> LocalId {
    &var.name Token-lexeme make ByteSlice @name
    &self.vars &name Map:get<ByteSlice, Array<LocalWithId>> match {
        case None -> {
            $name $self.scope-id 0 make LocalId @id

            $arena &self.vars $name
            $arena $var $id make LocalWithId Array:singleton<LocalWithId>
            Map:insert<ByteSlice, Array<LocalWithId>> drop

            $arena $self.vars-by-id $id $var Map:insert<LocalId, Local> drop
            $id
        }
        case Some -> {
            @shadowed
            $name $self.scope-id $shadowed.len make LocalId @id

            $arena $shadowed $var $id make LocalWithId Array:push<LocalWithId>
            $arena $self.vars-by-id $id $var Map:insert<LocalId, Local> drop
            $id
        }
    }
}
fn mark-reffed(self: .Env, id: LocalId) {
    $self.vars-by-id &id Map:get<LocalId, Local> assert-some<.Local> .reffed 1 1 = store
}

