import "../std/io.watim" as IO
import "../std/byte-slice.watim" as ByteSlice
import "../std/byte-array.watim" as ByteArray
import "../std/arena.watim" as A
import "../std/array.watim" as Array
import "../std/fs.watim" as FS

import "./parser.watim" as P
import "./lexer.watim" as L

fn determine-compilation-order(arena: .A:Arena, modules: .Array:Array<P:ParsedModule>) -> Array:Array<P:ParsedModule> {
    $arena A:temp @temp @temp-save

    $arena $modules.len Array:new-with-capacity<P:ParsedModule> @ordered

    $temp $modules Array:clone<P:ParsedModule> @unprocessed

    loop {
        $unprocessed.len 0 = if { break }
        0 @i
        1 1 = @stuck
        loop {
            $unprocessed.len $i = if { break }
            &unprocessed $i Array:get<P:ParsedModule> @module
            0 @j
            loop {
                $module.imports.len $j = if { 1 1 = break }

                &module.imports $j Array:get<P:ParsedImport> @imp

                ByteArray:new @absolute-path
                $temp &absolute-path $module.file-path ByteSlice:unpack FS:path-dir ByteArray:push
                $temp &absolute-path $arena &imp.path L:Token-string-content ByteSlice:unpack ByteArray:push
                $temp &absolute-path ByteArray:unpack FS:normalize ByteSlice:new @absolute-path

                // Is this an import of an already `ordered` module?
                &ordered \P:ParsedModule-path-eq &absolute-path Array:find<P:ParsedModule, .ByteSlice:T> flip drop not if {
                    // if not then postpone processing this module.
                    0 1 = break
                }

                $j 1 + #j
            } if {
                &ordered
                &unprocessed $i Array:remove<P:ParsedModule>
                Array:push-assert-no-alloc<P:ParsedModule>
                0 1 = #stuck
            } else {
                $i 1 + #i
            }
        }

        $stuck if { 0 0 / drop }
    }

    $temp $temp-save A:restore
    $ordered
}

