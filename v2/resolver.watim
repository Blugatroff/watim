import "../std/core.watim" as Core
import "../std/result.watim" as Result (Result)
import "../std/bytes.watim" as Bytes
import "../std/io.watim" as IO
import "../std/maybe.watim" as Maybe (Maybe, assert-some)
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/byte-array.watim" as ByteArray (ByteArray)
import "../std/array.watim" as Array (Array)
import "../std/map.watim" as Map (Map)
import "../std/arena.watim" as Arena (Arena)
import "../std/fs.watim" as FS
import "../std/fmt.watim" as Fmt (Formatter)

import "./lexer.watim" as Lexer (Token, Token-lexeme, Token-location)
import "./parser.watim" as P (TopItem)

struct ModuleId { index: i32 }

struct FunctionHandle { module: ModuleId index: i32 }
struct ExternHandle { module: ModuleId index: i32 }
struct UserTypeHandle { module: ModuleId index: i32 }

variant ImportItemItem {
    case Function -> FunctionHandle
    case ExternHandle -> ExternHandle
    case UserType -> UserTypeHandle
}

struct ImportItem {
    name: Token
    handle: ImportItemItem
}

struct Import {
    token: Token
    module: ModuleId
    path: ByteSlice
    qualifier: Token
    items: Array<ImportItem>
}
fn Import-format(fmt: .Formatter, self: .Import) {
    $fmt "(Import)" Fmt:write
}

struct Struct {

}
fn Struct-format(fmt: .Formatter, self: .Struct) {
    $fmt "(Struct)" Fmt:write
}

struct Variant {

}
fn Variant-format(fmt: .Formatter, self: .Variant) {
    $fmt "(Variant)" Fmt:write
}

variant UserType {
    case Struct -> Struct
    case Variant -> Variant
}
fn UserType-format(fmt: .Formatter, self: .UserType) {
    $fmt $self match {
        case Struct -> { Struct-format }
        case Variant -> { Variant-format }
    }
}

struct Module {
    imports: Map<ByteSlice, Array<Import>>
    user-types: Array<UserType>
}
fn format-import-array(fmt: .Formatter, self: .Array<Import>) {
    $fmt \Import-format $self Array:format<Import>
}
fn Module-format(fmt: .Formatter, self: .Module) {
    $fmt "(Module\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "imports=" Fmt:write
    $fmt \Fmt:ByteSlice-format \format-import-array &self.imports Map:format-multi-line<ByteSlice, Array<Import>>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "user-types=" Fmt:write
    $fmt \UserType-format &self.user-types Array:format-multi-line<UserType>
    $fmt "\n" Fmt:write
    $fmt Fmt:dedent
    $fmt Fmt:write-indent
    $fmt ")" Fmt:write
}

struct ResolveError {
    module: ModuleId
    line: i32
    column: i32
    message: ByteArray
}
fn ResolveError-print(fd: i32, self: ResolveError, modules: .Map<ByteSlice, Array<TopItem>>) -> i32 { block {
    &modules.keys $self.module.index Array:get<ByteSlice> @file-path
    $fd $file-path ~ ByteSlice:unpack IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.line IO:print Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.column IO:print Core:dup<i32> 0 /= if { break } drop
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd &self.message ByteArray:unpack IO:write-all
} }
fn abort<T>(ctx: .Ctx, token: .Token, message-ptr: .i32, message-len: i32) -> Result<T, ResolveError> {
    $ctx.module-id $token Token-location $ctx.arena $message-ptr $message-len ByteArray:copy make ResolveError
    make Result<T, ResolveError>.Error
}

struct Ctx {
    arena: .Arena
    parsed-modules: .Map<ByteSlice, Array<TopItem>>
    top-items: .Array<TopItem>
    module-id: ModuleId
}

fn resolve-modules(arena: .Arena, modules: .Map<ByteSlice, Array<TopItem>>) -> Result<Map<ByteSlice, Module>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Module> @resolved-modules
    $modules.keys.len @id
    loop {
        $id 0 = if { $resolved-modules make Result<Map<ByteSlice, Module>, ResolveError>.Success break }
        &modules.keys $id 1 - Array:get<ByteSlice> @module-path
        &modules.values $id 1 - Array:get<Array<TopItem>> @top-items

        $arena $modules $top-items $id 1 - make ModuleId make Ctx @ctx
        &ctx resolve-imports match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @imports
        &ctx &imports resolve-user-types match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @user-types

        $arena &resolved-modules $module-path ~
        $imports $user-types make Module
        Map:insert<ByteSlice, Module> drop
        $id 1 - #id
    }
}

fn resolve-imports(ctx: .Ctx) -> Result<Map<ByteSlice, Array<Import>>, ResolveError> {
    $ctx.arena Arena:temp @temp-arena @save
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<Import>> @resolved-imports
    &ctx.parsed-modules.keys $ctx.module-id.index Array:get<ByteSlice> @module-path
    0 @i
    loop {
        $ctx.top-items.len $i = if { $resolved-imports make Result<Map<ByteSlice, Array<Import>>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Import -> {
                @imp
                $module-path ~ ByteSlice:unpack "-" Bytes:eq if {
                    "" ByteArray:init
                } else {
                    $module-path ~ ByteSlice:unpack FS:path-dir ByteArray:init
                } @path
                $temp-arena &path &imp.path Token-lexeme 2 - flip 1 + flip ByteArray:push
                $temp-arena $path ByteSlice:unpack FS:normalize make ByteSlice @path
                $ctx.parsed-modules &path Map:get-index<ByteSlice, Array<TopItem>> assert-some<i32> make ModuleId @imported-module-id
                $ctx.arena $path ByteSlice:copy @path

                $ctx $imported-module-id &imp.items resolve-import-items match {
                    case Error -> { make Result<Map<ByteSlice, Array<Import>>, ResolveError>.Error break }
                    case Success -> {}
                } @items

                &imp.qualifier Token-lexeme make ByteSlice @qualifier
                $imp.start $imported-module-id $path $imp.qualifier $items make Import @imp
                &resolved-imports &qualifier Map:get<ByteSlice, Array<Import>> match {
                    case None -> {
                        $ctx.arena &resolved-imports $qualifier $ctx.arena $imp Array:singleton<Import> Map:insert<ByteSlice, Array<Import>> drop
                    }
                    case Some -> { $ctx.arena flip $imp Array:push<Import> }
                }
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
    $temp-arena $save Arena:restore
}

fn resolve-import-items(ctx: .Ctx, imported-module-id: ModuleId, items: .Array<Token>) -> Result<Array<ImportItem>, ResolveError> {
    Array:new<ImportItem> @resolved-items
    $ctx.parsed-modules $imported-module-id.index Map:get-value<ByteSlice, Array<TopItem>> @imported-module
    0 @i
    loop {
        $items.len $i = if { $resolved-items make Result<Array<ImportItem>, ResolveError>.Success break }
        $items $i Array:get<Token> @item
        $imported-module $imported-module-id $item lookup-item-in-module match {
            case None -> {
                $ctx $item "not found" abort<Array<ImportItem>> break
            }
            case Some -> {}
        } @item
        $ctx.arena &resolved-items $item Array:push<ImportItem>
        $i 1 + #i
    }
}

fn lookup-item-in-module(module: .Array<TopItem>, module-id: ModuleId, name: .Token) -> Maybe<ImportItem> {
    0 @i
    loop {
        $i $module.len = if { make Maybe<ImportItem>.None break }
        $module $i Array:get<TopItem> match {
            case Struct -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $i make UserTypeHandle make ImportItemItem.UserType make ImportItem make Maybe<ImportItem>.Some break
                }
            }
            case Variant -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $i make UserTypeHandle make ImportItemItem.UserType make ImportItem make Maybe<ImportItem>.Some break
                }
            }
            case Function -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $i make FunctionHandle make ImportItemItem.Function make ImportItem make Maybe<ImportItem>.Some break
                }
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

fn resolve-user-types(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>) -> Result<Array<UserType>, ResolveError> {
    Array:new<UserType> @resolved-user-types
    0 @i
    loop {
        $ctx.top-items.len $i = if { $resolved-user-types make Result<Array<UserType>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Struct -> {
                $ctx flip $imports flip resolve-struct match {
                    case Error -> { make Result<Array<UserType>, ResolveError>.Error break }
                    case Success -> { $ctx.arena flip &resolved-user-types flip make UserType.Struct Array:push<UserType> }
                }
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

fn resolve-struct(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, struc: .P:Struct) -> Result<Struct, ResolveError> { block {
    make Struct make Result<Struct, ResolveError>.Success
} }

