import "../std/core.watim" as Core
import "../std/result.watim" as Result (Result)
import "../std/bytes.watim" as Bytes
import "../std/io.watim" as IO
import "../std/maybe.watim" as Maybe (Maybe, assert-some)
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/byte-array.watim" as ByteArray (ByteArray)
import "../std/array.watim" as Array (Array)
import "../std/map.watim" as Map (Map)
import "../std/arena.watim" as Arena (Arena)
import "../std/fs.watim" as FS
import "../std/util.watim" as Util (i32-format)
import "../std/fmt.watim" as Fmt (Formatter, ByteSlice-format)

import "./logging.watim" as Logging
import "./lexer.watim" as Lexer (Token, Token-lexeme, Token-location, Token-format)
import "./parser.watim" as P (TopItem)
import "./type.watim" as Type (Type, Type-format, ModuleId, CustomTypeHandle, CustomTypeHandle-format, CustomTypeType, FunType)
import "./env.watim" as Env (Env, new, child, Local, LocalId, LocalId-format)

struct FunctionHandle { module: ModuleId index: i32 }
fn FunctionHandle-format(fmt: .Formatter, self: .FunctionHandle) {
    $fmt "(FunctionHandle " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}

struct ExternHandle { module: ModuleId index: i32 }
fn ExternHandle-format(fmt: .Formatter, self: .ExternHandle) {
    $fmt "(ExternHandle " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}

variant ImportItemItem {
    case Function -> FunctionHandle
    case Extern -> ExternHandle
    case CustomType -> CustomTypeHandle
}

struct ImportItem {
    name: Token
    handle: ImportItemItem
}
fn ImportItem-format(fmt: .Formatter, self: .ImportItem) {
    $fmt "(ImportItem " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.handle match {
        case Function -> { FunctionHandle-format }
        case Extern -> { ExternHandle-format }
        case CustomType -> { CustomTypeHandle-format }
    }
    $fmt ")" Fmt:write
}

struct Import {
    token: Token
    module: ModuleId
    path: ByteSlice
    qualifier: Token
    items: Array<ImportItem>
}
fn Import-format(fmt: .Formatter, self: .Import) {
    $fmt "(Import " Fmt:write
    $fmt &self.token Token-format
    $fmt " " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt &self.path ByteSlice-format
    $fmt " " Fmt:write
    $fmt &self.qualifier Token-format
    $fmt " " Fmt:write
    $fmt \ImportItem-format &self.items Array:format-multi-line<ImportItem>
    $fmt ")" Fmt:write
}

struct NamedType {
    name: Token
    type: Type
}
fn NamedType-format(fmt: .Formatter, self: .NamedType) {
    $fmt "(NamedType " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type-format
    $fmt ")" Fmt:write
}

struct Struct {
    name: Token
    generic-parameters: Array<Token>
    fields: Array<NamedType>
}
fn Struct-format(fmt: .Formatter, self: .Struct) {
    $fmt "(Struct\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "generic-parameters=" Fmt:write
    $fmt \Token-format &self.generic-parameters Array:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "fields=" Fmt:write
    $fmt \NamedType-format &self.fields Array:format-multi-line<NamedType>
    $fmt Fmt:dedent
    $fmt ")" Fmt:write
}

struct VariantCase {
    name: Token
    type: Maybe<Type>
}
fn VariantCase-format(fmt: .Formatter, self: .VariantCase) {
    $fmt "(VariantCase " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt \Type-format &self.type Maybe:format<Type>
    $fmt ")" Fmt:write
}

struct Variant {
    name: Token
    generic-parameters: Array<Token>
    cases: Array<VariantCase>
}
fn Variant-format(fmt: .Formatter, self: .Variant) {
    $fmt "(Variant\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "generic-parameters=" Fmt:write
    $fmt \Token-format &self.generic-parameters Array:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "cases=" Fmt:write
    $fmt \VariantCase-format &self.cases Array:format-multi-line<VariantCase>
    $fmt Fmt:dedent
    $fmt ")" Fmt:write

}

variant CustomType {
    case Struct -> Struct
    case Variant -> Variant
}
fn CustomType-format(fmt: .Formatter, self: .CustomType) {
    $fmt $self match {
        case Struct -> { Struct-format }
        case Variant -> { Variant-format }
    }
}

struct Global {
    name: Token
    type: Type
}
fn Global-format(fmt: .Formatter, self: .Global) {
    $fmt "(Global " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.type Type-format
    $fmt ")" Fmt:write
}

struct Signature {
    generic-parameters: Array<Token>
    parameters: Array<NamedType>
    returns: Array<Type>
}
fn Signature-format(fmt: .Formatter, self: .Signature) {
    $fmt "(Signature\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "generic-parameters=" Fmt:write
    $fmt \Token-format &self.generic-parameters Array:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "parameters=" Fmt:write
    $fmt \NamedType-format &self.parameters Array:format<NamedType>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "returns=" Fmt:write
    $fmt \Type-format &self.returns Array:format<Type>
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct Extern {
    name: Token
    extrn-module: ByteSlice
    extrn-name: ByteSlice
    signature: Signature
}
fn Extern-format(fmt: .Formatter, self: .Extern) {
    $fmt "(Extern " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.extrn-module ByteSlice-format
    $fmt " " Fmt:write
    $fmt &self.extrn-name ByteSlice-format
    $fmt " " Fmt:write
    $fmt &self.signature Signature-format
    $fmt ")" Fmt:write
}

struct GlobalId {
    name: Token
    module: ModuleId
    index: i32
}
fn GlobalId-format(fmt: .Formatter, self: .GlobalId) {
    $fmt "(GlobalId " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt $self.module.index i32-format
    $fmt " " Fmt:write
    $fmt $self.index i32-format
    $fmt ")" Fmt:write
}

variant VarId {
    case Local -> LocalId
    case Global -> GlobalId
}
fn VarId-format(fmt: .Formatter, self: .VarId) {
    $self match {
        case Local -> { $fmt flip LocalId-format }
        case Global -> { $fmt flip GlobalId-format }
    }
}

struct FieldAccess {
    name: Token
    source-taip: Type
    target-taip: Type
    field-index: i32
}
fn FieldAccess-format(fmt: .Formatter, self: .FieldAccess) {
    $fmt "(FieldAccess " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.source-taip Type-format
    $fmt " " Fmt:write
    $fmt &self.target-taip Type-format
    $fmt " " Fmt:write
    $fmt $self.field-index i32-format
    $fmt ")" Fmt:write
}

struct GetLocal {
    name: Token
    var: VarId
    var-taip: Type
    fields: Array<FieldAccess>
    result-taip: Type
}
fn GetLocal-format(fmt: .Formatter, self: .GetLocal) {
    $fmt "(GetLocal " Fmt:write
    $fmt &self.name Token-format
    $fmt " " Fmt:write
    $fmt &self.var VarId-format
    $fmt " " Fmt:write
    $fmt &self.var-taip Type-format
    $fmt " " Fmt:write
    $fmt \FieldAccess-format &self.fields Array:format<FieldAccess>
    $fmt " " Fmt:write
    $fmt &self.result-taip Type-format
    $fmt ")" Fmt:write
}

variant Word {
    case Number -> Token
    case GetLocal -> GetLocal
}
fn Word-format(fmt: .Formatter, self: .Word) {
    $self match {
        case Number -> { $fmt "(Number " Fmt:write $fmt flip Token-format $fmt ")" Fmt:write }
        case GetLocal -> { $fmt flip GetLocal-format }
    }
}

struct Function {
    name: Token
    export: Maybe<Token>
    signature: Signature
    words: Array<Word>
}
fn Function-format(fmt: .Formatter, self: .Function) {
    $fmt "(Function\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "name=" Fmt:write
    $fmt &self.name Token-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "export=" Fmt:write
    $fmt \Token-format &self.export Maybe:format<Token>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "signature=" Fmt:write
    $fmt &self.signature Signature-format
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "words=" Fmt:write
    $fmt \Word-format &self.words Array:format-multi-line<Word>
    $fmt ")" Fmt:write
}

struct Module {
    imports: Map<ByteSlice, Array<Import>>
    externs: Map<ByteSlice, Extern>
    custom-types: Map<ByteSlice, CustomType>
    globals: Map<ByteSlice, Global>
    functions: Map<ByteSlice, Function>
}
fn format-import-array(fmt: .Formatter, self: .Array<Import>) {
    $fmt \Import-format $self Array:format<Import>
}
fn Module-format(fmt: .Formatter, self: .Module) {
    $fmt "(Module\n" Fmt:write
    $fmt Fmt:indent
    $fmt Fmt:write-indent
    $fmt "imports=" Fmt:write
    $fmt \Fmt:ByteSlice-format \format-import-array &self.imports Map:format-multi-line<ByteSlice, Array<Import>>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "externs=" Fmt:write
    $fmt \Fmt:ByteSlice-format \Extern-format &self.externs Map:format-multi-line<ByteSlice, Extern>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "custom-types=" Fmt:write
    $fmt \ByteSlice-format \CustomType-format &self.custom-types Map:format-multi-line<ByteSlice, CustomType>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "globals=" Fmt:write
    $fmt \ByteSlice-format \Global-format &self.globals Map:format-multi-line<ByteSlice, Global>
    $fmt ",\n" Fmt:write
    $fmt Fmt:write-indent
    $fmt "functions=" Fmt:write
    $fmt \ByteSlice-format \Function-format &self.functions Map:format-multi-line<ByteSlice, Function>
    $fmt ")" Fmt:write
    $fmt Fmt:dedent
}

struct ResolveError {
    module: ModuleId
    line: i32
    column: i32
    message: ByteArray
}
fn ResolveError-print(fd: i32, self: ResolveError, modules: .Map<ByteSlice, Array<TopItem>>) -> i32 { block {
    &modules.keys $self.module.index Array:get<ByteSlice> @file-path
    $fd $file-path ~ ByteSlice:unpack IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.line IO:print Core:dup<i32> 0 /= if { break } drop
    $fd ":" IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.column IO:print Core:dup<i32> 0 /= if { break } drop
    $fd " " IO:write-all Core:dup<i32> 0 /= if { break } drop
    $fd $self.message ByteArray:unpack IO:write-all
} }
fn abort<T>(ctx: .Ctx, token: .Token, message-ptr: .i32, message-len: i32) -> Result<T, ResolveError> {
    $ctx.module-id $token Token-location $ctx.arena $message-ptr $message-len ByteArray:copy make ResolveError
    make Result<T, ResolveError>.Error
}

struct Ctx {
    arena: .Arena
    parsed-modules: .Map<ByteSlice, Array<TopItem>>
    resolved-modules: .Array<Module>
    top-items: .Array<TopItem>
    module-id: ModuleId
}

fn resolve-modules(arena: .Arena, modules: .Map<ByteSlice, Array<TopItem>>) -> Result<Map<ByteSlice, Module>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Module> @resolved-modules
    0 @id
    loop {
        $id $modules.keys.len = if { $resolved-modules make Result<Map<ByteSlice, Module>, ResolveError>.Success break }
        &modules.keys $id Array:get<ByteSlice> @module-path
        &modules.values $id Array:get<Array<TopItem>> @top-items

        Logging:enabled if {
            2 "Checking module: " IO:write-all IO:check
            2 $module-path ~ ByteSlice:unpack IO:write-all IO:check
            2 "\n" IO:write-all IO:check
        }

        $arena $modules &resolved-modules.values $top-items $id make ModuleId make Ctx @ctx
        &ctx resolve-imports match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @imports
        &ctx &imports resolve-custom-types match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @custom-types
        &ctx &imports resolve-globals match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @globals
        &ctx &imports resolve-externs match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @externs
        &ctx &imports &custom-types.values resolve-functions match {
            case Error -> { make Result<Map<ByteSlice, Module>, ResolveError>.Error break }
            case Success -> {}
        } @functions

        $arena &resolved-modules $module-path ~
        $imports $externs $custom-types $globals $functions make Module
        Map:insert<ByteSlice, Module> drop
        $id 1 + #id
    }
}

fn resolve-globals(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>) -> Result<Map<ByteSlice, Global>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Global> @globals
    0 @i
    loop () -> Result<Map<ByteSlice, Global>, ResolveError> {
        $ctx.top-items.len $i = if { $globals make Result<Map<ByteSlice, Global>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Global -> {
                @globl
                $ctx.arena &globals &globl.name Token-lexeme make ByteSlice
                $globl.name
                $ctx $imports &globl.type resolve-type match {
                    case Error -> { make Result<Map<ByteSlice, Global>, ResolveError>.Error break }
                    case Success -> {}
                }
                make Global
                Map:insert<ByteSlice, Global> drop
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

fn resolve-functions(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, custom-types: .Array<CustomType>) -> Result<Map<ByteSlice, Function>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Function> @functions
    0 @i
    loop () -> Result<Map<ByteSlice, Function>, ResolveError> {
        $ctx.top-items.len $i = if { $functions make Result<Map<ByteSlice, Function>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Function -> {
                @fun
                $ctx.arena &functions &fun.name Token-lexeme make ByteSlice
                $fun.name $fun.export
                $ctx $imports &fun.signature resolve-signature match {
                    case Error -> { make Result<Map<ByteSlice, Function>, ResolveError>.Error break }
                    case Success -> {}
                }
                $ctx.arena Env:new @env
                0 @i
                loop () -> Maybe<ResolveError> {
                    $fun.signature.parameters.len $i = if { make Maybe<ResolveError>.None break }
                    &fun.signature.parameters $i Array:get<P:NamedType> @type
                    $type.name @name
                    $ctx $imports &type.type resolve-type match {
                        case Error -> { make Maybe<ResolveError>.Some break }
                        case Success -> {}
                    } @type
                    $ctx.arena &env make Local {
                        $type @type
                        $name @name
                        0 1 = @reffed
                        1 1 = @is-parameter
                    } Env:insert drop
                    $i 1 + #i
                } match {
                    case Some -> { make Result<Map<ByteSlice, Function>, ResolveError>.Error break }
                    case None -> {}
                }
                make Stack @stack
                $ctx.arena $ctx $imports $env $custom-types &stack make WordCtx @ctx
                &ctx &fun.body.words resolve-words match {
                    case Error -> { make Result<Map<ByteSlice, Function>, ResolveError>.Error break }
                    case Success -> {}
                }
                make Function
                Map:insert<ByteSlice, Function> drop
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

struct WordCtx {
    arena: .Arena
    ctx: .Ctx
    imports: .Map<ByteSlice, Array<Import>>
    env: Env
    types: .Array<CustomType>
    stack: .Stack
}

fn get-type-definition(ctx: .WordCtx, handle: CustomTypeHandle) -> .CustomType {
    $handle.module $ctx.ctx.module-id = if {
        $ctx.types $handle.index Array:get<CustomType>
    } else {
        $ctx.ctx.resolved-modules $handle.module.index Array:get<Module> .custom-types.values $handle.index Array:get<CustomType>
    }
}

fn resolve-words(ctx: .WordCtx, words: .Array<P:Word>) -> Result<Array<Word>, ResolveError> {
    Array:new<Word> @resolved
    0 @i
    loop () -> Result<Array<Word>, ResolveError> {
        $words.len $i = if { $resolved make Result<Array<Word>, ResolveError>.Success break }
        $ctx.arena &resolved
        $ctx $words $i Array:get<P:Word> resolve-word match {
            case Error -> { make Result<Array<Word>, ResolveError>.Error break }
            case Success -> {}
        }
        Array:push<Word>
        $i 1 + #i
    }
}

fn resolve-word(ctx: .WordCtx, word: .P:Word) -> Result<Word, ResolveError> { block {
    $word match {
        case Number -> { ~ make Word.Number }
        case GetLocal -> { $ctx flip resolve-get-locl break }
        case _ -> { drop make Lexer:TokenTy.TOKEN_MAKE 0 0 Lexer:Token-new-keyword make Word.Number }
    } make Result<Word, ResolveError>.Success
} }

struct Stack {

}
fn push(ctx: .WordCtx, type: Type) {

}

fn resolve-get-locl(ctx: .WordCtx, word: .P:GetLocal) -> Result<Word, ResolveError> { block {
    &ctx.env &word.ident Env:lookup match {
        case None -> { $ctx.ctx &word.ident "var not found" abort<Word> break }
        case Some -> {}
    } @local
    $ctx &local.local.type &word.fields resolve-field-accesses match {
        case Error -> { make Result<Word, ResolveError>.Error break }
        case Success -> {}
    } @fields
    $fields.len 0 = if {
        $local.local.type
    } else {
        &fields $fields.len 1 - Array:get<FieldAccess> .target-taip ~
    } @resolved-type
    $ctx $resolved-type push
    $word.ident $local.id make VarId.Local $local.local.type $fields $resolved-type make GetLocal
    make Word.GetLocal
    make Result<Word, ResolveError>.Success
} }

fn resolve-field-accesses(ctx: .WordCtx, type: .Type, fields: .Array<Token>) -> Result<Array<FieldAccess>, ResolveError> { block {
    Array:new<FieldAccess> @resolved
    $fields.len 0 = if { $resolved make Result<Array<FieldAccess>, ResolveError>.Success break }
    $fields.len 1 - @i
    loop {
        $fields $i Array:get<Token> @field-name
        $type match {
            case Custom -> {
                @custom-type
                $ctx $custom-type.type-definition get-type-definition match {
                    case Variant -> {
                        drop $ctx.ctx $field-name "can not access fields of a variant" abort<Array<FieldAccess>> break
                    }
                    case Struct -> {
                        @struc
                        0 @field-index
                        loop {
                            $field-index $struc.fields.len = if {
                                $ctx.ctx $field-name "field not found" abort<i32> break
                            }
                            &struc.fields $field-index Array:get<NamedType> @field
                            &field.name Token-lexeme $field-name Token-lexeme Bytes:eq if {
                                $ctx.arena &resolved
                                $ctx &custom-type.generic-arguments &field.type resolve-generic @target-type
                                $field-name ~ $type ~ $target-type $field-index make FieldAccess
                                Array:push<FieldAccess>
                                0 make Result<i32, ResolveError>.Success break
                            }
                            $field-index 1 + #field-index
                        } match {
                            case Error -> { make Result<Array<FieldAccess>, ResolveError>.Error break }
                            case Success -> { drop }
                        }
                    }
                }
            }
            // case Ptr -> {}
            case _ -> {
                drop
            }
        }
        $i 0 = if { $resolved make Result<Array<FieldAccess>, ResolveError>.Success break }
        $i 1 - #i
    }
} }

fn resolve-generic(ctx: .WordCtx, generics: .Array<Type>, type: .Type) -> Type {
    $type match {
        case Generic -> { .index ~ $generics flip Array:get<Type> ~ }
        case Ptr -> {
            ~ $ctx flip $generics flip resolve-generic $ctx.arena flip Arena:push<Type> make Type.Ptr
        }
        case Custom -> {
            @type
            $type.type-definition
            $ctx $generics &type.generic-arguments resolve-generic-many
            make CustomTypeType
            make Type.Custom
        }
        case Fun -> {
            @type
            $type.token
            $ctx $generics &type.parameters resolve-generic-many
            $ctx $generics &type.returns resolve-generic-many
            make FunType
            make Type.Fun
        }
        case Bool -> { make Type.Bool }
        case I32 -> { make Type.I32 }
        case I64 -> { make Type.I64 }
    }
}
fn resolve-generic-many(ctx: .WordCtx, generics: .Array<Type>, types: .Array<Type>) -> Array<Type> {
    Array:new<Type> @resolved
    0 @i
    loop {
        $i $types.len = if { break }
        $ctx.arena &resolved $ctx $generics $types $i Array:get<Type> resolve-generic Array:push<Type>
        $i 1 + #i
    }
    $resolved
}

fn resolve-imports(ctx: .Ctx) -> Result<Map<ByteSlice, Array<Import>>, ResolveError> {
    $ctx.arena Arena:temp @temp-arena @save
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Array<Import>> @resolved-imports
    &ctx.parsed-modules.keys $ctx.module-id.index Array:get<ByteSlice> @module-path
    0 @i
    loop {
        $ctx.top-items.len $i = if { $resolved-imports make Result<Map<ByteSlice, Array<Import>>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Import -> {
                @imp
                $module-path ~ ByteSlice:unpack "-" Bytes:eq if {
                    "" ByteArray:init
                } else {
                    $module-path ~ ByteSlice:unpack FS:path-dir ByteArray:init
                } @path
                $temp-arena &path &imp.path Token-lexeme 2 - flip 1 + flip ByteArray:push
                $temp-arena $path ByteSlice:unpack FS:normalize make ByteSlice @path
                $ctx.parsed-modules &path Map:get-index<ByteSlice, Array<TopItem>> assert-some<i32> make ModuleId @imported-module-id
                $ctx.arena $path ByteSlice:copy @path

                $ctx $imported-module-id &imp.items resolve-import-items match {
                    case Error -> { make Result<Map<ByteSlice, Array<Import>>, ResolveError>.Error break }
                    case Success -> {}
                } @items

                &imp.qualifier Token-lexeme make ByteSlice @qualifier
                $imp.start $imported-module-id $path $imp.qualifier $items make Import @imp
                &resolved-imports &qualifier Map:get<ByteSlice, Array<Import>> match {
                    case None -> {
                        $ctx.arena &resolved-imports $qualifier $ctx.arena $imp Array:singleton<Import> Map:insert<ByteSlice, Array<Import>> drop
                    }
                    case Some -> { $ctx.arena flip $imp Array:push<Import> }
                }
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
    $temp-arena $save Arena:restore
}

fn resolve-import-items(ctx: .Ctx, imported-module-id: ModuleId, items: .Array<Token>) -> Result<Array<ImportItem>, ResolveError> {
    Array:new<ImportItem> @resolved-items
    $ctx.parsed-modules $imported-module-id.index Map:get-value<ByteSlice, Array<TopItem>> @imported-module
    0 @i
    loop {
        $items.len $i = if { $resolved-items make Result<Array<ImportItem>, ResolveError>.Success break }
        $items $i Array:get<Token> @item
        $imported-module $imported-module-id $item lookup-item-in-module match {
            case None -> {
                $ctx $item "not found" abort<Array<ImportItem>> break
            }
            case Some -> {}
        } @item
        $ctx.arena &resolved-items $item Array:push<ImportItem>
        $i 1 + #i
    }
}

fn lookup-item-in-module(module: .Array<TopItem>, module-id: ModuleId, name: .Token) -> Maybe<ImportItem> {
    0 @type-index
    0 @function-index
    0 @other
    loop {
        $type-index $function-index + $other + $module.len = if { make Maybe<ImportItem>.None break }
        $module $type-index $function-index + $other + Array:get<TopItem> match {
            case Struct -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $type-index make CustomTypeHandle make ImportItemItem.CustomType make ImportItem make Maybe<ImportItem>.Some break
                }
                $type-index 1 + #type-index
            }
            case Variant -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $type-index make CustomTypeHandle make ImportItemItem.CustomType make ImportItem make Maybe<ImportItem>.Some break
                }
                $type-index 1 + #type-index
            }
            case Function -> {
                .name Token-lexeme $name Token-lexeme Bytes:eq if {
                    $name ~ $module-id $function-index make FunctionHandle make ImportItemItem.Function make ImportItem make Maybe<ImportItem>.Some break
                }
                $function-index 1 + #function-index
            }
            case _ -> {
                drop $other 1 + #other
            }
        }
    }
}

fn resolve-custom-types(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>) -> Result<Map<ByteSlice, CustomType>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, CustomType> @resolved-custom-types
    0 @i
    loop {
        $ctx.top-items.len $i = if { $resolved-custom-types make Result<Map<ByteSlice, CustomType>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Struct -> {
                @struc
                $ctx $imports $struc resolve-struct match {
                    case Error -> { make Result<Map<ByteSlice, CustomType>, ResolveError>.Error break }
                    case Success -> {
                        $ctx.arena flip
                        &resolved-custom-types flip
                        &struc.name Token-lexeme make ByteSlice flip
                        make CustomType.Struct Map:insert<ByteSlice, CustomType> drop }
                }
            }
            case Variant -> {
                @varant
                $ctx $imports $varant resolve-variant match {
                    case Error -> { make Result<Map<ByteSlice, CustomType>, ResolveError>.Error break }
                    case Success -> {
                        $ctx.arena flip
                        &resolved-custom-types flip
                        &varant.name Token-lexeme make ByteSlice flip
                        make CustomType.Variant Map:insert<ByteSlice, CustomType> drop
                    }
                }
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

fn resolve-externs(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>) -> Result<Map<ByteSlice, Extern>, ResolveError> {
    \ByteSlice:eq-by-ref Map:new<ByteSlice, Extern> @externs
    0 @i
    loop () -> Result<Map<ByteSlice, Extern>, ResolveError> {
        $ctx.top-items.len $i = if { $externs make Result<Map<ByteSlice, Extern>, ResolveError>.Success break }
        $ctx.top-items $i Array:get<TopItem> match {
            case Extern -> {
                @extrn
                $ctx.arena
                &externs
                &extrn.name Token-lexeme make ByteSlice
                $extrn.name
                &extrn.extrn-module Token-lexeme 2 - flip 1 + flip make ByteSlice
                &extrn.extrn-name Token-lexeme 2 - flip 1 + flip make ByteSlice
                $ctx $imports &extrn.signature resolve-signature match {
                    case Error -> { make Result<Map<ByteSlice, Extern>, ResolveError>.Error break }
                    case Success -> {}
                }
                make Extern
                Map:insert<ByteSlice, Extern> drop
            }
            case _ -> { drop }
        }
        $i 1 + #i
    }
}

fn resolve-signature(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, signature: .P:Signature) -> Result<Signature, ResolveError> { block () -> Result<Signature, ResolveError> {
    $signature.generic-parameters
    $ctx $imports &signature.parameters resolve-named-types match {
        case Error -> { make Result<Signature, ResolveError>.Error break }
        case Success -> {}
    }
    $ctx $imports &signature.returns resolve-types match {
        case Error -> { make Result<Signature, ResolveError>.Error break }
        case Success -> {}
    }
    make Signature
    make Result<Signature, ResolveError>.Success
} }

fn resolve-struct(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, struc: .P:Struct) -> Result<Struct, ResolveError> { block () -> Result<Struct, ResolveError> {
    $struc.name $struc.generic-parameters
    Array:new<NamedType> @fields
    0 @i
    loop () -> Result<Array<NamedType>, ResolveError> {
        $i $struc.fields.len = if { $fields make Result<Array<NamedType>, ResolveError>.Success break }
        &struc.fields $i Array:get<P:NamedType> @field
        $ctx.arena &fields
        $ctx $imports $field resolve-named-type match {
            case Error -> { make Result<Array<NamedType>, ResolveError>.Error break }
            case Success -> {}
        }
        Array:push<NamedType>
        $i 1 + #i
    } match {
        case Error -> { make Result<Struct, ResolveError>.Error break }
        case Success -> {}
    }
    make Struct make Result<Struct, ResolveError>.Success
} }

fn resolve-variant(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, varant: .P:Variant) -> Result<Variant, ResolveError> { block () -> Result<Variant, ResolveError> {
    $varant.name $varant.generic-parameters
    Array:new<VariantCase> @cases
    0 @i
    loop () -> Result<Array<VariantCase>, ResolveError> {
        $i $varant.cases.len = if { $cases make Result<Array<VariantCase>, ResolveError>.Success break }
        &varant.cases $i Array:get<P:VariantCase> @cays
        $ctx.arena &cases
        $cays.name
        &cays.type match {
            case None -> { make Maybe<Type>.None }
            case Some -> { $ctx flip $imports flip resolve-type match {
                case Error -> { make Result<Array<NamedType>, ResolveError>.Error break }
                case Success -> { make Maybe<Type>.Some }
            } }
        }
        make VariantCase
        Array:push<VariantCase>
        $i 1 + #i
    } match {
        case Error -> { make Result<Variant, ResolveError>.Error break }
        case Success -> {}
    }
    make Variant make Result<Variant, ResolveError>.Success
} }

fn resolve-named-type(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, type: .P:NamedType) -> Result<NamedType, ResolveError> {
    $type.name
    $ctx $imports &type.type resolve-type match {
        case Error -> { flip drop make Result<NamedType, ResolveError>.Error }
        case Success -> { make NamedType make Result<NamedType, ResolveError>.Success }
    }
}
fn resolve-named-types(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, named-types: .Array<P:NamedType>) -> Result<Array<NamedType>, ResolveError> { block {
    Array:new<NamedType> @resolved-named-types
    0 @i
    loop {
        $i $named-types.len = if { $resolved-named-types make Result<Array<NamedType>, ResolveError>.Success break }
        $ctx $imports $named-types $i Array:get<P:NamedType> resolve-named-type match {
            case Error -> { make Result<Array<NamedType>, ResolveError>.Error break }
            case Success -> { $ctx.arena flip &resolved-named-types flip Array:push<NamedType> }
        }
        $i 1 + #i
    }
} }

fn resolve-type(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, type: .P:Type) -> Result<Type, ResolveError> { block () -> Result<Type, ResolveError> {
    $type match {
        case Bool -> { drop make Type.Bool }
        case I32 -> { drop make Type.I32 }
        case I64 -> { drop make Type.I64 }
        case Generic -> { ~ make Type.Generic }
        case Ptr -> {
            .type ~ $ctx flip $imports flip resolve-type match {
                case Error -> { make Result<Type, ResolveError>.Error break }
                case Success -> { $ctx.arena flip Arena:push<Type> make Type.Ptr }
            }
        }
        case Custom -> {
            match {
                case Local -> {
                    @type
                    $ctx $imports &type.generic-arguments resolve-types match {
                        case Error -> { make Result<Type, ResolveError>.Error break }
                        case Success -> {}
                    } @generic-arguments
                    0 @i
                    loop {
                        $ctx.top-items.len $i = if {
                            0 @i
                            loop {
                                $imports.values.len $i = if { $ctx &type.name "not found" abort<Type> break }
                                $imports $i Map:get-value<ByteSlice, Array<Import>> @imports
                                0 @j
                                loop {
                                    $j $imports.len = if { make Maybe<Type>.None break }
                                    $imports $j Array:get<Import> @imp
                                    0 @k
                                    loop {
                                        $k $imp.items.len = if { make Maybe<Type>.None break }
                                        &imp.items $k Array:get<ImportItem> @item
                                        &item.name Token-lexeme &type.name Token-lexeme Bytes:eq if {
                                            &item.handle match {
                                                case CustomType -> {
                                                    ~
                                                    $generic-arguments
                                                    make CustomTypeType make Type.Custom make Maybe<Type>.Some break
                                                }
                                                case _ -> { drop }
                                            }
                                        }
                                        $k 1 + #k
                                    } match {
                                        case None -> {}
                                        case _ -> { break }
                                    }
                                    $j 1 + #j
                                } match {
                                    case None -> {}
                                    case Some -> { make Result<Type, ResolveError>.Success break }
                                }
                                $i 1 + #i
                            } break
                        }
                        $ctx.top-items $i Array:get<TopItem> 
                        match {
                            case Struct -> {
                                .name Token-lexeme &type.name Token-lexeme Bytes:eq if {
                                    $ctx.module-id $i make CustomTypeHandle
                                    $generic-arguments
                                    make CustomTypeType
                                    make Type.Custom
                                    make Result<Type, ResolveError>.Success break
                                }
                            }
                            case Variant -> {
                                .name Token-lexeme &type.name Token-lexeme Bytes:eq if {
                                    $ctx.module-id $i make CustomTypeHandle
                                    $generic-arguments
                                    make CustomTypeType
                                    make Type.Custom
                                    make Result<Type, ResolveError>.Success break
                                }
                            }
                            case _ -> { drop }
                        }
                        $i 1 + #i
                    }
                }
                case Foreign -> {
                    @type
                    $ctx $imports &type.generic-arguments resolve-types match {
                        case Error -> { make Result<Type, ResolveError>.Error break }
                        case Success -> {}
                    } @generic-arguments
                    &type.module Token-lexeme make ByteSlice @module-lexeme
                    $imports &module-lexeme Map:get<ByteSlice, Array<Import>> match {
                        case None -> {
                            $ctx &type.module "not found" abort<Type> break
                        }
                        case Some -> {
                            @imports
                            0 @i
                            loop {
                                $i $imports.len = if { $ctx &type.name "not found" abort<Type> break }
                                $imports $i Array:get<Import> @imp
                                $ctx.resolved-modules $imp.module.index Array:get<Module> @module
                                0 @j
                                loop {
                                    $j $module.custom-types.keys.len = if { make Maybe<Type>.None break }
                                    &module.custom-types $j Map:get-value<ByteSlice, CustomType> match {
                                        case Struct -> {
                                            .name Token-lexeme &type.name Token-lexeme Bytes:eq if {
                                                $ctx.module-id $i make CustomTypeHandle
                                                $generic-arguments
                                                make CustomTypeType
                                                make Type.Custom
                                                make Maybe<Type>.Some break
                                            }
                                        }
                                        case Variant -> {
                                            .name Token-lexeme &type.name Token-lexeme Bytes:eq if {
                                                $ctx.module-id $i make CustomTypeHandle
                                                $generic-arguments
                                                make CustomTypeType
                                                make Type.Custom
                                                make Maybe<Type>.Some break
                                            }
                                        }
                                        case _ -> { drop }
                                    }
                                    $j 1 + #j
                                } match {
                                    case Some -> { make Result<Type, ResolveError>.Success break }
                                    case None -> { $ctx &type.name "not found" abort<Type> break }
                                }
                                $i 1 + #i
                            }
                        }
                    }
                }
            } break
        }
        case Fun -> {
            @fun
            $fun.token
            $ctx $imports &fun.parameters resolve-types match {
                case Error -> { make Result<Type, ResolveError>.Error break }
                case Success -> {}
            }
            $ctx $imports &fun.returns resolve-types match {
                case Error -> { make Result<Type, ResolveError>.Error break }
                case Success -> {}
            }
            make FunType
            make Type.Fun
        }
    } make Result<Type, ResolveError>.Success
} }

fn resolve-types(ctx: .Ctx, imports: .Map<ByteSlice, Array<Import>>, types: .Array<P:Type>) -> Result<Array<Type>, ResolveError> { block {
    Array:new<Type> @resolved-types
    0 @i
    loop {
        $i $types.len = if { $resolved-types make Result<Array<Type>, ResolveError>.Success break }
        $ctx $imports $types $i Array:get<P:Type> resolve-type match {
            case Error -> { make Result<Array<Type>, ResolveError>.Error break }
            case Success -> { $ctx.arena flip &resolved-types flip Array:push<Type> }
        }
        $i 1 + #i
    }
} }

