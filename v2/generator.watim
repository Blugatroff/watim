import "../std/arena.watim" as Arena (Arena)
import "../std/byte-slice.watim" as ByteSlice (ByteSlice)
import "../std/byte-array.watim" as ByteArray (ByteArray)
import "../std/array.watim" as Array (Array)
import "../std/fmt.watim" as Fmt (Formatter)
import "../std/util.watim" as Util (i32-format)

import "./lexer.watim" as Lexer (Token, Token-lexeme, Token-format)
import "./monomizer.watim" as Monomized (
    Monomized, Module,
    Function, FunctionHandle,
    TypeId, Global
)

fn generate(fmt: .Formatter, program: .Monomized) {
    $fmt "(module\n" Fmt:write
    $fmt Fmt:indent

    $fmt Fmt:write-indent $fmt "(memory 1 65536)\n" Fmt:write
    $fmt Fmt:write-indent $fmt "(export \"memory\" (memory 0))\n" Fmt:write

    0 !.Arena Arena:temp @arena @arena-save

    $arena $program.modules.values.len Arena:alloc-many<i32> $program.modules.values.len
    Array:init-no-copy<i32> @static-data-offsets

    ByteArray:new @all-static-data
    0 @i
    loop {
        $program.modules.values.len $i = if { break }
        &program.modules.values $i Array:get<Monomized:Module> @module
        &static-data-offsets $i $all-static-data.len Array:set<i32> drop
        $arena &all-static-data $module.static-data ByteSlice:unpack ByteArray:push
        $i 1 + #i
    }

    $fmt $program generate-function-table
    $fmt $program $all-static-data.len generate-globals @stack-start

    $fmt Fmt:dedent
    $fmt ")" Fmt:write
    $arena $arena-save Arena:restore
}

fn lookup-function(program: .Monomized, handle: .FunctionHandle) -> .Monomized:Function {
    &program.modules.values $handle.module.index Array:get<Module> @module
    &module.functions $handle.index Array:get<Array<.Function>> @instances
    $instances $handle.instance Array:get<.Function> ~
}

fn type-size(program: .Monomized, type: TypeId) -> i32 {
    &program.sizes $type.index Array:get<i32> ~
}

fn can-live-in-reg(program: .Monomized, type: TypeId) -> bool {
    $program $type type-size 8 le
}

fn generate-globals(fmt: .Formatter, program: .Monomized, static-data-len: i32) -> i32 {
    $static-data-len @offset
    0 @i
    loop {
        $i $program.modules.values.len = if { $offset break }
        &program.modules.values $i Array:get<Module> @module
        $i 1 + #i

        0 @j
        loop {
            $j $module.globals.len = if { break }
            &module.globals $j Array:get<Global> @globl
            $j 1 + #j
            $program $globl.type type-size @size
            $globl.reffed $program $globl.type can-live-in-reg not or @lives-in-memory
            $lives-in-memory if { $offset } else { 0 } @initial-value

            $fmt Fmt:write-indent
            $fmt "(global " Fmt:write
            $fmt &globl.name Token-lexeme Fmt:write
            $fmt ":" Fmt:write
            $fmt $i i32-format
            $fmt " (mut i32) (i32.const " Fmt:write
            $fmt $initial-value i32-format
            $fmt "))\n" Fmt:write

            $lives-in-memory if {
                $offset $size + #offset
            }
        }
    }
}

fn generate-function-table(fmt: .Formatter, program: .Monomized) { block {
    $fmt Fmt:write-indent
    $program.function-table.len 0 = if {
        $fmt "(table funcref (elem))\n" Fmt:write
        break
    }
    $fmt "(table funcref (elem $intrinsic:flip\n" Fmt:write

    $fmt Fmt:indent
    $fmt Fmt:write-indent

    0 @i
    loop {
        $program.function-table.len $i = if { break }
        &program.function-table $i Array:get<FunctionHandle> @handle
        $i 1 + #i

        $program $handle lookup-function @function
        $fmt $handle.module.index i32-format
        $fmt ":" Fmt:write
        $fmt &function.name Token-lexeme Fmt:write
        $handle.instance 0 /= if {
            $fmt ":" Fmt:write
            $fmt $handle.instance i32-format
        }
        $i $program.function-table.len /= if {
            $fmt " " Fmt:write
        }
    }
    $fmt Fmt:dedent
    $fmt "))\n" Fmt:write
} }
