import "./util.watim" as U

fn read_stdin(buf_addr: i32, buf_size: i32) -> i32 {
    1 $buf_addr $buf_size U.read
}

// buf {
//    ptr: ptr,
//    size: i32,
// }
fn buf-ptr(buf: i32) -> i32 {
    $buf 0 + load32
}
fn buf-size(buf: i32) -> i32 {
    $buf 4 + load32
}

// allocator {
//    start: ptr,
//    end: ptr,
// }
fn alloc-start(allocator: i32) -> i32 {
    $allocator 0 + load32 
}
fn alloc-end(allocator: i32) -> i32 {
    $allocator 4 + load32
}
fn set-alloc-start(allocator: i32, start: i32) {
    $allocator 0 + $start store32
}
fn set-alloc-end(allocator: i32, end: i32) {
    $allocator 4 + $end store32
}

// block {
//    size: i32,
//    next: i32,
//    prev: i32,
// }
fn block-size(block: i32) -> i32 {
    $block 0 + load32
}
fn block-next(block: i32) -> i32 {
    $block 4 + load32
}
fn block-prev(block: i32) -> i32 {
    $block 8 + load32
}
fn set-block-size(block: i32, size: i32) {
    $block 0 + $size store32
}
fn set-block-next(block: i32, next: i32) {
    $block 0 + $next store32
}
fn set-block-prev(block: i32, prev: i32) {
    $block 0 + $prev store32
}

fn alloc(allocator: i32, size: i32) -> i32 {
    local ptr: i32
    local block: i32
    local next_block: i32
    $size 0 = if {
        1 "cannot allocate memory with size 0" U.write drop
        1 U.exit
    }
    $allocator alloc-start #block

    1 "block: " U.write drop $block U.print 1 10 U.write_byte
    1 "block-size: " U.write drop $block block-size U.print 1 10 U.write_byte
    10 U.exit
    //1 "block-size: " U.write drop $block block-size U.print 1 10 U.write_byte
    //1 "block-size: " U.write drop $block block-size U.print 1 10 U.write_byte
    //1 "block-size: " U.write drop $block block-size U.print 1 10 U.write_byte

    $block block-size 0 = if { // first block created
        1 "creating first block" U.write drop
        1 10 U.write_byte
        $size 12 + $allocator alloc-end $allocator alloc-start - > if {
            1 "first block too big" U.write drop
            1 U.exit
        }
        $block $size 12 + set-block-size         

        1 "block-size part 2: " U.write drop
        $block block-size U.print
        1 10 U.write_byte

        $block 0 set-block-next
        $block 0 set-block-prev

        // the ptr to the block-data
        $block 12 +
    } else {
        1 "else" U.write drop
        loop {
            $block block-next 0 != if { // there is a block after this one
                $block $block block-size + #next_block
                1 "TODO" U.write drop
                1 U.exit
            } else { // there is not block after this one
                $block $block block-size + #next_block
                $next_block $size 12 + set-block-size
                $next_block 0 set-block-next
                $next_block $block set-block-prev

                // the ptr to the block-data
                $next_block 12 +
                break
            }
        }
    }
}
fn dealloc(allocator: i32, ptr: i32) {
    // TODO
}

fn main "_start" () {
    memory allocator 8;
    memory allocated 300;
    local ptr: i32
    local size: i32

    $allocated U.print 1 10 U.write_byte
    $allocator $allocated set-alloc-start
    $allocator $allocated 300 + set-alloc-end

    $allocator 10 alloc drop
    $allocator 10 alloc drop

    // returns allocated string
    //0 $allocator read_all #ptr #size

    // allocated 10 bytes write character to it and then immediately deallocate
    //$allocator 10 alloc U.dup 52 store8 U.dup U.print $allocated dealloc
    //1 10 U.write_byte
    
    // print stdin-string
    //1 $ptr $size U.write drop

    // dealloc stdin-input string
    //$allocated $ptr dealloc

    0 U.exit
}

// -> ptr, size
fn read_all(file: i32, allocator: i32) -> i32, i32 {
    local buf_size: i32
    local buf_ptr: i32
    local read_total: i32
    local read: i32
    local old_buf_size: i32
    local old_buf_ptr: i32
    1 #buf_size
    $allocator $buf_size alloc #buf_ptr
    loop {
        $file $buf_ptr $read_total + $buf_size $read_total - U.read #read
        $read_total $read + #read_total

        $buf_size $read_total - 0 = if {
            $buf_size #old_buf_size
            $buf_ptr #old_buf_ptr

            $buf_size 2 * #buf_size
            $allocator $buf_size alloc #buf_ptr
            1 "alloc ptr: " U.write drop
            $buf_ptr U.print
            1 10 U.write_byte
            
            $old_buf_ptr $buf_ptr $old_buf_size U.copy
            $allocator $buf_ptr dealloc
        }
        $read 0 = if {
            $read_total $buf_ptr break
        }
    }
}

