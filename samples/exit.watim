extern "wasi_unstable" "fd_read" fn raw_read(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32
extern "wasi_unstable" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32
extern "wasi_unstable" "proc_exit" fn exit(code: i32)

struct Iov {
    ptr: .i32
    len: i32
}
struct I32 { inner: i32 }

fn write(file: i32, ptr: .i32, len: i32) -> i32 {
    local iov: Iov
    local written-ptr: I32
    local written: i32
    ?ptr @iov.ptr
    ?len @iov.len
    ?file &iov 1 &written-ptr.inner raw_write drop
    ?written-ptr.inner @written
    ?written ?len = if {
        ?len
    } else {
        ?file ?ptr ?written + ?len ?written - write ?written +
    }
}

fn read(file: i32, buf-addr: .i32, buf-size: i32) -> i32 {
    local iov: Iov
    local nread: I32
    ?buf-addr @iov.ptr
    ?buf-size @iov.len
    ?file &iov 1 &nread.inner raw_read drop
    ?nread.inner
}

fn print(n: i32) {
    memory buf: i32 16;
    memory buf-reversed: i32 16;
    local l: i32
    local i: i32
    0 @l
    ?n 0 = if {
        1 @l // length = 1
        ?buf 48 store8 // put '0' in buf
    } else {
        loop {
            ?n 0 = if { break }
            ?buf ?l +
            ?n 10 % // rightmost digit
            48 + // + ascii 'a'
            store8
            ?n 10 / @n // shift right in decimal
            ?l 1 + @l
        }
    }
    0 @i
    loop {
        ?buf-reversed ?i +
        ?buf ?l 1 - ?i - + load8
        store8
        ?i 1 + @i
        ?i ?l = if { break }
    }
    1 ?buf-reversed ?l write drop
}

fn write_byte(file: i32, b: i32) {
    memory buf: i32 1;
    ?buf ?b store8
    ?file ?buf 1 write drop
}

fn parse(pt: .i32, len: i32) -> i32 {
    local n: i32
    local d: i32
    local original-ptr: .i32
    local original-len: i32
    ?pt @original-ptr
    ?len @original-len
    loop {
        ?pt load8 @d
        ?d 48 >= ?d 58 <= and if { // 48 is ascii '0'
            ?n ?d 48 - + @n
        } else {
            1 "Failed to parse: '" write drop
            1 ?original-ptr ?original-len write drop
            1 "'" write drop
            //1 "\n" write drop
            1 10 write_byte
            1 exit
        }
        ?pt 1 + @pt // advance pointer
        ?len 1 - @len // reduce length
        ?len 0 = if { ?n break }
        ?n 10 * @n
    }
}

fn dup(a: i32) -> i32, i32 {
    ?a ?a
}

fn main "_start" () {
    memory buf: i32 32;
    local nread: i32
    0 ?buf 32 read @nread
    ?buf ?nread 1 - parse
    dup print exit
}

