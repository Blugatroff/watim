[== Stdin Compiler ==]
struct Foo {
	x: i32
	y: i32
}
fn baz "baz" (foo: Foo, quox: .i32) {
	0 @i
	$i drop $i drop
	$quox ~ drop
	$foo drop
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:baz (export "baz") (param $foo i32) (param $quox i32)
		(local $i i32)
		(local $locl-copy-spac:e i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $locl-copy-spac:e
		i32.const 0
		local.set $i
		local.get $i
		drop
		local.get $i
		drop
		local.get $quox
		i32.load
		drop
		local.get $locl-copy-spac:e i32.const 0 i32.add call $intrinsic:dupi32 local.get $foo i32.const 8 memory.copy
		drop
		local.get $stac:k global.set $stac:k
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)

