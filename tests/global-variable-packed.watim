[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "proc_exit" fn proc_exit(code: i32)

struct Foo {
	a: i32
	b: i32
}

global FOO: Foo

fn main "_start" () {
	3 #FOO.a
	5 #FOO.b
	$FOO use
}

fn use(foo: Foo) {
	$foo.a $foo.b + proc_exit
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:proc_exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $FOO:0 (mut i64) (i64.const 0))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:main (export "_start")
		i32.const 3
		global.get $FOO:0 i64.const 0xFFFFFFFF00000000 i64.and call $intrinsic:flip-i32-i64 i64.extend_i32_u i64.or global.set $FOO:0
		i32.const 5
		global.get $FOO:0 i64.const 0xFFFFFFFF i64.and call $intrinsic:flip-i32-i64 i64.extend_i32_u i64.const 32 i64.shl i64.or global.set $FOO:0
		global.get $FOO:0
		call $0:use
	)
	(func $0:use (param $foo i64)
		local.get $foo i32.wrap_i64
		local.get $foo i64.const 32 i64.shr_u i32.wrap_i64
		i32.add
		call $0:proc_exit
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:flip-i32-i64 (param $a i32) (param $b i64) (result i64 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
8
