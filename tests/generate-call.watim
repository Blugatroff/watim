[== Stdin Compiler ==]
struct Foo {
    x: i32
    y: i32
    z: i32
}
struct Bar {
    x: i32
    y: i32
    z: i32
    w: i32
}
fn mk-foo-bar() -> Foo, Bar {
    42 43 44 make Foo
    1 2 3 4 make Bar
}
fn main "_start" () {
    mk-foo-bar drop drop
}
[== Args Compiler ==]
compile
-
--quiet
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:mk-foo-bar (result i32) (result i32)
		(local $locl-copy-spac:e i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 28 i32.add global.set $stac:k local.set $locl-copy-spac:e
		i32.const 42
		i32.const 43
		i32.const 44
		;; make Foo
			local.get $locl-copy-spac:e i32.const 8 i32.add call $intrinsic:flip i32.store
			local.get $locl-copy-spac:e i32.const 4 i32.add call $intrinsic:flip i32.store
			local.get $locl-copy-spac:e i32.const 0 i32.add call $intrinsic:flip i32.store
		local.get $locl-copy-spac:e i32.const 0 i32.add ;; make Foo end
		i32.const 1
		i32.const 2
		i32.const 3
		i32.const 4
		;; make Bar
			local.get $locl-copy-spac:e i32.const 24 i32.add call $intrinsic:flip i32.store
			local.get $locl-copy-spac:e i32.const 20 i32.add call $intrinsic:flip i32.store
			local.get $locl-copy-spac:e i32.const 16 i32.add call $intrinsic:flip i32.store
			local.get $locl-copy-spac:e i32.const 12 i32.add call $intrinsic:flip i32.store
		local.get $locl-copy-spac:e i32.const 12 i32.add ;; make Bar end
		local.get $stac:k global.set $stac:k
	)
	(func $0:main (export "_start")
		(local $s0:a i32)
		(local $s1:a i32)
		(local $locl-copy-spac:e i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 28 i32.add global.set $stac:k local.set $locl-copy-spac:e
		call $0:mk-foo-bar
		local.set $s0:a
		local.set $s1:a
		local.get $locl-copy-spac:e i32.const 0 i32.add call $intrinsic:dupi32 local.get $s1:a i32.const 12 memory.copy
		local.get $locl-copy-spac:e i32.const 12 i32.add call $intrinsic:dupi32 local.get $s0:a i32.const 16 memory.copy
		drop
		drop
		local.get $stac:k global.set $stac:k
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
