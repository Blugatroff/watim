[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "proc_exit" fn proc_exit(code: i32)

struct Rgba { r: i8 g: i8 b: i8 a: i8 }

fn main "_start" () {
    2 !i8 8 !i8 32 !i8 128 !i8 make Rgba @foo
    $foo.b !i32 proc_exit
}

[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:proc_exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:main (export "_start")
		(local $foo i32)
		i32.const 2
		i32.const 0xFF i32.and ;; cast to i8
		i32.const 8
		i32.const 0xFF i32.and ;; cast to i8
		i32.const 32
		i32.const 0xFF i32.and ;; cast to i8
		i32.const 128
		i32.const 0xFF i32.and ;; cast to i8
		i32.const 24 i32.shl call $intrinsic:flip i32.const 16 i32.shl i32.or call $intrinsic:flip i32.const 8 i32.shl i32.or i32.or ;; make Rgba
		local.set $foo
		local.get $foo i32.const 16 i32.shr_u i32.const 0xFF i32.and
		;; cast to i32
		call $0:proc_exit
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
32
