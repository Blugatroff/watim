[== Stdin Compiler ==]
struct Array<T> {}

fn get<T>(arr: Array<T>) {}

fn twice<I, O>(f: (I -> O), input: I) -> O, O {
    $input $f ->
    $input $f ->
}

fn is-zero(n: i32) -> bool { $n 0 = }

fn foo() {
    make Array<i32> {}
    get<_>

    \is-zero 2 twice<_, _> drop drop
}
[== Args Compiler ==]
check
-
--quiet
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(Map
  "-"=(Module
    imports=(Map),
    type-definitions=(Map
      "Array"=(Struct
        name=(IDENT Array 1 8),
        generic-parameters=[(IDENT T 1 14)],
        fields=[])),
    globals=(Map),
    functions=(Map
      "get"=(Function
        name=(IDENT get 3 4),
        export=None,
        signature=(Signature
          generic-parameters=[(IDENT T 3 8)],
          parameters=[(NamedType (IDENT arr 3 11) (CustomType 0 0 [(GenericType (IDENT T 3 22) 0)]))],
          returns=[]),
        locals=(Map
          (LocalId "arr" 0 0)=(Local (IDENT arr 3 11) (CustomType 0 0 [(GenericType (IDENT T 3 22) 0)]) False True)),
        body=(Scope 0 [])),
      "twice"=(Function
        name=(IDENT twice 5 4),
        export=None,
        signature=(Signature
          generic-parameters=[(IDENT I 5 10), (IDENT O 5 13)],
          parameters=[(NamedType (IDENT f 5 16) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)])), (NamedType (IDENT input 5 29) (GenericType (IDENT I 5 36) 0))],
          returns=[(GenericType (IDENT O 5 42) 1), (GenericType (IDENT O 5 45) 1)]),
        locals=(Map
          (LocalId "f" 0 0)=(Local (IDENT f 5 16) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]) False True),
          (LocalId "input" 0 0)=(Local (IDENT input 5 29) (GenericType (IDENT I 5 36) 0) False True)),
        body=(Scope 0 [
          (GetLocal (IDENT input 6 6) (LocalId "input" 0 0) (GenericType (IDENT I 5 36) 0) (GenericType (IDENT I 5 36) 0) []),
          (GetLocal (IDENT f 6 13) (LocalId "f" 0 0) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]) []),
          (IndirectCall (ARROW -> 6 15) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)])),
          (GetLocal (IDENT input 7 6) (LocalId "input" 0 0) (GenericType (IDENT I 5 36) 0) (GenericType (IDENT I 5 36) 0) []),
          (GetLocal (IDENT f 7 13) (LocalId "f" 0 0) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]) []),
          (IndirectCall (ARROW -> 7 15) (FunType (LEFT_PAREN ( 5 19) [(GenericType (IDENT I 5 20) 0)] [(GenericType (IDENT O 5 25) 1)]))])),
      "is-zero"=(Function
        name=(IDENT is-zero 10 4),
        export=None,
        signature=(Signature
          generic-parameters=[],
          parameters=[(NamedType (IDENT n 10 12) I32)],
          returns=[Bool]),
        locals=(Map
          (LocalId "n" 0 0)=(Local (IDENT n 10 12) I32 False True)),
        body=(Scope 0 [
          (GetLocal (IDENT n 10 31) (LocalId "n" 0 0) I32 I32 []),
          (Number (NUMBER 0 10 33)),
          (Intrinsic (IDENT = 10 35) (Eq I32))])),
      "foo"=(Function
        name=(IDENT foo 12 4),
        export=None,
        signature=(Signature
          generic-parameters=[],
          parameters=[],
          returns=[]),
        locals=(Map),
        body=(Scope 0 [
          (StructWordNamed
            token=(MAKE make 13 5),
            type=(CustomType 0 0 [I32]),
            body=(Scope 1 [])),
          (Call (IDENT get 14 5) (FunctionHandle 0 0) [I32]),
          (FunRef (Call (IDENT is-zero 16 6) (FunctionHandle 0 2) [])),
          (Number (NUMBER 2 16 14)),
          (Call (IDENT twice 16 16) (FunctionHandle 0 1) [I32, Bool]),
          (Drop (IDENT drop 16 28)),
          (Drop (IDENT drop 16 33))])))))
