[== Stdin Compiler ==]
fn main "_start" () -> i32 {
	block {
		4 5 6
		0 1 = if {
			drop drop loop {}
		} else {
			drop drop drop 4
		}
		break
	}
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:main (export "_start") (result i32)
		(block $block (result i32)
			i32.const 4
			i32.const 5
			i32.const 6
			i32.const 0
			i32.const 1
			i32.eq
			(if (param i32) (param i32) (param i32) (result i32)
				(then
					drop
					drop
					(block $block 
						(loop $loop 
							br $loop
						)
					)
					unreachable
				)
				(else
					drop
					drop
					drop
					i32.const 4
				)
			)
			br $block
		)
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
