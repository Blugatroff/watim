// import standard WASI functions, see the docs: https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md
extern "wasi_unstable" "fd_read" fn raw_read(file: i32, iovs: .Iov, iovs_count: i32, read: .i32) -> i32
extern "wasi_unstable" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32
extern "wasi_unstable" "proc_exit" fn exit(code: i32)

fn main "_start" () {
    // allocate 32 bytes on the stack
    memory buf: i32 32
    local nread: i32

    // read up to 32 bytes from file descriptor 0 (STDIN) into `buf`
    0 $buf 32 read-all drop #nread

    // parse the intput to an i32
    $buf $nread parse 
    // duplicate the parsed number on the stack
    dup
    // print the parsed number to stdout
    print
    // and use it as the exit code
    exit
}

fn print(n: i32) {
    // allocate 16 bytes for the string, 
    // a 32 bit number will always have less than 16 digits in decimal.
    memory buf: i32 16
    memory buf-reversed: i32 16
    local l: i32
    local i: i32
    0 #l
    $n 0 = if {
        1 #l // length = 1
        $buf 48 store8 // put '0' in buf
    } else {
        loop {
            $n 0 = if { break }
            $buf $l +
            $n 10 % // rightmost digit
            48 + // + ascii 'a'
            store8
            $n 10 / #n // shift right in decimal
            $l 1 + #l
        }
    }
    0 #i
    loop {
        $buf-reversed $i +
        $buf $l 1 - $i - + load8
        store8
        $i 1 + #i
        $i $l = if { break }
    }
    1 $buf-reversed $l write drop
}

fn parse(pt: .i32, len: i32) -> i32 {
    local n: i32
    local d: i32
    local original-ptr: .i32
    local original-len: i32
    $pt #original-ptr
    $len #original-len
    loop {
        $pt load8 #d
        $d 48 ge $d 58 le and if { // 48 is ascii '0'
            $n $d 48 - + #n
        } else {
            2 "Failed to parse: '" write drop
            2 $original-ptr $original-len write drop
            2 "'" write drop
            2 "\n" write drop
            2 "\n" write drop
            1 exit
        }
        $pt 1 + #pt // advance pointer
        $len 1 - #len // reduce length
        $len 0 = if { $n break }
        $n 10 * #n
    }
}

struct I32 { inner: i32 }

struct Iov {
    ptr: .i32
    len: i32
}

fn read(file: i32, buf_addr: .i32, buf_size: i32) -> i32, i32 {
    memory iov: Iov 8
    local read: I32
    local code: i32
    $buf_addr #iov.ptr 
    $buf_size #iov.len 
    $file $iov 1 &read.inner raw_read #code
    $read.inner $code
}

fn read-all(file: i32, buf-addr: .i32, buf-size: i32) -> i32, i32 {
    local read: i32
    local read-total: i32
    local code: i32
    loop {
        $file $buf-addr $read-total + $buf-size $read-total - read #code #read
        $code 0 = if {
            $read-total $read + #read-total
            $read-total $buf-size ge
            $read 0 = or if {
                $read-total 0 break
            }
        } else {
            $read-total $code break
        }
    }
}

fn write(file: i32, ptr: .i32, len: i32) -> i32 {
    local iov: Iov
    local written-ptr: I32
    local written: i32
    $ptr #iov.ptr
    $len #iov.len
    $file &iov 1 &written-ptr.inner raw_write drop
    $written-ptr.inner #written
    $written $len = if {
        $len
    } else {
        $file $ptr $written + $len $written - write $written +
    }
}

fn dup(a: i32) -> i32, i32 {
    $a $a
}
