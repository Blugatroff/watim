[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "fd_read" fn raw_read(file: i32, iovs: .Iov, iovs_count: i32, read: .i32) -> i32
extern "wasi_snapshot_preview1" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32
extern "wasi_snapshot_preview1" "proc_exit" fn exit(code: i32)

fn main "_start" () {
	memory buf: i32 32
	0 $buf 32 read-all drop @nread
	$buf $nread parse 
	dup
	print
	exit
}

fn print(n: i32) {
	memory buf: i32 16
	memory buf-reversed: i32 16
	0 @l
	$n 0 = if {
		1 #l
		$buf 48 store8
	} else {
		loop {
			$n 0 = if { break }
			$buf $l +
			$n 10 %
			48 +
			store8
			$n 10 / #n
			$l 1 + #l
		}
	}
	0 @i
	loop {
		$buf-reversed $i +
		$buf $l 1 - $i - + load8
		store8
		$i 1 + #i
		$i $l = if { break }
	}
	1 $buf-reversed $l write drop
}

fn parse(pt: .i32, len: i32) -> i32 {
	$pt @original-ptr
	$len @original-len
	0 @n
	loop {
		$pt load8 @d
		$d 48 ge $d 58 le and if {
			$n $d 48 - + #n
		} else {
			2 "Failed to parse: '" write drop
			2 $original-ptr $original-len write drop
			2 "'" write drop
			2 "\n" write drop
			2 "\n" write drop
			1 exit
		}
		$pt 1 + #pt
		$len 1 - #len
		$len 0 = if { $n break }
		$n 10 * #n
	}
}

struct I32 { inner: i32 }

struct Iov {
	ptr: .i32
	len: i32
}

fn read(file: i32, buf_addr: .i32, buf_size: i32) -> i32, i32 {
	memory iov: Iov 8
	uninit<I32> @read
	$buf_addr #iov.ptr
	$buf_size #iov.len
	$file $iov 1 &read.inner raw_read $read.inner flip
}

fn read-all(file: i32, buf-addr: .i32, buf-size: i32) -> i32, i32 {
	0 @read-total
	loop {
		$file $buf-addr $read-total + $buf-size $read-total - read @code @read
		$code 0 = if {
			$read-total $read + #read-total
			$read-total $buf-size ge
			$read 0 = or if {
				$read-total 0 break
			}
		} else {
			$read-total $code break
		}
	}
}

fn write(file: i32, ptr: .i32, len: i32) -> i32 {
	uninit<Iov> @iov
	uninit<I32> @written-ptr
	$ptr #iov.ptr
	$len #iov.len
	$file &iov 1 &written-ptr.inner raw_write drop
	$written-ptr.inner @written
	$written $len = if {
		$len
	} else {
		$file $ptr $written + $len $written - write $written +
	}
}

fn dup(a: i32) -> i32, i32 {
	$a $a
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "fd_read" (func $0:raw_read (param $file i32) (param $iovs i32) (param $iovs_count i32) (param $read i32) (result i32)))
	(import "wasi_snapshot_preview1" "fd_write" (func $0:raw_write (param $file i32) (param $iovs i32) (param $iovs_count i32) (param $written i32) (result i32)))
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 48))
	(data (i32.const 0) "Failed to parse: ''\n\n")
	(func $0:main (export "_start")
		(local $buf i32)
		(local $nread i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 32 i32.add global.set $stac:k local.set $buf
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $buf
		i32.const 0
		local.get $buf
		i32.const 32
		call $0:read-all
		drop
		local.set $nread
		local.get $buf
		local.get $nread
		call $0:parse
		call $0:dup
		call $0:print
		call $0:exit
		local.get $stac:k global.set $stac:k
	)
	(func $0:read-all (param $file i32) (param $buf-addr i32) (param $buf-size i32) (result i32) (result i32)
		(local $read-total i32)
		(local $code:1:0 i32)
		(local $read:1:0 i32)
		i32.const 0
		local.set $read-total
		(block $block  (result i32) (result i32)
			(loop $loop  (result i32) (result i32)
				local.get $file
				local.get $buf-addr
				local.get $read-total
				i32.add
				local.get $buf-size
				local.get $read-total
				i32.sub
				call $0:read
				local.set $code:1:0
				local.set $read:1:0
				local.get $code:1:0
				i32.const 0
				i32.eq
				(if
					(then
						local.get $read-total
						local.get $read:1:0
						i32.add
						local.set $read-total
						local.get $read-total
						local.get $buf-size
						i32.ge_u
						local.get $read:1:0
						i32.const 0
						i32.eq
						i32.or
						(if
							(then
								local.get $read-total
								i32.const 0
								br $block
							)
						)
					)
					(else
						local.get $read-total
						local.get $code:1:0
						br $block
					)
				)
				br $loop
			)
		)
	)
	(func $0:parse (param $pt i32) (param $len i32) (result i32)
		(local $original-ptr i32)
		(local $original-len i32)
		(local $n i32)
		(local $d:1:0 i32)
		local.get $pt
		local.set $original-ptr
		local.get $len
		local.set $original-len
		i32.const 0
		local.set $n
		(block $block  (result i32)
			(loop $loop  (result i32)
				local.get $pt
				i32.load8_u
				local.set $d:1:0
				local.get $d:1:0
				i32.const 48
				i32.ge_u
				local.get $d:1:0
				i32.const 58
				i32.le_u
				i32.and
				(if
					(then
						local.get $n
						local.get $d:1:0
						i32.const 48
						i32.sub
						i32.add
						local.set $n
					)
					(else
						i32.const 2
						i32.const 0 i32.const 18
						call $0:write
						drop
						i32.const 2
						local.get $original-ptr
						local.get $original-len
						call $0:write
						drop
						i32.const 2
						i32.const 18 i32.const 1
						call $0:write
						drop
						i32.const 2
						i32.const 19 i32.const 1
						call $0:write
						drop
						i32.const 2
						i32.const 20 i32.const 1
						call $0:write
						drop
						i32.const 1
						call $0:exit
					)
				)
				local.get $pt
				i32.const 1
				i32.add
				local.set $pt
				local.get $len
				i32.const 1
				i32.sub
				local.set $len
				local.get $len
				i32.const 0
				i32.eq
				(if
					(then
						local.get $n
						br $block
					)
					(else
						local.get $n
						i32.const 10
						i32.mul
						local.set $n
					)
				)
				br $loop
			)
		)
	)
	(func $0:dup (param $a i32) (result i32) (result i32)
		local.get $a
		local.get $a
	)
	(func $0:print (param $n i32)
		(local $buf i32)
		(local $buf-reversed i32)
		(local $l i32)
		(local $i i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 16 i32.add global.set $stac:k local.set $buf
		global.get $stac:k global.get $stac:k i32.const 16 i32.add global.set $stac:k local.set $buf-reversed
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $buf
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $buf-reversed
		i32.const 0
		local.set $l
		local.get $n
		i32.const 0
		i32.eq
		(if
			(then
				i32.const 1
				local.set $l
				local.get $buf
				i32.const 48
				i32.store8
			)
			(else
				(block $block 
					(loop $loop 
						local.get $n
						i32.const 0
						i32.eq
						(if
							(then
								br $block
							)
							(else
								local.get $buf
								local.get $l
								i32.add
								local.get $n
								i32.const 10
								i32.rem_u
								i32.const 48
								i32.add
								i32.store8
								local.get $n
								i32.const 10
								i32.div_u
								local.set $n
								local.get $l
								i32.const 1
								i32.add
								local.set $l
							)
						)
						br $loop
					)
				)
			)
		)
		i32.const 0
		local.set $i
		(block $block 
			(loop $loop 
				local.get $buf-reversed
				local.get $i
				i32.add
				local.get $buf
				local.get $l
				i32.const 1
				i32.sub
				local.get $i
				i32.sub
				i32.add
				i32.load8_u
				i32.store8
				local.get $i
				i32.const 1
				i32.add
				local.set $i
				local.get $i
				local.get $l
				i32.eq
				(if
					(then
						br $block
					)
				)
				br $loop
			)
		)
		i32.const 1
		local.get $buf-reversed
		local.get $l
		call $0:write
		drop
		local.get $stac:k global.set $stac:k
	)
	(func $0:read (param $file i32) (param $buf_addr i32) (param $buf_size i32) (result i32) (result i32)
		(local $iov i32)
		(local $read i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $iov
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $iov
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $read
		i32.const 0
		local.get $read call $intrinsic:flip i32.store
		local.get $buf_addr
		local.get $iov i32.const 0 i32.add call $intrinsic:flip i32.store
		local.get $buf_size
		local.get $iov i32.const 4 i32.add call $intrinsic:flip i32.store
		local.get $file
		local.get $iov
		i32.const 1
		local.get $read i32.const 0 i32.add
		call $0:raw_read
		local.get $read i32.load offset=0
		call $intrinsic:flip
		local.get $stac:k global.set $stac:k
	)
	(func $0:write (param $file i32) (param $ptr i32) (param $len i32) (result i32)
		(local $iov i32)
		(local $written-ptr i32)
		(local $written i32)
		(local $locl-copy-spac:e i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $locl-copy-spac:e
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $iov
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $written-ptr
		local.get $locl-copy-spac:e i32.const 0 i32.add
		local.get $iov call $intrinsic:flip i32.const 8 memory.copy
		i32.const 0
		local.get $written-ptr call $intrinsic:flip i32.store
		local.get $ptr
		local.get $iov i32.const 0 i32.add call $intrinsic:flip i32.store
		local.get $len
		local.get $iov i32.const 4 i32.add call $intrinsic:flip i32.store
		local.get $file
		local.get $iov
		i32.const 1
		local.get $written-ptr i32.const 0 i32.add
		call $0:raw_write
		drop
		local.get $written-ptr i32.load offset=0
		local.set $written
		local.get $written
		local.get $len
		i32.eq
		(if (result i32)
			(then
				local.get $len
			)
			(else
				local.get $file
				local.get $ptr
				local.get $written
				i32.add
				local.get $len
				local.get $written
				i32.sub
				call $0:write
				local.get $written
				i32.add
			)
		)
		local.get $stac:k global.set $stac:k
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
42
[== Stdin ==]
42
[== Stdout ==]
42
