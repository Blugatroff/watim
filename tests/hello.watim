[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "fd_read" fn raw_read(file: i32, iovs: .Iov, iovs_count: i32, read: .i32) -> i32
extern "wasi_snapshot_preview1" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32
extern "wasi_snapshot_preview1" "proc_exit" fn exit(code: i32)

fn main "_start" () {
	memory buf: i32 32
	0 $buf 32 read-all drop @nread
	$buf $nread parse 
	dup
	print
	exit
}

fn print(n: i32) {
	memory buf: i32 16
	memory buf-reversed: i32 16
	0 @l
	$n 0 = if {
		1 #l
		$buf 48 store8
	} else {
		loop {
			$n 0 = if { break }
			$buf $l +
			$n 10 %
			48 +
			store8
			$n 10 / #n
			$l 1 + #l
		}
	}
	0 @i
	loop {
		$buf-reversed $i +
		$buf $l 1 - $i - + load8
		store8
		$i 1 + #i
		$i $l = if { break }
	}
	1 $buf-reversed $l write drop
}

fn parse(pt: .i32, len: i32) -> i32 {
	$pt @original-ptr
	$len @original-len
	0 @n
	loop {
		$pt load8 @d
		$d 48 ge $d 58 le and if {
			$n $d 48 - + #n
		} else {
			2 "Failed to parse: '" write drop
			2 $original-ptr $original-len write drop
			2 "'" write drop
			2 "\n" write drop
			2 "\n" write drop
			1 exit
		}
		$pt 1 + #pt
		$len 1 - #len
		$len 0 = if { $n break }
		$n 10 * #n
	}
}

struct I32 { inner: i32 }

struct Iov {
	ptr: .i32
	len: i32
}

fn read(file: i32, buf_addr: .i32, buf_size: i32) -> i32, i32 {
	memory iov: Iov 8
	local read: I32
	$buf_addr #iov.ptr 
	$buf_size #iov.len 
	$file $iov 1 &read.inner raw_read $read.inner flip
}

fn read-all(file: i32, buf-addr: .i32, buf-size: i32) -> i32, i32 {
	0 @read-total
	loop {
		$file $buf-addr $read-total + $buf-size $read-total - read @code @read
		$code 0 = if {
			$read-total $read + #read-total
			$read-total $buf-size ge
			$read 0 = or if {
				$read-total 0 break
			}
		} else {
			$read-total $code break
		}
	}
}

fn write(file: i32, ptr: .i32, len: i32) -> i32 {
	local iov: Iov
	local written-ptr: I32
	$ptr #iov.ptr
	$len #iov.len
	$file &iov 1 &written-ptr.inner raw_write drop
	$written-ptr.inner @written
	$written $len = if {
		$len
	} else {
		$file $ptr $written + $len $written - write $written +
	}
}

fn dup(a: i32) -> i32, i32 {
	$a $a
}
[== Status Compiler ==]
0
[== Status ==]
42
[== Stdin ==]
42
[== Stdout ==]
42
