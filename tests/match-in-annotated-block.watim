[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "proc_exit" fn proc_exit(code: i32)

variant Type {
    case Bool
    case Ptr -> .Type
}

fn main "_start" () {
    block () -> i32 {
        make Type.Bool @b
        &b make Type.Ptr match {
            case Bool -> { "bool" }
            case Ptr -> {
                "." write dup<i32> 0 /= if { break } drop
                drop 3 break
            }
            case _ -> { drop "TODO" }
        } write
    } proc_exit
}

fn dup<T>(a: T) -> T, T { $a $a }
fn write(ptr: .i32, len: i32) -> i32 { 0 }
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:proc_exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 12))
	(data (i32.const 0) "bool.TODO")
	(func $0:main (export "_start")
		(local $b:1:0 i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $b:1:0
		(block $block (result i32)
			i64.const 0 ;; make Type.Bool
			local.get $b:1:0 call $intrinsic:flip-i64-i32 i64.store
			local.get $b:1:0
			i64.extend_i32_u i64.const 32 i64.shl ;; store value
			i64.const 1 ;; store tag
			i64.or ;; make Type.Ptr
			;; match on Type
			call $intrinsic:dupi64 i32.wrap_i64 i32.const 0 i32.eq (if (param i64) (result i32) (result i32)
			(then
				drop
				i32.const 0 i32.const 4
			)
			(else call $intrinsic:dupi64 i32.wrap_i64 i32.const 1 i32.eq (if (param i64) (result i32) (result i32)
			(then
				i64.const 32 i64.shr_u i32.wrap_i64
				i32.const 4 i32.const 1
				call $0:write
				call $0:dup
				i32.const 0
				i32.ne
				(if (param i32) (param i32)
					(then
						br $block
					)
					(else
						drop
						drop
						i32.const 3
						br $block
					)
				)
				unreachable
			)
			(else
				drop
				i32.const 5 i32.const 4
			))))
			call $0:write
		)
		call $0:proc_exit
		local.get $stac:k global.set $stac:k
	)
	(func $0:dup (param $a i32) (result i32) (result i32) ;; i32
		local.get $a
		local.get $a
	)
	(func $0:write (param $ptr i32) (param $len i32) (result i32)
		i32.const 0
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:flip-i64-i32 (param $a i64) (param $b i32) (result i32 i64) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:dupi64 (param $a i64) (result i64 i64) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
3
