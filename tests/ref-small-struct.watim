[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "proc_exit" fn proc_exit(code: i32)

struct Small { value: i32 }

fn change(s: .Small) {
	$s.value 1 + #s.value
}

fn main "_start" () {
	3 make Small @small
	&small change
	$small.value proc_exit
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:proc_exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:change (param $s i32)
		local.get $s i32.load offset=0
		i32.const 1
		i32.add
		local.get $s i32.const 0 i32.add call $intrinsic:flip i32.store
	)
	(func $0:main (export "_start")
		(local $small i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 4 i32.add global.set $stac:k local.set $small
		i32.const 3
		;; make Small
		local.get $small call $intrinsic:flip i32.store
		local.get $small
		call $0:change
		local.get $small i32.load offset=0
		call $0:proc_exit
		local.get $stac:k global.set $stac:k
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
4
