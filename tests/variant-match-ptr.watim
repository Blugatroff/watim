[== Stdin Compiler ==]
extern "wasi_snapshot_preview1" "proc_exit" fn proc_exit(code: i32)

variant Either<A, B> {
	case Left -> A
	case Right -> B
	case Empty
}

fn foo() -> Either<i32, bool> {
	0 1 = make Either<i32, bool>.Right
}

fn main "_start" () {
	foo @either
    &either match Either<i32, bool> {
		case Left -> { ~ }
		case Right -> { drop 3 }
		case Empty -> { 4 }
	} proc_exit
}
[== Status Compiler ==]
0
[== Stdout Compiler ==]
(module
	(import "wasi_snapshot_preview1" "proc_exit" (func $0:proc_exit (param $code i32)))
	(memory 1 65536)
	(export "memory" (memory 0))
	(table funcref (elem))
	(global $stac:k (mut i32) (i32.const 0))
	(data (i32.const 0) "")
	(func $0:foo (result i64)
		i32.const 0
		i32.const 1
		i32.eq
		i64.extend_i32_u i64.const 32 i64.shl ;; store value
		i64.const 1 ;; store tag
		i64.or ;; make Either.Right
	)
	(func $0:main (export "_start")
		(local $either i32)
		(local $stac:k i32)
		global.get $stac:k local.set $stac:k
		global.get $stac:k global.get $stac:k i32.const 8 i32.add global.set $stac:k local.set $either
		call $0:foo
		local.get $either call $intrinsic:flip-i64-i32 i64.store
		local.get $either
		;; match on Either
		call $intrinsic:dupi32 i32.load i32.const 0 i32.eq (if (param i32) (result i32)
		(then
			i32.const 4 i32.add
			i32.load
		)
		(else call $intrinsic:dupi32 i32.load i32.const 1 i32.eq (if (param i32) (result i32)
		(then
			i32.const 4 i32.add
			drop
			i32.const 3
		)
		(else call $intrinsic:dupi32 i32.load i32.const 2 i32.eq (if (param i32) (result i32)
		(then
			drop
			i32.const 4
		)
		(else unreachable))))))
		call $0:proc_exit
		local.get $stac:k global.set $stac:k
	)
	(func $intrinsic:flip (param $a i32) (param $b i32) (result i32 i32) local.get $b local.get $a)
	(func $intrinsic:flip-i64-i32 (param $a i64) (param $b i32) (result i32 i64) local.get $b local.get $a)
	(func $intrinsic:dupi32 (param $a i32) (result i32 i32) local.get $a local.get $a)
	(func $intrinsic:rotate-left (param $a i32) (param $b i32) (param $c i32) (result i32 i32 i32) local.get $b local.get $c local.get $a)
)
[== Status ==]
3
