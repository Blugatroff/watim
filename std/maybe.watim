import "./core.watim" as Core (unreachable)
import "./io.watim" as IO
import "./fmt.watim" as Fmt (Formatter)

variant Maybe<T> {
    case Some -> T
    case None
}

fn ref<T>(self: .Maybe<T>) -> Maybe<.T> {
    $self match {
        case None -> { make Maybe<.T>.None }
        case Some -> { make Maybe<.T>.Some }
    }
}

fn or-default<T>(o: Maybe<T>, default: T) -> T {
    $o match {
        case Some -> {}
        case None -> { $default }
    }
}

fn assert-none<T>(o: Maybe<T>) {
    $o match {
        case Some -> { drop 0 0 / drop }
        case None -> {}
    }
}

fn assert-some<T>(o: Maybe<T>) -> T {
    $o match {
        case Some -> {}
        case None -> { unreachable<T> }
    }
}

fn is-some<T>(o: .Maybe<T>) -> bool {
    1 $o match {
        case Some -> { drop 1 }
        case None -> { 0 }
    } =
}

fn format<T>(fmt: .Formatter, format-inner: (.Formatter, .T ->), self: .Maybe<T>) {
    $self match {
        case None -> { $fmt "None" Fmt:write }
        case Some -> {
            $fmt "(Some " Fmt:write
            $fmt flip $format-inner ->
            $fmt ")" Fmt:write
        }
    }
}

fn print<T>(fd: i32, print-inner: (i32, .T -> i32), self: .Maybe<T>) -> i32 { block () -> i32 {
    $self match {
        case None -> { $fd "None" IO:write-all }
        case Some -> {
            $fd "(Some " IO:write-all Core:dup<i32> 0 /= if { break } drop
            $fd flip $print-inner -> Core:dup<i32> 0 /= if { break } drop
            $fd ")" IO:write-all
        }
    }
} }

