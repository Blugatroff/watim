import "./core.watim" as CORE
import "./io.watim" as IO
import "./arena.watim" as Arena
import "./array.watim" as Array

memory ENABLED: bool 4
memory SAMPLE: i32 4
memory ARENAS: Array:Array<i32> 20
memory MARKS: Array:Array<Marker> 20
memory ARENA: Arena:Arena 20

struct Marker {
    sample: i32
    value: i32
    label-ptr: .i32
    label-len: i32
}

fn enable() {
    $ENABLED 1 1 = store
    \on-new \on-alloc \on-restore \on-clear Arena:set-callbacks
}

fn on-new(arena: .Arena:Arena) {
    $ARENAS @arenas
    $ARENA $arenas $arena.size Array:push<i32>
    $arenas.len #arena.index
}

fn on-clear(arena: .Arena:Arena) {
    $ARENAS @arenas
    $arena.index 0 /= $arena.index $arenas.len le and if {
        print-arena-levels
        2 "# cleared " IO:write-all IO:check
        2 $arena.name-ptr $arena.name-len IO:write-all IO:check
        2 IO:newline
        $ARENAS $arena.index 1 - $arena.size Array:set<i32> drop
    }
}

fn on-alloc(arena: .Arena:Arena, size: i32) {
    $ARENAS @arenas
    $arena.index 0 /= $arena.index $arenas.len le and if {
        print-arena-levels
        2 "# alloced " IO:write-all IO:check
        2 $size IO:print IO:check
        2 " bytes in " IO:write-all IO:check
        2 $arena.name-ptr $arena.name-len IO:write-all IO:check
        2 IO:newline
        $arenas $arena.index 1 - $arena.size Array:set<i32> drop
    }
}

fn on-restore(arena: .Arena:Arena) {
    $ARENAS @arenas
    $arena.index 0 /= $arena.index $arenas.len le and if {
        print-arena-levels
        2 "# restored " IO:write-all IO:check
        2 $arena.name-ptr $arena.name-len IO:write-all IO:check
        2 IO:newline
        $ARENAS $arena.index 1 - $arena.size Array:set<i32> drop
    }
}

fn print-arena-levels() {
    2 " " IO:write-all IO:check
    2 $SAMPLE ~ IO:print IO:check
    $SAMPLE $SAMPLE ~ 1 + store
    1 @i
    loop {
        2 "\t" IO:write-all IO:check
        $ARENAS @arenas $arenas.len 1 + $i = if { break }
        2 $ARENAS $i 1 - Array:get<i32> ~ IO:print IO:check
        $i 1 + #i
    }
}

fn begin() {
    Array:new<i32> =>ARENAS
    Array:new<Marker> =>MARKS
    0 =>SAMPLE
    $ENABLED ~ if {
        "ArenaGraph-Arena" Arena:new =>ARENA // store
        2 "$data << EOD\n" IO:write-all IO:check
    }
}

fn end() {
    $ENABLED ~ if {
        2 "EOD\n" IO:write-all IO:check
        0 @i
        loop {
            $i $MARKS @marks $marks.len = if { break }
            $MARKS $i Array:get<Marker> @marker
            2 "set label " IO:write-all IO:check
            2 $i 1 + IO:print IO:check
            2 " \"" IO:write-all IO:check
            2 $marker.label-ptr $marker.label-len IO:write-all IO:check
            2 "\" at " IO:write-all IO:check
            2 $marker.sample IO:print IO:check
            2 "," IO:write-all IO:check
            2 $marker.value IO:print IO:check
            2 " point pointtype 0\n" IO:write-all IO:check
            $i 1 + #i
        }
        2 "plot \"$data\" using 1:2 title 'Temp1' with lines, \"$data\" using 1:3 title 'Temp2', \"$data\" using 1:4 title 'Main' with lines\n" IO:write-all IO:check
        2 "pause mouse close\n" IO:write-all IO:check
    }
    $ARENA Arena:clear
    Array:new<i32> =>ARENAS
    Array:new<Marker> =>MARKS
    0 =>SAMPLE
}

fn mark(arena: .Arena:Arena, str-ptr: .i32, str-len: i32) {
    local marker: Marker
    $SAMPLE ~ #marker.sample
    $arena.size #marker.value
    $str-ptr #marker.label-ptr
    $str-len #marker.label-len
    $ARENA $MARKS $marker Array:push<Marker>
}

