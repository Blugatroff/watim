import "./core.watim" as CORE
import "./io.watim" as IO
import "./byte-slice.watim" as ByteSlice (ByteSlice)

struct Formatter {
    indent-level: i32
    write: (i32, .i8, i32 ->)
    user-data: i32
    indentation-ptr: .i8
    indentation-len: i32
}

fn new(write: (i32, .i8, i32 ->), user-data: i32) -> Formatter {
    make Formatter {
        $write @write
        $user-data @user-data
        0 @indent-level
        "  " @indentation-len @indentation-ptr
    }
}
fn use-indentation(fmt: Formatter, indentation-ptr: .i8, indentation-len: i32) -> Formatter {
    make Formatter {
        $fmt.write @write
        $fmt.user-data @user-data
        $fmt.indent-level @indent-level
        $indentation-ptr @indentation-ptr
        $indentation-len @indentation-len
    }
}
fn write(self: .Formatter, ptr: .i8, len: i32) {
    $self.user-data $ptr $len $self.write (i32, .i8, i32 ->)
}
fn write-indent(self: .Formatter) {
    0 @i
    loop {
        $i $self.indent-level = if { break }
        $self $self.indentation-ptr $self.indentation-len write
        $i 1 + #i
    }
}
fn indent(self: .Formatter) {
    $self.indent-level 1 + #self.indent-level
}
fn dedent(self: .Formatter) {
    $self.indent-level 0 = if {
        "Formatter: tried to dedent below 0" IO:abort
    }
    $self.indent-level 1 - #self.indent-level
}

