import "./core.watim" as CORE
import "./io.watim" as IO

fn page-size() -> i32 { 1 16 rotl }
fn div-by-page-size(n: i32) -> i32 {
    // $n 16 shr // TODO: implement shr
    $n page-size /
}
fn div-by-page-size-round-up(n: i32) -> i32 { $n page-size 1 - + div-by-page-size }

fn current-number-of-pages() -> i32 {
    0 mem-grow
}

memory ALLOCATOR: PageAllocator 4

struct Page {
    next: .Page
}

struct PageAllocator {
    free-list: .Page
}

fn init() {
    $ALLOCATOR @self
    0 !.Page #self.free-list
}

fn do-the-mem-grow() -> .i32 {
    0 mem-grow page-size * !.i32
    1 mem-grow 1 31 rotl and 0 /= if {
        2 "Failed to allocate another page of memory\n" IO:write-all IO:check
        1 CORE:exit
    }
}

fn alloc-page() -> .i32 {
    $ALLOCATOR @self
    $self.free-list 0 !.Page /= if {
        $self.free-list !.i32
        $self.free-list.next #self.free-list
    } else {
        do-the-mem-grow
    }
}
fn search-free-list-for-contiguous(list: .Page, n: i32) -> .Page { block {
    // TODO: This function only finds contiguous free pages which are also contguous in the free-list.
    // That is they need to be sorted in the free-list, according to their address, to be found by this naive function.
    // The fix would either be to keep the free-list sorted on every `discard-page`
    // or to only sort the list on large allocations across multiple pages.

    1 $n / drop // $n 0 /= assert

    // no free page
    $list 0!.Page = if { 0!.Page break }

    // only one page requested, use first entry in list
    $n 1 = if { $list break }

    // list only has one entry but more than page was requested
    $list.next 0!.Page = if { 0!.Page break }

    1 @run-length
    $list @run-start
    loop {
        $list 0!.Page = if { 0!.Page break }
        $list.next $list page-size + = if {
            $run-length 1 + #run-length
            $list.next #list
            $run-length $n = if { $run-start break }
        } else {
            1 #run-length
            $list.next #list
            $list #run-start
        }
    }
} }
fn contiguous-pages(n: i32) -> .i32 { block {
    $ALLOCATOR @self
    $self.free-list $n search-free-list-for-contiguous @contiguous-free
    $contiguous-free 0!.Page /= if {
        $self.free-list @list
        $list $contiguous-free = if {
            loop {
                $n 0 = if { break }
                $n 1 /= if {
                    $list.next 0 !.Page /= $list page-size + $list.next /= and if {
                        0 0 / drop
                    }
                }
                $list.next #list
                $n 1 - #n
            }
            $list #self.free-list
        } else {
            loop {
                $list.next $contiguous-free = if {
                    loop {
                        $n 0 = if { break }
                        $n 1 /= if {
                            $list.next.next 0 !.Page /= $list.next page-size + $list.next.next /= and if {
                                0 0 / drop
                            }
                        }
                        $list.next.next #list.next
                        $n 1 - #n
                    }
                    break
                }
                $list.next #list
            }
        }
        $contiguous-free !.i32 break
    }
    do-the-mem-grow @first
    loop {
        $n 1 = if { break }
        do-the-mem-grow drop
        $n 1 - #n
    }
    $first
} }
fn discard-page(page: .i32) {
    $ALLOCATOR @self
    $page !.Page @page
    $self.free-list #page.next
    $page #self.free-list

    // There is currently no way to deallocate pages in wasm.
    // But there is a proposal for the `memory.discard` instruction: https://github.com/WebAssembly/memory-control/issues/6
}

