import "./core.watim" as CORE
import "./io.watim" as IO
import "./arena.watim" as A
import "./byte-slice.watim" as ByteSlice

struct T {
    ptr: .i32
    len: i32
    cap: i32
    arena: .A:Arena
}

fn new() -> T {
    make T {
        0 !.i32 @ptr
        0 @len
        0 @cap
        0 !.A:Arena @arena
    }
}

fn init(ptr: .i32, len: i32) -> T {
    make T {
        $ptr @ptr
        $len @len
        $len @cap
        0 !.A:Arena @arena
    }
}

fn check-same-arena(self: .T, arena: .A:Arena) {
    $self.arena 0 !.A:Arena = if {
        $arena #self.arena
    } else {
        $self.arena $arena /= if {
            2 "ByteArray: used different arenas\n" IO:write-all IO:check
            0 0 / drop
        }
    }
}

fn push(arena: .A:Arena, self: .T, ptr: .i32, len: i32) {
    $ptr $arena $self $len alloc-bytes $len CORE:copy-bytes
}
fn alloc-bytes(arena: .A:Arena, self: .T, len: i32) -> .i32 {
    $self $arena check-same-arena
    $self.len $len + $self.cap le if {
        $self.ptr $self.len +
        $self.len $len + #self.len
    } else {
        $arena A:save @save
        $self.ptr $self.cap + $arena $self.len $len + $self.cap - A:alloc-bytes = if {
            // Optimization in case the newly allocated bytes immediately 
            // follow the already allocated bytes of this ByteArray.
            $self.len $len + #self.cap
            $arena $self $len alloc-bytes
        } else {
            $arena $save A:restore
            $self.cap 16 CORE:max 2 * #self.cap
            $arena $self.cap A:alloc-bytes @new-buf
            $self.ptr $new-buf $self.len CORE:copy-bytes
            $new-buf #self.ptr
            $arena $self $len alloc-bytes
        }
    }
}
fn push-byte(arena: .A:Arena, self: .T, byte: i32) {
    uninit<CORE:I32> @ptr
    $byte #ptr.inner
    $arena $self &ptr.inner 1 push
}
fn push-i32(arena: .A:Arena, self: .T, v: i32) {
    uninit<CORE:I32> @ptr
    $v #ptr.inner
    $arena $self &ptr.inner 4 push
}

fn get(self: .T, index: i32) -> i32 {
    $index $self.len ge if {
        2 "Index out of bounds\n" IO:write-all IO:check
        0 0 / drop
        1 CORE:exit
    }
    $self.ptr $index + load8
}

fn unpack(self: .T) -> .i32, i32 {
    $self.ptr $self.len
}

fn to-slice(self: .T) -> ByteSlice:T {
    $self unpack make ByteSlice:T
}

