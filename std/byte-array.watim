import "./core.watim" as CORE
import "./io.watim" as IO
import "./str.watim" as STR
import "./arena.watim" as A

struct T {
    ptr: .i32
    len: i32
    cap: i32
    arena: .A:Arena
}

fn new() -> T {
    local self: T
    0 !.i32 #self.ptr
    0 #self.len
    0 #self.cap
    0 !.A:Arena #self.arena
    $self
}

fn check-same-arena(self: .T, arena: .A:Arena) {
    $self.arena 0 !.A:Arena = if {
        $arena #self.arena
    } else {
        $self.arena $arena /= if {
            2 "ByteArray: used different arenas\n" IO:write-all IO:check
            0 0 / drop
        }
    }
}

fn push(arena: .A:Arena, self: .T, ptr: .i32, len: i32) {
    $self $arena check-same-arena
    $self.len $len + $self.cap le if {
        $ptr
        $self.ptr $self.len +
        $len
        CORE:copy-bytes
        $self.len $len + #self.len
    } else {
        $self.cap 16 CORE:max 2 * @new-cap
        $arena $new-cap A:alloc-bytes @new-buf
        $self.ptr $new-buf $self.len CORE:copy-bytes
        $new-buf #self.ptr
        $new-cap #self.cap
        $arena $self $ptr $len push
    }
}

fn get(self: .T, index: i32) -> i32 {
    $index $self.len ge if {
        2 "Index out of bounds\n" IO:write-all IO:check
        0 0 / drop
        1 CORE:exit
    }
    $self.ptr $index + load8
}

fn unpack(self: .T) -> .i32, i32 {
    $self.ptr $self.len
}

