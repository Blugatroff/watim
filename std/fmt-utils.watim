import "./core.watim" as Core
import "./io.watim" as IO
import "./arena.watim" as Arena (Arena)
import "./byte-slice.watim" as ByteSlice (ByteSlice)
import "./array.watim" as Array (Array)
import "./fmt.watim" as Fmt (Formatter)

struct FormatterIntoStringUserData {
    string: .Array<i8>
    arena: .Arena
}

fn append-string(user-data: i32, ptr: .i8, len: i32) {
    $user-data !.FormatterIntoStringUserData @user-data
    $user-data.arena $user-data.string $ptr $len Array:append-raw<_>
}

fn into-string(arena: .Arena, target: .Array<i8>) -> Formatter {
    $arena Arena:alloc<FormatterIntoStringUserData> @user-data
    $arena #user-data.arena
    $target #user-data.string
    \append-string $user-data !i32 Fmt:new
}

fn into-new-string(arena: .Arena) -> Formatter, .Array<i8> {
    $arena Array:new<i8> Arena:push<Array<i8>> @buf
    $arena $buf into-string $buf
}

struct Buffer {
    ptr: .i8
    cap: i32
    len: i32
    parent: .Formatter
}
fn flush(self: .Buffer) {
    $self.parent.user-data $self.ptr $self.len $self.parent.write ->
    0 #self.len
}
fn write-buffered(user-data: i32, ptr: .i8, len: i32) {
    $user-data !.Buffer @buffer
    $buffer.len $len + $buffer.cap gt if {
        $buffer flush
    }
    $len $buffer.cap gt if {
        $buffer.parent.user-data $ptr $len $buffer.parent.write ->
    }
    $ptr $buffer.ptr $buffer.len + $len Core:copy-bytes
    $buffer.len $len + #buffer.len
}
fn buffered(arena: .Arena, fmt: .Formatter, buf-size: i32) -> Formatter, .Buffer {
    $arena
    $arena $buf-size Arena:alloc-bytes $buf-size 0 $fmt
    make Buffer
    Arena:push<Buffer> @buffer
    $buffer !i32 @user-data
    make Formatter {
        \write-buffered @write
        $user-data @user-data
        $fmt.indent-level @indent-level
        $fmt.indentation-ptr @indentation-ptr
        $fmt.indentation-len @indentation-len
    }
    $buffer
}

fn write-to-fd(fd: i32, ptr: .i8, len: i32) {
    $fd $ptr $len IO:write-all IO:check
}

fn to-fd(fd: i32) -> Formatter {
    \write-to-fd $fd Fmt:new
}

fn stdout() -> Formatter {
    1 to-fd
}

fn print-it<T>(fd: i32, fmt: (.Formatter, .T ->), item: .T) {
    $fd to-fd @formatter
    &formatter $item $fmt ->
}

fn ByteSlice-format(fmt: .Formatter, self: .ByteSlice) {
    $fmt "\"" Fmt:write
    0 @escaped-char
    0 @i
    loop {
        $i $self.len = if { break }
        $fmt &escaped-char !.i8 $self.ptr $i + ~ &escaped-char !.i8 Core:escape Fmt:write
        $i 1 + #i
    }
    $fmt "\"" Fmt:write
}

