import "./result.watim" as Result (Result)
import "./core.watim" as CORE
import "./io.watim" as IO (Error, error-from-raw)
import "./arena.watim" as Arena (Arena)
import "./array.watim" as Array (Array)
import "./bytes.watim" as Bytes
import "./byte-slice.watim" as ByteSlice (ByteSlice)
import "./util.watim" as Util

extern "wasi_snapshot_preview1" "fd_prestat_get" fn fd_prestat_get(fd: i32, prestat: .Prestat) -> i32
extern "wasi_snapshot_preview1" "fd_prestat_dir_name" fn fd_prestat_dir_name(fd: i32, path: .i8, len: i32) -> i32
extern "wasi_snapshot_preview1" "path_open" fn path_open(
    fd: i32,
    dirflags: i32,
    path: .i8,
    path_len: i32,
    oflags: i32,
    fs_rights_base: i64,
    fs_rights_inheriting: i64,
    fd_flags: i32,
    res_fd: .i32
) -> i32
extern "wasi_snapshot_preview1" "fd_close" fn close(fd: i32) -> i32

fn create-rights(read: bool, write: bool) -> i64 {
    $read !i64 1 !i64 shl
    $write !i64 6 !i64 shl
    or
}

fn create-oflags(truncate: bool) -> i32 {
    $truncate !i32 3 shl
}

struct PreopenedFd {
    fd: i32
    path: ByteSlice
}
struct FileSystem {
    preopened-fds: Array<PreopenedFd>
}
fn FileSystem-new(preopened-fds: Array<PreopenedFd>) -> FileSystem {
    $preopened-fds make FileSystem
}

fn init(arena: .Arena) -> FileSystem, i32 {
    0 @code
    3 @fd
    $arena Arena:save @restore
    Array:new<PreopenedFd> @fds
    $arena Arena:temp @temp @temp-save
    loop {
        uninit<Prestat> @prestat
        $fd &prestat fd_prestat_get #code
        // 8 = Bad file descriptor
        $code 8 = if { 
            0 #code
            break 
        }
        $code 0 /= if {
            break
        }
        $prestat.path_len @len

        $arena $len Arena:alloc-bytes @buf
        $fd $buf $len fd_prestat_dir_name #code
        $code 0 /= if {
            break
        }
        $buf $len make ByteSlice @path
        $temp &fds $fd $path make PreopenedFd Array:push<PreopenedFd>
        $fd 1 + #fd
    }
    $arena $fds.ptr $fds.len Array:init<PreopenedFd> FileSystem-new $code
    $code 0 /= if {
        $arena $restore Arena:restore
    }
    $temp $temp-save Arena:restore
}
// returns 0, 0 if not found
// returns 0, e if error
fn find-current-dir(fs: .FileSystem) -> i32, i32 {
    $fs.preopened-fds.len 0 = if {
        2 "failed to find preopened current directory\n" IO:write-all IO:check
        1 CORE:exit
    }
    0 @i
    loop {
        $i $fs.preopened-fds.len = if { 
            // no preopend directory named "." found, using
            // the first preopened directory as a fallback.
            &fs.preopened-fds 0 Array:get<PreopenedFd> .fd ~ 0 break
        }
        &fs.preopened-fds $i Array:get<PreopenedFd> @preopened-fd
        $preopened-fd.path ByteSlice:unpack "." Bytes:is-prefix
        if { $preopened-fd.fd 0 break }
        $i 1 + #i
    }
}

struct Prestat {
    kind: i32
    path_len: i32
}

fn path-dir(path-ptr: .i8, path-len: i32) -> .i8, i32 {
    $path-ptr $path-len "/" drop ~ Bytes:find-rev if {
        $path-ptr flip
    } else {
        drop $path-ptr $path-len
    }
}


fn str-replace(arena: .Arena, ptr: .i8, len: i32, target-ptr: .i8, target-len: i32, replacement-ptr: .i8, replacement-len: i32) -> Array<i8> {
    Array:new<i8> @new
    $ptr $len $target-ptr $target-len Bytes:find-seq if {
        @index
        $arena &new $ptr $index Array:append-raw<_>
        $arena &new $replacement-ptr $replacement-len Array:append-raw<_>

        $arena
        $ptr $index + $target-len + @next-ptr $next-ptr
        $len $index - $target-len -
        $target-ptr
        $target-len
        $replacement-ptr
        $replacement-len
        str-replace @new-next

        $arena &new &new-next Array:append<_>
        $new
    } else {
        drop $ptr $len Array:init-no-copy<_>
    }
}

fn normalize(arena: .Arena, path-ptr: .i8, path-len: i32) -> .i8, i32 {
    $arena Arena:temp @temp @temp-save
    Array:new<i8> @out

    $path-ptr $path-len "./" Bytes:is-prefix not if {
        $temp &out "./" Array:append-raw<_>
    }
    $temp &out $path-ptr $path-len Array:append-raw<_>

    $temp &out Array:unpack<_> "//" "/" str-replace #out
    $temp &out Array:unpack<_> "/./" "/" str-replace #out

    $temp &out Array:to-slice "/" drop ~ Util:split-bytes @splits
    Array:new<ByteSlice> @outsplits
    0 @i
    loop {
        $i $splits.len = if { break }
        block {
            $i 1 + $splits.len /= if {
                &splits $i 1 + Array:get<ByteSlice> ~ ByteSlice:unpack ".." Bytes:eq 
                &splits $i Array:get<ByteSlice> ~ ByteSlice:unpack "." Bytes:eq not and
                &splits $i Array:get<ByteSlice> ~ ByteSlice:unpack ".." Bytes:eq not and
                if {
                    $i 1 + #i break
                }
            }
            $temp &outsplits &splits $i Array:get<ByteSlice> ~ Array:push<ByteSlice>
        }
        $i 1 + #i
    }
    $temp &outsplits "/" Array:join-with @out
    $path-ptr $path-len &out Array:unpack<_> Bytes:eq if {
        $arena &out Array:unpack<_> Arena:push-bytes $out.len
    } else {
        $arena &out Array:unpack<_> normalize
    }
    $temp $temp-save Arena:restore
}

fn open-file(fs: .FileSystem, path: .i8, path_len: i32, rights: i64, inheriting_rights: i64, oflags: i32) -> i32, i32 {
    $fs find-current-dir @code @parent-fd
    $code 0 /= if {
        0 $code
    } else {
        0 @fd
        $parent-fd 0 $path $path_len $oflags $rights $inheriting_rights 0 &fd path_open #code
        $fd $code
    }
}

fn read-file(arena: .Arena, fs: .FileSystem, path: .i8, path-len: i32) -> Result<Array<i8>, Error> { block {
    $fs
    $path $path-len
    0 0 = 0 1 = create-rights
    0 1 = 0 1 = create-rights
    0 1 = create-oflags
    open-file @code @fd
    $code 0 /= if {
        $fd close drop
        $code error-from-raw make Result<Array<i8>, Error>.Error break
    }
    $arena $fd read-all
    $fd close drop
} }

fn read-all(arena: .Arena, file: i32) -> Result<Array<i8>, Error> {
    64 @buf-size
    $arena Arena:temp @temp @temp-save
    $temp $buf-size Arena:alloc-bytes @buf
    Array:new<i8> @out

    loop {
        $file $buf $buf-size IO:read @code @read
        $code 0 /= if {
            $code error-from-raw make Result<Array<i8>, Error>.Error break
        }
        $read 0 = if {
            $out make Result<Array<i8>, Error>.Success break
        } else {
            $arena &out $buf $read Array:append-raw<_>
        }
    }
    $temp $temp-save Arena:restore
}

