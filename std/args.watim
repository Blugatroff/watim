import "./byte-slice.watim" as ByteSlice
import "./io.watim" as IO
import "./arena.watim" as Arena
import "./array.watim" as Array
import "./core.watim" as CORE

extern "wasi_snapshot_preview1" "args_sizes_get" fn args_sizes_get(number: .i32, size: .i32) -> i32
extern "wasi_snapshot_preview1" "args_get" fn args_get(argv: ..i32, argv_buf: .i32) -> i32

fn get-args(arena: .Arena:Arena) -> Array:Array<ByteSlice:T> {
    local arg_number_ptr: CORE:I32
    local arg_sizes_ptr: CORE:I32
    &arg_number_ptr.inner &arg_sizes_ptr.inner args_sizes_get IO:check
    $arg_number_ptr.inner @arg_number
    $arg_sizes_ptr.inner @arg_sizes
    $arena Arena:temp @temp @temp-save
    $arena $arg_sizes Arena:alloc-bytes @arg_buf
    $temp $arg_number Arena:alloc-many<.i32> @ptr_buf

    $ptr_buf $arg_buf args_get IO:check

    Array:new<ByteSlice:T> @strings

    0 @i
    loop {
        $i $arg_number ge if { break }
        $ptr_buf $i 4 * + ~ !.i32 @ptr
        $arena &strings 
        $ptr $ptr cstr-len ByteSlice:new
        Array:push<ByteSlice:T>
        $i 1 + #i
    }
    $temp $temp-save Arena:restore
    $strings
}

fn cstr-len(ptr: .i32) -> i32 {
    local i: i32
    loop {
        $ptr load8 0 = if { $i break }
        $i 1 + #i
        $ptr 1 + #ptr
    }
}

