import "./core.watim" as CORE
import "./result.watim" as Result (Result)
extern "wasi_snapshot_preview1" "fd_read" fn raw_read(file: i32, iovs: .Iov, iovs_count: i32, read: .i32) -> i32
extern "wasi_snapshot_preview1" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32

variant Error {
    case Noent
    case Raw -> i32
}
fn error-from-raw(code: i32) -> Error { block {
    $code 44 = if { make Error.Noent break }
    $code make Error.Raw
} }
fn error-to-raw(error: Error) -> i32 {
    $error match Error {
        case Noent -> { 44 }
        case Raw -> {}
    }
}

fn check(code: i32) {
    $code 0 /= if {
        2 2 "Error Code: " write-all drop $code print drop
        2 "\n" write-all drop
        0 0 / drop
        1 CORE:exit
    }
}

fn unwrap<T>(res: Result<T, Error>) -> T {
    $res match Result {
        case Success -> {}
        case Error -> {
            error-to-raw @code
            2 "Error Code: " write-all check
            2 $code print check
            2 "\n" write-all check
            $code CORE:exit
            CORE:unreachable<T>
        }
    }
}

fn abort(msg-ptr: .i8, msg-len: i32) {
    2 $msg-ptr $msg-len write-all check
    1 CORE:exit
}

struct Iov {
    ptr: .i8
    len: i32
}

fn write(fd: i32, pt: .i8, len: i32) -> i32, i32 {
    uninit<Iov> @space
    uninit<CORE:I32> @writ
    0 #writ.inner
    $pt #space.ptr
    $len #space.len
    $fd &space 1 &writ.inner raw_write
    $writ.inner flip
}

fn write-all-inner(fd: i32, pt: .i8, len: i32) -> i32, i32 {
    $fd $pt $len write @code @written
    $code 0 = if {
        $written $len = if {
            $written $code
        } else {
            $fd
            $pt $written +
            $len $written -
            write-all-inner
            flip $written + flip
        }
    } else {
        0 $code
    }
}

fn write-all(fd: i32, pt: .i8, len: i32) -> i32 {
    $fd $pt $len write-all-inner flip drop
}

fn write-byte(file: i32, b: i8) -> i32 {
    $b !i32 @buf
    $file &buf !.i8 1 write-all
}

fn newline(fd: i32) {
    $fd 10 !i8 write-byte check
}

fn read(file: i32, buf_addr: .i8, buf_size: i32) -> i32, i32 {
    uninit<Iov> @iov
    0 @read
    $buf_addr #iov.ptr
    $buf_size #iov.len
    $file &iov 1 &read raw_read
    $read flip
}

fn read-all(file: i32, buf-addr: .i8, buf-size: i32) -> i32, i32 {
    0 @read-total
    loop {
        $file $buf-addr $read-total + $buf-size $read-total - read @code @read
        $code 0 = if {
            $read-total $read + #read-total
            $read-total $buf-size ge
            $read 0 = or if {
                $read-total 0 break
            }
        } else {
            $read-total $code break
        }
    }
}

fn print-ref(fd: i32, n: .i32) -> i32 {
    $fd $n ~ print
}
fn print(fd: i32, n: i32) -> i32 {
    uninit<[i64, i64, i64, i64]> @buf-reversed &buf-reversed !.i8 @buf-reversed
    $fd $buf-reversed $n $buf-reversed print-i32-into write-all
}
fn print-i32-into(n: i32, buf-reversed: .i8) -> i32 {
    uninit<[i64, i64, i64, i64]> @buf &buf !.i8 @buf
    0 @l
    $n 0 = if {
        1 #l // length = 1
        "0" drop ~ =>buf // put '0' in buf
    } else {
        loop {
            $n 0 = if { break }
            $buf $l +
            $n 10 % // rightmost digit
            48 + !i8 // + ascii 'a'
            store
            $n 10 / #n // shift right in decimal
            $l 1 + #l
        }
    }
    0 @i
    loop {
        $buf-reversed $i +
        $buf $l 1 - $i - + ~
        store
        $i 1 + #i
        $i $l = if { break }
    }
    $l
}

fn write-escaped(fd: i32, ptr: .i8, len: i32) -> i32 {
    0 !i8 @escaped-char
    0 @i
    loop {
        $i $len = if { 0 break }
        $fd &escaped-char $ptr $i + ~ &escaped-char CORE:escape write-all @code
        $code 0 /= if { $code break }
        $i 1 + #i
    }
}

