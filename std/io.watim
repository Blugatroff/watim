import "./core.watim" as CORE

extern "wasi_unstable" "fd_read" fn raw_read(file: i32, iovs: .i32, iovs_count: i32, read: .i32) -> i32
extern "wasi_unstable" "fd_write" fn raw_write(file: i32, iovs: .Iov, iovs_count: i32, written: .i32) -> i32

struct Iov {
    ptr: .i32
    len: i32
}

fn write(fd: i32, pt: .i32, len: i32) -> i32, i32 {
    memory space: Iov 8 4;
    memory writ: i32 4 4;
    local code: i32
    $writ 0 store32
    $space.ptr $pt store32
    $space.len $len store32
    $fd $space 1 $writ raw_write #code
    $writ load32 $code
}

fn write_all_inner(fd: i32, pt: .i32, len: i32) -> i32, i32 {
    local written: i32
    local code: i32
    $fd $pt $len write #code #written
    $code 0 = if {
        $written $len = if {
            $written $code
        } else {
            $fd 
            $pt $written + 
            $len $written - 
            write_all_inner
            CORE:flip $written + CORE:flip
        }
    } else {
        0 $code
    }
}

fn write_all(fd: i32, pt: .i32, len: i32) -> i32 {
    $fd $pt $len write_all_inner CORE:flip drop
}

fn write_byte(file: i32, b: i32) -> i32 {
    memory buf: i32 1;
    $buf $b store8
    $file $buf 1 write_all
}

fn read(file: i32, buf_addr: .i32, buf_size: i32) -> i32, i32 {
    memory space: i32 8 4;
    memory writ: i32 4 4;
    local code: i32
    $space $buf_addr !i32 store32 
    $space !i32 4 + !.i32 $buf_size store32 
    $file $space 1 $writ raw_read #code
    $writ load32 $code
}

fn print_i64_fallible(n: i64) -> i32 {
    memory buf: i32 24;
    memory buf_reversed: i32 24;
    local l: i32
    local i: i32
    0 #l
    $n 0 !i64 = if {
        1 #l // length = 1
        $buf 48 store8 // put '0' in buf
    } else {
        loop {
            $n 0 !i64 = if { break }
            $buf !i32 $l + !.i32
            $n 10 !i64 % !i32 // rightmost digit
            48 + // + ascii 'a'
            store8
            $n 10 !i64 / #n // shift right in decimal
            $l 1 + #l
        }
    }
    0 #i
    loop {
        $buf_reversed !i32 $i + !.i32
        $buf !i32 $l 1 - $i - + !.i32 load8
        store8
        $i 1 + #i
        $i $l = if { break }
    }
    1 $buf_reversed $l write_all
}

fn print_i64(n: i64) {
    $n print_i64_fallible check
}

fn print(n: i32) {
    $n !i64 print_i64
}

fn check(code: i32) {
    $code 0 /= if {
        1 "Error Code: " write_all drop $code !i64 print_i64_fallible drop
        1 10 write_byte drop
        1 CORE:exit
    }
}

