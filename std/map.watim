import "./maybe.watim" as Maybe (Maybe(Some, None))
import "./io.watim" as IO
import "./byte-slice.watim" as ByteSlice (ByteSlice)
import "./array.watim" as Array (Array, ValueAtIndex)
import "./arena.watim" as Arena (Arena)
import "./fmt.watim" as Fmt (Formatter)

struct Map<K, V> {
    keys: Array<K>
    values: Array<V>
    compare: (.K, .K -> bool)
}
fn eq<K, V>(value-compare: (.V, .V -> bool), a: .Map<K, V>, b: .Map<K, V>) -> bool {
    0 $a.compare $b.compare = !i32 / drop

    $a.compare &a.keys &b.keys Array:eq<K> if {
        $value-compare &a.values &b.values Array:eq<V>
    } else {
        0 1 =
    }
}
fn new<K, V>(compare: (.K, .K -> bool)) -> Map<K, V> {
    Array:new<K> Array:new<V> $compare make Map<K, V>
}
fn new-with-capacity<K, V>(arena: .Arena, compare: (.K, .K -> bool), cap: i32) -> Map<K, V> {
    $arena $cap Array:new-with-capacity<K>
    $arena $cap Array:new-with-capacity<V>
    $compare make Map<K, V>
}
fn clone<K, V>(arena: .Arena, self: .Map<K, V>) -> Map<K, V> {
    $arena &self.keys Array:clone<K>
    $arena &self.values Array:clone<V>
    $self.compare make Map<K, V>
}
fn insert<K, V>(arena: .Arena, self: .Map<K, V>, key: K, value: V) -> Maybe<V> {
    0 @i
    loop {
        $i $self.keys.len = if { 
            $arena &self.keys $key Array:push<K>
            $arena &self.values $value Array:push<V>
            make Maybe<V>.None
            break
        }
        $self $i get-key<K, V> &key $self.compare (.K, .K -> bool) if {
            &self.values $i $value Array:set<V>
            make Maybe<V>.Some
            break
        }
        $i 1 + #i
    }
}
fn insert-assert-no-alloc<K, V>(self: .Map<K, V>, key: K, value: V) -> Maybe<V> {
    0 @i
    loop {
        $i $self.keys.len = if { 
            &self.keys $key Array:push-assert-no-alloc<K>
            &self.values $value Array:push-assert-no-alloc<V>
            make Maybe<V>.None
            break
        }
        $self $i get-key<K, V> &key $self.compare (.K, .K -> bool) if {
            &self.values $i $value Array:set<V>
            make Maybe<V>.Some
            break
        }
        $i 1 + #i
    }
}
fn remove<K, V>(self: .Map<K, V>, key: .K) -> Maybe<V> {
    $self $key get-index<K, V> match {
        case None -> { make Maybe<V>.None }
        case Some -> {
            @index
            &self.keys $index Array:remove<K> drop
            &self.values $index Array:remove<V> make Maybe<V>.Some
        }
    }
}
fn get<K, V>(self: .Map<K, V>, key: .K) -> Maybe<.V> {
    $self $key get-index<K, V> match {
        case None -> { make Maybe<.V>.None }
        case Some -> { $self flip get-value<K, V> make Maybe<.V>.Some }
    }
}
fn get-index<K, V>(self: .Map<K, V>, key: .K) -> Maybe<i32> {
    0 @i
    loop {
        $i $self size<K, V> = if { make Maybe<i32>.None break }
        $self $i get-key<K, V> $key $self.compare (.K, .K -> bool) if {
            $i make Maybe<i32>.Some break
        }
        $i 1 + #i
    }
}
fn get-or-insert-default<K, V>(arena: .Arena, self: .Map<K, V>, default: V, key: K) -> .V {
    $self &key get<K, V> match {
        case None -> {
            $arena $self $key $default insert<K, V> drop
            $self &key get<K, V> Maybe:assert-some<_>
        }
        case Some -> {}
    }
}
fn size<K, V>(self: .Map<K, V>) -> i32 {
    $self.keys.len
}
fn get-key<K, V>(self: .Map<K, V>, index: i32) -> .K {
    &self.keys $index Array:get<K>
}
fn get-value<K, V>(self: .Map<K, V>, index: i32) -> .V {
    &self.values $index Array:get<V>
}
fn format-multi-line<K, V>(fmt: .Formatter, format-key: (.Formatter, .K ->), format-value: (.Formatter, .V ->), self: .Map<K, V>) { block {
    $self.keys.len 0 = if {
        $fmt "(Map)" Fmt:write
        break
    }
    $fmt "(Map\n" Fmt:write
    $fmt Fmt:indent
    0 @i
    loop {
        $i $self.keys.len = if { break }
        $fmt Fmt:write-indent
        $fmt &self.keys $i Array:get<K> $format-key (.Formatter, .K ->)
        $fmt "=" Fmt:write
        $fmt &self.values $i Array:get<V> $format-value (.Formatter, .V ->)
        $i 1 + #i
        $i $self.keys.len /= if {
            $fmt ",\n" Fmt:write
        }
    }
    $fmt Fmt:dedent
    $fmt ")" Fmt:write
} }

fn get-ba<V>(self: .Map<Array<i8>, V>, key-ptr: .i8, key-len: i32) -> Maybe<.V> {
    $key-ptr $key-len Array:init-no-copy<_> @key
    $self &key get<Array<i8>, V>
}
fn get-bs<V>(self: .Map<ByteSlice, V>, key-ptr: .i8, key-len: i32) -> Maybe<.V> {
    $key-ptr $key-len make ByteSlice @key
    $self &key get<ByteSlice, V>
}
fn get-bs-index<V>(self: .Map<ByteSlice, V>, key-ptr: .i8, key-len: i32) -> Maybe<i32> {
    $key-ptr $key-len make ByteSlice @key
    $self &key get-index<ByteSlice, V>
}
fn get-bs-with-index<V>(self: .Map<ByteSlice, V>, key-ptr: .i8, key-len: i32) -> Maybe<ValueAtIndex<.V>> {
    $key-ptr $key-len make ByteSlice @key
    $self &key get-index<ByteSlice, V> match {
        case None -> { make Maybe<ValueAtIndex<.V>>.None }
        case Some -> {
            @index
            &self.values $index Array:get<V> $index
            make ValueAtIndex<.V> make Maybe<ValueAtIndex<.V>>.Some
        }
    }
}
fn remove-bs<V>(self: .Map<ByteSlice, V>, key-ptr: .i8, key-len: i32) -> Maybe<V> {
    $key-ptr $key-len make ByteSlice @key
    $self &key remove<ByteSlice, V>
}

