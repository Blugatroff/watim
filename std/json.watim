import "./bytes.watim" as Bytes
import "./result.watim" as Result (Result)
import "./arena.watim" as Arena (Arena)
import "./array.watim" as Array (Array)
import "./byte-array.watim" as ByteArray (ByteArray)
import "./map.watim" as Map (Map)

variant Value {
    case Number -> i32 // watim doesn't support floats :<
    case String -> ByteArray
    case Array -> Array<Value>
    case Object -> Map<ByteArray, Value>
    case Null
}
fn Value-eq(a: .Value, b: .Value) -> bool {
    $a match {
        case Number -> { ~ $b match {
            case Number -> { ~ = }
            case _ -> { drop drop 0 1 = }
        } }
        case String -> { $b match {
            case String -> { ByteArray:eq }
            case _ -> { drop drop 0 1 = }
        } }
        case Array -> { \Value-eq flip $b match {
            case Array -> { Array:eq<Value> }
            case _ -> { drop drop drop 0 1 = }
        } }
        case Object -> { \Value-eq flip $b match {
            case Object -> { Map:eq<ByteArray, Value> }
            case _ -> { drop drop drop 0 1 = }
        } }
        case Null -> { $b match {
            case Null -> { 1 1 = }
            case _ -> { drop 0 1 = }
        } }
    }
}

struct ParseError {}

fn advance(ptr: ..i8, len: .i32, n: i32) {
    $ptr ~ $n + =>ptr
    $len ~ $n - =>len
}

fn parse(arena: .Arena, ptr: .i8, len: i32) -> Result<Value, ParseError> { block {
    $arena &ptr &len parse-value match {
        case Success -> {}
        case _ -> { break }
    }
    make Result<Value, ParseError>.Success
} }

fn whitespace(ptr: ..i8, len: .i32) {
    loop {
        $len ~ 0 = if { break }
        $ptr ~~ " " drop ~ /=
        $ptr ~~ "\n" drop ~ /= and
        $ptr ~~ "\t" drop ~ /= and
        if { break }
        $ptr ~ 1 + =>ptr
        $len ~ 1 - =>len
    }
}

fn parse-value(arena: .Arena, ptr: ..i8, len: .i32) -> Result<Value, ParseError> { block {
    $ptr $len whitespace
    $len ~ 0 = if {
        make ParseError make Result<Value, ParseError>.Error break
    }
    $ptr ~ $len ~ "null" Bytes:is-prefix if {
        $ptr $len 4 advance
        $ptr $len whitespace
        make Value.Null make Result<Value, ParseError>.Success break
    }
    $ptr ~~ "-" drop ~ = if {
        $ptr $len 1 advance
        $arena $ptr $len parse-number match {
            case Error -> { make Result<Value, ParseError>.Error break }
            case Success -> { 0 flip - }
        }
        $ptr $len whitespace
        make Value.Number make Result<Value, ParseError>.Success break
    }
    $ptr ~~ Bytes:is-ascii-digit if {
        $arena $ptr $len parse-number match {
            case Error -> { make Result<Value, ParseError>.Error break }
            case Success -> { make Value.Number }
        }
        $ptr $len whitespace
        make Result<Value, ParseError>.Success break
    }
    $ptr ~~ "\"" drop ~ = if {
        $arena $ptr $len parse-string match {
            case Error -> { make Result<Value, ParseError>.Error break }
            case Success -> { make Value.String }
        }
        $ptr $len whitespace
        make Result<Value, ParseError>.Success break
    }
    $ptr ~~ "[" drop ~ = if {
        $arena $ptr $len parse-array match {
            case Error -> { make Result<Value, ParseError>.Error break }
            case Success -> { make Value.Array }
        }
        $ptr $len whitespace
        make Result<Value, ParseError>.Success break
    }
    $ptr ~~ "{" drop ~ = if {
        $arena $ptr $len parse-object match {
            case Error -> { make Result<Value, ParseError>.Error break }
            case Success -> { make Value.Object }
        }
        $ptr $len whitespace
        make Result<Value, ParseError>.Success break
    }
    make ParseError make Result<Value, ParseError>.Error
} }

fn parse-number(arena: .Arena, ptr: ..i8, len: .i32) -> Result<i32, ParseError> { block {
    $len ~ 0 = if { make ParseError make Result<i32, ParseError>.Error break }

    0 @n
    loop {
        $ptr ~~ !i32 @d
        $d 48 ge $d 58 le and if {
            $n $d 48 - + #n
        } else {
            make ParseError make Result<i32, ParseError>.Error break
        }
        $ptr $len 1 advance
        $len ~ 0 = if { $n make Result<i32, ParseError>.Success break }
        $ptr ~~ !i32 @d
        $d 48 lt $d 58 gt or if { $n make Result<i32, ParseError>.Success break }
        $n 10 * #n
    }
} }

fn parse-string(arena: .Arena, ptr: ..i8, len: .i32) -> Result<ByteArray, ParseError> { block {
    $len ~ 0 = if { make ParseError make Result<ByteArray, ParseError>.Error break }
    $ptr ~~ "\"" drop ~ /= if { make ParseError make Result<ByteArray, ParseError>.Error break }

    ByteArray:new @out

    $ptr $len 1 advance
    loop {
        $len ~ 0 = if { make ParseError make Result<ByteArray, ParseError>.Error break }
        $ptr ~~ "\"" drop ~ = if {
            $ptr $len 1 advance
            $out make Result<ByteArray, ParseError>.Success break
        }
        $ptr ~~ "\\" drop ~ = if {
            $ptr $len 1 advance
            $len ~ 0 = if { make ParseError make Result<ByteArray, ParseError>.Error break }
            $ptr ~~ @escape
            block {
                $escape "\"" drop ~ = if { $arena &out "\"" ByteArray:push 1 1 = break }
                $escape "\\" drop ~ = if { $arena &out "\\" ByteArray:push 1 1 = break }
                $escape "b" drop ~ = if { $arena &out 8 !i8 ByteArray:push-byte 1 1 = break }
                $escape "f" drop ~ = if { $arena &out 12 !i8 ByteArray:push-byte 1 1 = break }
                $escape "n" drop ~ = if { $arena &out "\n" ByteArray:push 1 1 = break }
                $escape "r" drop ~ = if { $arena &out "\r" ByteArray:push 1 1 = break }
                $escape "t" drop ~ = if { $arena &out "\t" ByteArray:push 1 1 = break }
                $escape "u" drop ~ = if { 0 0 / drop }
                0 1 =
            }
            $ptr $len 1 advance
            not if {
                make ParseError make Result<ByteArray, ParseError>.Error break
            }
        } else {
            $arena &out $ptr ~~ ByteArray:push-byte
            $ptr $len 1 advance
        }
    }
} }

fn parse-array(arena: .Arena, ptr: ..i8, len: .i32) -> Result<Array<Value>, ParseError> { block {
    $len ~ 0 = if { make ParseError make Result<Array<Value>, ParseError>.Error break }
    $ptr ~~ "[" drop ~ /= if { make ParseError make Result<Array<Value>, ParseError>.Error break }
    $ptr $len 1 advance
    $ptr $len whitespace
    $len ~ 0 = if { make ParseError make Result<Array<Value>, ParseError>.Error break }
    Array:new<Value> @items
    $ptr ~~ "]" drop ~ = if {
        $ptr $len 1 advance
        $items make Result<Array<Value>, ParseError>.Success break
    }
    loop {
        $arena $ptr $len parse-value match {
            case Error -> { make Result<Array<Value>, ParseError>.Error break }
            case Success -> {}
        }
        $arena flip &items flip Array:push<Value>
        $len ~ 0 = if { make ParseError make Result<Array<Value>, ParseError>.Error break }
        $ptr ~~ "]" drop ~ = if {
            $ptr $len 1 advance
            $items make Result<Array<Value>, ParseError>.Success break
        }
        $ptr ~~ "," drop ~ /= if {
            make ParseError make Result<Array<Value>, ParseError>.Error break
        }
        $ptr $len 1 advance
    }
} }

fn parse-object(arena: .Arena, ptr: ..i8, len: .i32) -> Result<Map<ByteArray, Value>, ParseError> { block {
    $len ~ 0 = if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
    $ptr ~~ "{" drop ~ /= if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
    $ptr $len 1 advance
    $ptr $len whitespace
    $len ~ 0 = if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
    \ByteArray:eq Map:new<ByteArray, Value> @entries
    $ptr ~~ "}" drop ~ = if {
        $ptr $len 1 advance
        $entries make Result<Map<ByteArray, Value>, ParseError>.Success break
    }
    loop {
        $ptr $len whitespace
        $arena $ptr $len parse-string match {
            case Error -> { make Result<Map<ByteArray, Value>, ParseError>.Error break }
            case Success -> {}
        } @key
        $ptr $len whitespace
        $len ~ 0 = if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
        $ptr ~~ ":" drop ~ /= if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
        $ptr $len 1 advance
        $arena $ptr $len parse-value match {
            case Error -> { make Result<Map<ByteArray, Value>, ParseError>.Error break }
            case Success -> {}
        } @value
        $arena &entries $key $value Map:insert<ByteArray, Value> drop
        $len ~ 0 = if { make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break }
        $ptr ~~ "}" drop ~ = if {
            $ptr $len 1 advance
            $entries make Result<Map<ByteArray, Value>, ParseError>.Success break
        }
        $ptr ~~ "," drop ~ /= if {
            make ParseError make Result<Map<ByteArray, Value>, ParseError>.Error break
        }
        $ptr $len 1 advance
    }
} }

