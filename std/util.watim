import "./core.watim" as CORE
import "./io.watim" as IO
import "./fmt.watim" as FMT (Formatter)
import "./byte-slice.watim" as ByteSlice (ByteSlice)
import "./array.watim" as Array
import "./arena.watim" as Arena (Arena)

fn parse(pt: .i8, len: i32) -> i32 {
    $pt @original-ptr
    $len @original-len
    0 @n
    loop {
        $pt ~ !i32 @d
        $d 48 ge $d 58 le and if { // 48 is ascii '0'
            $n $d 48 - + #n
        } else {
            1 "Failed to parse: '" IO:write-all IO:check
            1 $original-ptr $original-len IO:write-all IO:check
            1 "'" IO:write-all IO:check
            1 10 !i8 IO:write-byte IO:check
            1 CORE:exit
        }
        $pt 1 + #pt // advance pointer
        $len 1 - #len // reduce length
        $len 0 = if { $n break }
        $n 10 * #n
    }
}

fn i32-format(formatter: .Formatter, self: i32) {
    uninit<[i64, i64, i64, i64]> @buf &buf !.i8 @buf
    $formatter $buf $self $buf IO:print-i32-into FMT:write
}

fn i32-format-ref(formatter: .Formatter, self: .i32) {
    $formatter $self ~ i32-format
}

fn bool-format(formatter: .Formatter, self: bool) {
    $formatter $self if { "True" } else { "False" } FMT:write
}

fn split-bytes(arena: .Arena, bytes: ByteSlice, del: i8) -> Array:Array<ByteSlice> {
    Array:new<ByteSlice> @splits
    loop {
        $bytes.len 0 = if { break }
        $bytes $del ByteSlice:find-byte if {
            @index
            $arena &splits &bytes 0 $index ByteSlice:slice Array:push<ByteSlice>
            $bytes.ptr $index + 1 + #bytes.ptr
            $bytes.len $index - 1 - #bytes.len
        } else {
            drop
            $arena &splits $bytes Array:push<ByteSlice>
            break
        }
    }
    $splits
}

