import "./core.watim" as CORE
import "./io.watim" as IO
import "./arena.watim" as Arena
import "./bytes.watim" as Bytes

struct T {
    ptr: .i32
    len: i32
}
fn new(ptr: .i32, len: i32) -> T {
    local self: T
    $ptr #self.ptr
    $len #self.len
    $self
}
fn unpack(self: T) -> .i32, i32 {
    $self.ptr $self.len
}
fn empty() -> T {
    0 !.i32 0 new
}
fn copy(arena: .Arena:Arena, self: T) -> T {
    $arena $self.ptr $self.len Arena:push-bytes $self.len new
}
fn get-byte(self: .T, index: i32) -> i32 {
    $index $self.len ge if { 
        1 "ByteArray:get-byte Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index + load8
}
fn slice(self: .T, index: i32, len: i32) -> T {
    $index $len + $self.len gt if { 
        1 "ByteArray:slice Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index + $len new
}
fn eq(self: T, other: T) -> bool {
    $self unpack $other unpack Bytes:eq
}
fn eq-by-ref(self: .T, other: .T) -> bool {
    $self ~ unpack $other ~ unpack Bytes:eq
}
fn is-empty(self: .T) -> bool {
    $self.len 0 =
}
fn is-not-empty(self: .T) -> bool {
    $self.len 0 /=
}
fn drop(self: T, n: i32) -> T {
    $n $self.len CORE:min #n
    $self.ptr $n + 
    $self.len $n - 
    new
}
fn drop-end(self: T, n: i32) -> T {
    $n $self.len CORE:min #n
    $self.ptr
    $self.len $n -
    new
}
fn find-byte(self: T, b: i32) -> i32, bool {
    0 @i
    loop {
        $self.len $i = if { 0 not 0 1 = break }
        $self.ptr $i + load8 $b = if {
            $i 1 1 = break
        }
        $i 1 + #i
    }
}
fn find-bytes(self: T, ptr: .i32, len: i32) -> i32, bool { block {
    $len 0 = if {
        0 1 1 = break
    }
    0 @i
    loop {
        $i $len + $self.len gt if { 0 not 0 1 = break }
        $self.ptr $i + load8 $ptr load8 = if {
            $self.ptr $i + $len $ptr $len Bytes:eq if {
                $i 1 1 = break
            }
        }
        $i 1 + #i
    }
} }
fn find-slice(self: T, slice: T) -> i32, bool {
    $self $slice unpack find-bytes
}
fn trim-start-with(self: T, f: (i32 -> bool)) -> T {
    loop {
        $self.len 0 = if { break }
        $self.ptr load8 $f -> not if { break }
        $self.len 1 - #self.len
        $self.ptr 1 + #self.ptr
    }
    $self
}
fn trim-end-with(self: T, f: (i32 -> bool)) -> T {
    loop {
        $self.len 0 = if { break }
        $self.ptr $self.len 1 - + load8 $f -> not if { break }
        $self.len 1 - #self.len
    }
    $self
}
fn trim-with(self: T, f: (i32 -> bool)) -> T {
    $self $f trim-start-with $f trim-end-with
}
fn write-unescaped(fd: i32, self: .T) -> i32 {
    $fd $self.ptr $self.len IO:write-all
}
fn unescape(arena: .Arena:Arena, self: T) -> T {
    // TODO: actually unescape instead of assuming nothing is escaped
    $arena $self copy
}

