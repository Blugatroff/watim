extern "wasi_snapshot_preview1" "proc_exit" fn raw_exit(code: i32)

struct I32 { inner: i32 }

fn dup<T>(a: T) -> T, T {
    $a $a
}

fn max(a: i32, b: i32) -> i32 {
    $a $b gt if { $a } else { $b }
}

fn min(a: i32, b: i32) -> i32 {
    $a $b lt if { $a } else { $b }
}

fn align-to(n: i32, to: i32) -> i32 {
    $n $to $n $to % - $n $to % 0 gt !i32 * +
}

fn copy<T>(a: .T, b: .T, len: i32) {
    $b !.i32 $a !.i32 $len sizeof(T) * mem-copy
}

fn copy-bytes(a: .i32, b: .i32, len: i32) {
    $len 0 /= if {
        $b !.i32 $a !.i32 $len mem-copy
    }
}

fn bytes-eq(a: .i32, b: .i32, len: i32) -> bool {
    0 @i
    loop {
        $i $len = if { 1 1 = break }
        $a $i + load8 $b $i + load8 /= if { 0 1 = break }
        $i 1 + #i
    }
}

fn exit(code: i32) {
    $code raw_exit
}

fn unreachable<T>() -> T {
    0 0 / drop
    uninit<T>
}

fn i32-to-str-hex(buf: .i8, n: i32) -> i32 {
    "0123456789ABCDEF" drop !.i8 @alphabet
    0 !i64 @buf-reversed &buf-reversed !.i8 @buf-reversed
    0 @l
    $n 0 = if {
        1 #l
        $alphabet ~ =>buf-reversed // put '0' in buf
    } else {
        loop {
            $n 0 = if { break }
            $buf-reversed $l +
            $n 16 % // rightmost digit
            $alphabet flip + ~
            store
            $n 16 / #n // shift right in hex
            $l 1 + #l
        }
    }
    $buf     $buf-reversed $l 1 - + ~ store
    $buf 1 + $buf-reversed $l 2 - + ~ store
    $buf 2 + $buf-reversed $l 3 - + ~ store
    $buf 3 + $buf-reversed $l 4 - + ~ store

    $buf 4 + $buf-reversed $l 5 - + ~ store
    $buf 5 + $buf-reversed $l 6 - + ~ store
    $buf 6 + $buf-reversed $l 7 - + ~ store
    $buf 7 + $buf-reversed $l 8 - + ~ store

    $l
}

fn i64-to-str-hex(buf: .i8, n: i64) -> i32 {
    "0123456789ABCDEF" drop !.i8 @alphabet
    uninit<[i64, i64]> @buf-reversed &buf-reversed !.i8 @buf-reversed
    0 @l
    $n 0 !i64 = if {
        1 #l
        $alphabet ~ =>buf-reversed // put '0' in buf
    } else {
        loop {
            $n 0 !i64 = if { break }
            $buf-reversed $l +
            $n 16 !i64 % !i32 // rightmost digit
            $alphabet flip + ~
            store
            $n 16 !i64 / #n // shift right in hex
            $l 1 + #l
        }
    }

    0 @i
    loop {
        $buf $i +
        $buf-reversed $l 1 - $i - + ~
        store
        $i 1 + #i
        $i $l = if { break }
    }

    $l
}

fn escape(char: i32, dest: .i32) -> i32 {
    "0123456789abcdef" @hex-digits-len @hex-digits-ptr
    loop {
        $char "\t" drop load8 = if { "\\t" $dest flip copy-bytes 2 break }
        $char "\r" drop load8 = if { "\\r" $dest flip copy-bytes 2 break }
        $char "\n" drop load8 = if { "\\n" $dest flip copy-bytes 2 break }
        $char "\\" drop load8 = if { "\\\\" $dest flip copy-bytes 2 break }
        $char "\"" drop load8 = if { "\\\"" $dest flip copy-bytes 2 break}
        $char 32 ge $char 126 le and if { $dest $char store8 1 break }
        "\\x" $dest flip copy-bytes
        $dest 2 + #dest
        $dest $hex-digits-ptr $char 4 rotr 255 and + load8 store8
        $dest 1 + #dest
        $dest $hex-digits-ptr $char 255 and + load8 store8
        4 break
    }
}

fn clear(ptr: .i32, len: i32) {
    $ptr 0 $len mem-fill
}

