extern "wasi_snapshot_preview1" "proc_exit" fn raw_exit(code: i32)

struct I32 { inner: i32 }

fn dup<T>(a: T) -> T, T {
    $a $a
}

fn max(a: i32, b: i32) -> i32 {
    $a $b gt if { $a } else { $b }
}

fn min(a: i32, b: i32) -> i32 {
    $a $b lt if { $a } else { $b }
}

fn align-to(n: i32, to: i32) -> i32 {
    $n $to $n $to % - $n $to % 0 gt !i32 * +
}

fn copy<T>(a: .T, b: .T, len: i32) {
    $b !.i32 $a !.i32 $len sizeof(T) * mem-copy
}

fn copy-bytes(a: .i32, b: .i32, len: i32) {
    $b !.i32 $a !.i32 $len mem-copy
}

fn exit(code: i32) {
    $code raw_exit
}

fn escape(char: i32, dest: .i32) -> i32 {
    local hex-digits-ptr: .i32
    local hex-digits-len: i32
    "0123456789abcdef" #hex-digits-len #hex-digits-ptr
    loop {
        $char "\t" drop load8 = if { "\\t" $dest flip copy-bytes 2 break }
        $char "\r" drop load8 = if { "\\r" $dest flip copy-bytes 2 break }
        $char "\n" drop load8 = if { "\\n" $dest flip copy-bytes 2 break }
        $char "\\" drop load8 = if { "\\\\" $dest flip copy-bytes 2 break }
        $char "\"" drop load8 = if { "\\\"" $dest flip copy-bytes 2 break}
        $char 32 ge $char 126 le and if { $dest $char store8 1 break }
        "\\x" $dest flip copy-bytes
        $dest 2 + #dest
        $dest $hex-digits-ptr $char 4 rotr 255 and + load8 store8
        $dest 1 + #dest
        $dest $hex-digits-ptr $char 255 and + load8 store8
        4 break
    }
}

fn clear(ptr: .i32, len: i32) {
    0 @i
    loop {
        $i $len = if { break }
        $ptr $i + 0 store8
        $i 1 + #i
    }
}

