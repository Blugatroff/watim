import "./core.watim" as CORE
import "./io.watim" as IO

fn str-eq(ptr-a: .i32, len-a: i32, ptr-b: .i32, len-b: i32) -> bool {
    local i: i32
    $len-a $len-b = if {
        loop {
            $i $len-a = if { 0 0 = break }
            $ptr-a $i + load8
            $ptr-b $i + load8
            /= if {
                0 1 = break
            }
            $i 1 + #i
        }
    } else {
        0 1 =
    }
}
fn str-find(ptr: .i32, len: i32, char: i32) -> i32, bool {
    local i: i32
    loop {
        $i $len = if {
            0 0 1 = break
        }
        $ptr $i + load8 $char = if {
            $i 0 0 = break
        }
        $i 1 + #i
    }
}
fn str-find-rev(ptr: .i32, len: i32, char: i32) -> i32, bool {
    local i: i32
    $len #i
    loop {
        $i 0 = if {
            0 0 1 = break
        }
        $ptr $i 1 - + load8 $char = if {
            $i 0 0 = break
        }
        $i 1 - #i
    }
}
fn str-is-prefix(ptr: .i32, len: i32, prefix-ptr: .i32, prefix-len: i32) -> bool {
    $ptr $len $prefix-len CORE:min $prefix-ptr $prefix-len str-eq
}
fn str-find-str(ptr: .i32, len: i32, target-ptr: .i32, target-len: i32) -> i32, bool {
    local prev-index: i32
    local char: i32
    local index: i32
    loop {
        $target-len 0 = if { 0 0 0 = break }
        $len 0 = if {
            0 $target-len 0 = break
        }
        $target-ptr load8 #char
        $ptr $len $char str-find if {
            #index
            $ptr $index + $len $index - 
            $target-ptr $target-len
            str-is-prefix if {
                $index $prev-index + 0 0 = break
            }
        } else {
            0 1 = break
        } 
        $ptr $index + 1 + #ptr
        $len $index - 1 - #len
        $index 1 + $prev-index + #prev-index
    }
}

struct Str {
    ptr: .i32
    len: i32
}
fn Str-new(ptr: .i32, len: i32) -> Str {
    local self: Str
    $ptr #self.ptr
    $len #self.len
    $self
}
fn Str-len(self: .Str) -> i32 {
    $self.len
}
fn Str-unpack(self: Str) -> .i32, i32 {
    $self.ptr $self.len
}
fn Str-get(self: .Str, index: i32) -> i32 {
    $index $self Str-len ge if { 
        1 "Str-get Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index + load8
}
fn Str-slice(self: .Str, index: i32, len: i32) -> Str {
    $index $len + $self Str-len gt if { 
        1 "Str-slice Index out of bounds\n" IO:write-all IO:check
        1 CORE:exit
    }
    $self.ptr $index + $len Str-new
}
fn Str-eq(self: .Str, other: .Str) -> bool {
    $self ~ Str-unpack $other ~ Str-unpack str-eq
}
fn Str-drop(self: Str, n: i32) -> Str {
    $n $self.len CORE:min #n
    $self.ptr $n + 
    $self.len $n - 
    Str-new
}
fn Str-drop-end(self: Str, n: i32) -> Str {
    $n $self.len CORE:min #n
    $self.ptr
    $self.len $n -
    Str-new
}
fn Str-empty() -> Str {
    0 !.i32 0 Str-new
}

