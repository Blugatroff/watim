import "./core.watim" as Core
import "./maybe.watim" as Maybe (Maybe)
import "./fmt.watim" as Fmt (Formatter)

variant List<T> {
    case Empty
    case Cons -> ListCons<T>
}
struct ListCons<T> {
    elem: T
    next: .List<T>
}

fn empty<T>() -> List<T> {
    make List<T>.Empty
}

fn cons<T>(elem: T, tail: .List<T>) -> List<T> {
    $elem $tail make ListCons<T> make List<T>.Cons
}

fn head<T>(list: .List<T>) -> Maybe<.T> {
    $list match {
        case Empty -> { make Maybe<.T>.None }
        case Cons -> { .elem make Maybe<.T>.Some }
    }
}

fn tail<T>(list: .List<T>) -> Maybe<List<T>> {
    $list match {
        case Empty -> { make Maybe<List<T>>.None }
        case Cons -> { .next~~ make Maybe<List<T>>.Some }
    }
}

fn is-empty<T>(list: .List<T>) -> bool {
    $list match {
        case Empty -> { 1 1 = }
        case _ -> { drop 0 1 = }
    }
}

fn last<T>(list: .List<T>) -> Maybe<.T> {
    make Maybe<.T>.None @last
    loop {
        $list match {
            case Empty -> { $last break }
            case Cons -> {
                @cons
                &cons.elem make Maybe<.T>.Some #last
                $cons.next #list
            }
        }
    }
}

fn all<T>(pred: (.T -> bool), list: .List<T>) -> bool {
    loop {
        $list match {
            case Empty -> { 1 1 = break }
            case Cons -> {
                @cons
                &cons.elem $pred -> not if {
                    0 1 = break
                }
                $cons.next #list
            }
        }
    }
}

fn skip<T>(list: .List<T>, n: i32) -> List<T> {
    $n 0 = if {
        $list ~
    } else {
        $list match {
            case Empty -> { make List<T>.Empty }
            case Cons -> { .next ~ $n 1 - skip<T> }
        }
    }
}

fn contains<T>(eq: (.T, .T -> bool), list: .List<T>, elem: .T) -> bool { block {
    loop {
        $list match {
            case Empty -> { 0 1 = break }
            case Cons -> {}
        } @cons
        &cons.elem $elem $eq -> if { 1 1 = break }
        $cons.next #list
    }
} }

fn len<T>(list: .List<T>) -> i32 {
    0 @len
    loop {
        $list match {
            case Empty -> { $len break }
            case Cons -> {
                .next ~ #list
                $len 1 + #len
            }
        }
    }
}

fn eq<T>(eq: (.T, .T -> bool), a: .List<T>, b: .List<T>) -> bool {
    loop {
        $a $b = if { 1 1 = break }
        $a match {
            case Empty -> {
                $b match {
                    case Empty -> { 1 1 = }
                    case Cons -> { drop 1 0 = }
                } break
            }
            case Cons -> {}
        }
        @acons
        $b match {
            case Empty -> { 0 1 = break }
            case Cons -> {}
        } @bcons
        &acons.elem &bcons.elem $eq -> if {
            $acons.next #a $bcons.next #b
        } else {
            0 1 = break
        }
    }
}

fn merge-sort<T>(less-eq: (.T, .T -> bool), list: .List<T>) {
    block {
        $list match {
            case Empty -> { break }
            case Cons -> {}
        }
        .next ~ match {
            case Empty -> { break }
            case _ -> { drop }
        }
        $list halve<T> @second-half @first-half
        $less-eq $first-half merge-sort<T>
        $less-eq $second-half merge-sort<T>
        $less-eq $first-half $second-half merge<T>
    }
}

fn merge<T>(less-eq: (.T, .T -> bool), a: .List<T>, b: .List<T>) {
    loop {
        $a match {
            case Empty -> {
                $b ~ =>a
                break
            }
            case Cons -> {}
        }
        @acons
        $b match {
            case Empty -> { break }
            case Cons -> {}
        } @bcons
        &acons.elem &bcons.elem $less-eq -> if {
            $b #a
            $acons.next $b #acons.next #b
        } else {
            $b ~ $a ~ =>b =>a
        }
    }
}

fn halve<T>(list: .List<T>) -> .List<T>, .List<T> { block {
    $list match {
        case Empty -> { $list $list break }
        case Cons -> {}
    } .next ~ @second-node
    $second-node match {
        case Empty -> { $second-node $list break }
        case _ -> { drop }
    }
    $list // first half
    $list @second-half
    $list @node-before-second-half
    loop {
        $list match {
            case Empty -> { $second-half $list break }
            case Cons -> {}
        }
        @cons
        $cons.next match {
            case Empty -> { $second-half $cons.next break }
            case Cons -> {}
        }
        .next ~ #list
        $second-half #node-before-second-half
        $second-half match {
            case Empty -> { Core:unreachable<.List<T>> Core:dup<_> break }
            case Cons -> {}
        } .next ~ #second-half
    } @empty
    $node-before-second-half match {
        case Cons -> { .next $empty store }
        case _ -> { drop }
    }
} }

fn format<T>(formatter: .Formatter, fmt-elem: (.Formatter, .T ->), self: .List<T>) { block {
    $self match {
        case Empty -> {
            $formatter "[]" Fmt:write
            break
        }
        case Cons -> { drop }
    }
    $formatter "[" Fmt:write
    loop {
        $self match {
            case Empty -> { break }
            case Cons -> {}
        } @cons
        $formatter &cons.elem $fmt-elem ->
        $cons.next match {
            case Empty -> { break }
            case _ -> {}
        } #self $formatter ", " Fmt:write
    }
    $formatter "]" Fmt:write
} }

fn format-multi-line<T>(formatter: .Formatter, fmt-elem: (.Formatter, .T ->), self: .List<T>) { block {
    $self match {
        case Empty -> {
            $formatter "[]" Fmt:write
            break
        }
        case Cons -> { drop }
    }
    $formatter "[\n" Fmt:write
    $formatter Fmt:indent
    loop {
        $self match {
            case Empty -> { break }
            case Cons -> {}
        } @cons
        $formatter Fmt:write-indent
        $formatter &cons.elem $fmt-elem ->
        $cons.next match {
            case Empty -> { break }
            case _ -> {}
        } #self $formatter ",\n" Fmt:write
    }
    $formatter Fmt:dedent
    $formatter "]" Fmt:write
} }

