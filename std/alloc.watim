import "./io.watim" as IO
import "./core.watim" as CORE

memory LOGGING: bool 4 4;
fn enable-logging() {
    $LOGGING 0 0 = store32
}
fn disable-logging() {
    $LOGGING 0 1 = store32
}
fn logging() -> bool {
    $LOGGING !.i32 load32 0 /=
}
memory ROOT: .i32 4 4;
memory BUF_SIZE: i32 4 4;
memory N_ALLOCS: i32 4 4;
fn root() -> .i32 {
    $ROOT load32
}
fn set-root(root: .i32) {
    $ROOT $root store32
}
fn buf-size() -> i32 {
    $BUF_SIZE load32
}
fn set-buf-size(size: i32) {
    $BUF_SIZE $size store32
}
fn n-allocs() -> i32 {
    $N_ALLOCS load32
}
fn set-n-allocs(n: i32) {
    $N_ALLOCS $n store32
}
fn inc-n-allocs() {
    n-allocs 1 + set-n-allocs 
}
fn dec-n-allocs() {
    n-allocs 1 - set-n-allocs 
}

fn init(mem: .i32, size: i32) {
    local next: .i32
    
    logging if { 1 "ALLOC RESET: \n" IO:write-all IO:check }
    $mem set-root
    $size set-buf-size
    // Set the next pointer of the init block to 0 since there is only this block. 
    0 !.i32 #next
    // Store the next pointer in the block.
    root $next !i32 store32
    // Store the size of the block.
    root 4 + $size store32
    // Mark this block as unused.
    root 8 + 0 store32
}

fn alloc(size: i32) -> .i32 {
    local prev: .i32
    local block: .i32
    local next: .i32
    local block-size: i32
    local new-block: .i32
    local n: i32
    local unused: bool
    
    $size 4 CORE:align-to #size
    root #prev
    root #block
    loop {
        $block load32 !.i32 #next
        $block 4 + load32 #block-size
        $block 8 + load32 0 = #unused

        // Test whether this block has enough space for the requested size + the BLOCK_SIZE.
        $block-size $size 12 + >= $unused and if {
            // Is there enough remaining space to split this block in two?
            $block-size $size 12 + 12 + >= if {
                // Calculate the position of the new block.
                $block 12 $size + + #new-block
                // Load the block after the one we are splitting.
                $block load32 #n
                // Set the next-pointer of the new block.
                $new-block $n store32
                // Set the size of the new block.
                $new-block 4 + $block-size 12 - $size - store32
                // Mark the new block as unused.
                $new-block 8 + 0 store32
            } else {
                0 !.i32 #new-block
            }
            $new-block !i32 0 = if {
                $block !..i32 $next store32
            } else {
                $block !..i32 $new-block store32

                // only adjust the size of the block if it was split
                $block 4 + $size 12 + store32
            }
            $block 8 + 1 store32

            root $prev = if {
                root 8 + load32 0 /= if { // if the root is used
                    $new-block !i32 0 = if {
                        root find-next-free set-root
                    } else {
                        $new-block set-root
                    }
                }
            } else {
                $prev $new-block !i32 store32
            }

            logging if { 
                1 "ALLOCED ptr: " IO:write-all IO:check 
                $block 12 + !i32 IO:print 
                1 " size: " IO:write-all IO:check 
                $size IO:print 1 "\n" IO:write-all IO:check 
            }
            inc-n-allocs
            $block 12 + break
        }
        $next !i32 0 = if {
            1 "ALLOC FAILED NO MEMORY size: " IO:write-all IO:check 
            $size IO:print 1 "\n" IO:write-all IO:check
            1 CORE:exit
            0 !.i32 break
        }
        $block #prev
        $next #block
    }
}

fn find-next-free(block: .i32) -> .i32 {
    loop {
        $block !i32 0 = if { 0 !.i32 break }
        $block 8 + load32 0 = if {
            $block break
        }
        $block !..i32 load32 #block
    }
}

fn find-prev-free(block: .i32) -> .i32 {
    local b: .i32
    root #b
    loop {
        $b load32 $block !i32 >= if {
            $b break
        }
        $b load32 !.i32 #b
    }
}

fn free(ptr: .i32) {
    local block: .i32
    local next: .i32
    local next-free: .i32
    local b: .i32
    local size: i32
    
    $ptr 12 - #block
    $block load32 !.i32 #next
    $next find-next-free #next-free
    $block 4 + load32 12 - #size

    logging if { 
        1 "FREEING ptr: " IO:write-all IO:check 
        $ptr !i32 IO:print 
        1 " size: " IO:write-all IO:check 
        $size IO:print 
        1 "\n" IO:write-all IO:check 
    }
    $block $next-free !i32 store32
    $block 8 + 0 store32

    root !i32 $block !i32 > if {
        $block set-root
    } else {
        $block root = // The root block is being freed
        root load32 0 = // The root has no next block
        and if {
            // The last block is being freed, therefore 
            // everything is free and we can simply reset.
            root buf-size init
        } else {
            $block find-prev-free !..i32 $block store32
       }
    }
    dec-n-allocs
    merge
}

fn merge() {
    local block: .i32
    local next: .i32
    local size: i32
    local used: bool
    local next-next: .i32
    local next-size: i32
    local next-used: bool

    root #block
    loop {
        $block !i32 0 = if { break }
        $block load32 !.i32 #next
        $next !i32 0 = if { break }
        
        $block 4 + load32 #size
        $block 8 + load32 0 /= #used
        $next load32 !.i32 #next-next
        $next 4 + load32 #next-size
        $next 8 + load32 0 /= #next-used

        $block $size + $next = $used not and $next-used not and if {
            $block $next-next !i32 store32
            $block 4 + $size $next-size + store32
        } else {
            $next #block
        }
    }
}

fn print-alloc-list(start: .i32) {
    local block: .i32
    local next: .i32
    local size: i32
    local used: bool
    $start #block
    1 "BLOCK LIST STARTING AT: " IO:write-all IO:check $block !i32 IO:print 1 10 IO:write-byte IO:check
    loop {
       $block !i32 0 = if { break }
        $block load32 !.i32 #next
        $block 4 + load32 #size
        $block 8 + load32 0 > #used

        1 9 IO:write-byte IO:check 
        $block !i32 IO:print
        1 ": " IO:write-all IO:check
        1 " " IO:write-all IO:check
        $next !i32 IO:print
        1 " " IO:write-all IO:check
        $size IO:print
        1 " " IO:write-all IO:check
        $used !i32 IO:print
        1 10 IO:write-byte IO:check 

        $next #block
    }
}

fn size-of-largest-free-block() -> i32 {
    local block: .i32
    local max: i32
    root #block
    loop {
        $block !i32 0 = if { break }
        $block 4 + load32 $max CORE:max #max 
        $block load32 !.i32 #block
    }
    $max
}

fn is-empty() -> bool {
    usage 0 =
}

fn usage() -> i32 {
    buf-size remaining - 
}

fn remaining() -> i32 {
    local block: .i32
    local free: i32
    root #block
    loop {
        $block !i32 0 = if { break }
        $block 4 + load32 $free + #free
        $block load32 !.i32 #block
    }
    $free
}

fn report() {
    1 "Memory usage: " IO:write-all IO:check 
    usage IO:print 
    1 " bytes, largest free block: " IO:write-all IO:check
    size-of-largest-free-block IO:print 
    1 " number of allocations: " IO:write-all IO:check
    n-allocs IO:print
    1 "\n" IO:write-all IO:check
}

